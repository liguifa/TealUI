{"version":3,"file":"pager (2).js","sourceRoot":"../../../..","sources":["components/ui/pagination/old/pager (2).ts"],"sourcesContent":["// #todo\r\n\r\n/**\r\n * @author xuld@vip.qq.com\r\n */\r\n\r\ntypeof include === \"function\" && include(\"ui/core/base.js\");\r\n\r\n\r\n/**\r\n * 生成包含指定分页信息的分页器 HTML。\r\n * @param {Number} totalCount 总的项数，这些项数将被分页。\r\n * @param {Number} [pageSize=20] 每页的项数。\r\n * @param {Number} [pagerCount=5] 显示的分页计数器个数，超过将不再显示。尽量传递奇数。\r\n * @param {Number} [currentPage=1] 当前的页码，页数从 1 开始。\r\n * @param {String} [href=\"?page={page}&size={pageSize}\"] 生成的链接格式。其中 {page} 表示当前的页码。{pageSize} 表示每页的项数。\r\n */\r\nfunction generatePager(totalCount, pageSize, pagerCount, currentPage, href) {\r\n    pageSize = pageSize || 20;\r\n    pagerCount = pagerCount || 5;\r\n    currentPage = currentPage || 1;\r\n    href = href || '?page={page}&size={pageSize}';\r\n\r\n    // 不需要分页。\r\n    if (!totalCount || totalCount <= pageSize) {\r\n        return '';\r\n    }\r\n\r\n    var maxPage = Math.ceil(totalCount / pageSize),\r\n        page = Math.max(Math.min(currentPage - Math.floor(pagerCount / 2), maxPage - pagerCount + 1), 1),\r\n        html = '';\r\n\r\n    currentPage = Math.max(Math.min(currentPage, maxPage), 1);\r\n\r\n    appendLink('prev', currentPage <= 1 ? 1 : currentPage - 1, currentPage <= 1 ? 'x-pager-disabled' : '');\r\n    for (; page <= maxPage && pagerCount > 0; pagerCount--, page++) {\r\n        appendLink('href', page, page === currentPage ? 'x-pager-actived' : '');\r\n    }\r\n    appendLink('next', currentPage >= maxPage ? maxPage : currentPage + 1, currentPage >= maxPage ? 'x-pager-disabled' : '');\r\n\r\n    return html;\r\n\r\n    function appendLink(key, page, className) {\r\n        html += generatePager.locale[key].replace('{href}', href).replace('{class}', className ? ' class=\"' + className + '\"' : '').replace(/{page}/g, page).replace(/{pageSize}/g, pageSize);\r\n    }\r\n\r\n}\r\n\r\ngeneratePager.locale = {\r\n    href: '<a href=\"{href}\"{class} title=\"转到：第{page}页\">{page}</a>',\r\n    prev: '<a href=\"{href}\"{class} title=\"上一页：第{page}页\"><span class=\"x-icon\">«</span></a>',\r\n    next: '<a href=\"{href}\"{class} title=\"下一页：第{page}页\"><span class=\"x-icon\">»</span></a>'\r\n};\r\n\r\n/**\r\n * 生成包含指定分页信息的分页器 HTML。\r\n * @param {Element} elem 渲染的父节点。\r\n * @param {Number} totalCount 总的项数，这些项数将被分页。\r\n * @param {Number} [pageSize=20] 每页的项数。\r\n * @param {Number} [pagerCount=5] 显示的分页计数器个数，超过将不再显示。尽量传递奇数。\r\n * @param {Number} [currentPage=1] 当前的页码，页数从 1 开始。\r\n * @param {Function/String} [callback] 点击分页后的回调函数或生成的链接个数。其中 {page} 表示当前的页码。{pageSize} 表示每页的项数。\r\n * @param {String} [href=\"?size={pageSize}&page={page}\"] 生成的链接格式。其中 {page} 表示当前的页码。{pageSize} 表示每页的项数。\r\n */\r\nfunction initPager(elem, totalCount, pageSize, pagerCount, currentPage, callback) {\r\n    var href;\r\n    if (!callback || callback.constructor !== Function) {\r\n        href = callback;\r\n        callback = 0;\r\n    }\r\n    elem.on('click', 'a', function (e) {\r\n        var hrefMatch = /page=(\\d+)/.exec(this.href);\r\n        !hrefMatch || changePage(+hrefMatch[1]) !== true && e.preventDefault();\r\n    });\r\n    \r\n    changePage(currentPage || +(/page=(\\d+)/.exec(location.href) || [0, 1])[1]);\r\n\r\n    // 切换页码的逻辑。\r\n    function changePage(page) {\r\n        elem.innerHTML = generatePager(totalCount, pageSize, pagerCount, page, href);\r\n        return callback && callback(page, pageSize * (page - 1), Math.min(pageSize * page - 1, totalCount));\r\n    }\r\n\r\n}"],"mappings":"AAAA,QAAQ;AAER;;GAEG;AAEH,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAG5D;;;;;;;GAOG;AACH,uBAAuB,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,IAAI;IACtE,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;IAC1B,UAAU,GAAG,UAAU,IAAI,CAAC,CAAC;IAC7B,WAAW,GAAG,WAAW,IAAI,CAAC,CAAC;IAC/B,IAAI,GAAG,IAAI,IAAI,8BAA8B,CAAC;IAE9C,SAAS;IACT,EAAE,CAAC,CAAC,CAAC,UAAU,IAAI,UAAU,IAAI,QAAQ,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,EAAE,CAAC;IACd,CAAC;IAED,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC,EAC1C,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,OAAO,GAAG,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAChG,IAAI,GAAG,EAAE,CAAC;IAEd,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;IAE1D,UAAU,CAAC,MAAM,EAAE,WAAW,IAAI,CAAC,GAAG,CAAC,GAAG,WAAW,GAAG,CAAC,EAAE,WAAW,IAAI,CAAC,GAAG,kBAAkB,GAAG,EAAE,CAAC,CAAC;IACvG,GAAG,CAAC,CAAC,EAAE,IAAI,IAAI,OAAO,IAAI,UAAU,GAAG,CAAC,EAAE,UAAU,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC;QAC7D,UAAU,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,KAAK,WAAW,GAAG,iBAAiB,GAAG,EAAE,CAAC,CAAC;IAC5E,CAAC;IACD,UAAU,CAAC,MAAM,EAAE,WAAW,IAAI,OAAO,GAAG,OAAO,GAAG,WAAW,GAAG,CAAC,EAAE,WAAW,IAAI,OAAO,GAAG,kBAAkB,GAAG,EAAE,CAAC,CAAC;IAEzH,MAAM,CAAC,IAAI,CAAC;IAEZ,oBAAoB,GAAG,EAAE,IAAI,EAAE,SAAS;QACpC,IAAI,IAAI,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,GAAG,UAAU,GAAG,SAAS,GAAG,GAAG,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAC1L,CAAC;AAEL,CAAC;AAED,aAAa,CAAC,MAAM,GAAG;IACnB,IAAI,EAAE,wDAAwD;IAC9D,IAAI,EAAE,gFAAgF;IACtF,IAAI,EAAE,gFAAgF;CACzF,CAAC;AAEF;;;;;;;;;GASG;AACH,mBAAmB,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,WAAW,EAAE,QAAQ;IAC5E,IAAI,IAAI,CAAC;IACT,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC;QACjD,IAAI,GAAG,QAAQ,CAAC;QAChB,QAAQ,GAAG,CAAC,CAAC;IACjB,CAAC;IACD,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,UAAU,CAAC;QAC7B,IAAI,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,CAAC,SAAS,IAAI,UAAU,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,CAAC,CAAC,cAAc,EAAE,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,WAAW,IAAI,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5E,WAAW;IACX,oBAAoB,IAAI;QACpB,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC7E,MAAM,CAAC,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,IAAI,GAAG,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACxG,CAAC;AAEL,CAAC"}