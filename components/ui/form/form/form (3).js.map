{"version":3,"file":"form (3).js","sourceRoot":"../../../..","sources":["components/ui/form/form/form (3).tsx"],"sourcesContent":["import { Control, VNode, bind } from \"control\";\r\nimport \"./form.scss\";\r\nimport { Input } from \"input/input\";\r\n\r\n/**\r\n * 表示一个表单。\r\n */\r\nexport class Form extends Control {\r\n\r\n    elem: HTMLFormElement;\r\n\r\n    /**\r\n     * 当被子类重写时负责渲染当前控件。\r\n     * @return 返回一个虚拟节点。\r\n     */\r\n    protected render() {\r\n        return <form class=\"x-form\" onSubmit={this.handleSubmit}></form>;\r\n    }\r\n\r\n    noValidate: boolean;\r\n\r\n    protected handleSubmit = (e: Event) => {\r\n\r\n        // 验证表单内所有字段。\r\n        if (!this.noValidate) {\r\n            const result = this.reportValidity();\r\n            if (result instanceof Promise) {\r\n                // 立即终止当前表单提交。\r\n                // 等待验证成功后重新提交。\r\n                e.preventDefault();\r\n                result.then(result => {\r\n                    if (result.length) {\r\n                        return;\r\n                    }\r\n                    const noValidate = this.noValidate;\r\n                    this.noValidate = true;\r\n                    try {\r\n                        this.submit();\r\n                    } finally {\r\n                        this.noValidate = noValidate;\r\n                    }\r\n                });\r\n                return;\r\n            }\r\n            if (result.length) {\r\n                e.preventDefault();\r\n                return;\r\n            }\r\n        }\r\n\r\n        // 验证通过开始提交。\r\n        if (this.onBeforeSubmit && this.onBeforeSubmit(e) === false) {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // 异步提交。\r\n        if (this.async) {\r\n            e.preventDefault();\r\n        } else {\r\n            this.onSubmit && this.onSubmit(e);\r\n        }\r\n    }\r\n\r\n    submit() {\r\n        this.elem.submit();\r\n    }\r\n\r\n    reset() {\r\n        this.elem.reset();\r\n    }\r\n\r\n    @bind(\"\", \"action\")\r\n    action: string;\r\n\r\n    async: boolean;\r\n\r\n    onBeforeSubmit: (e: Event) => void | boolean;\r\n\r\n    onSubmit: (e: Event) => void;\r\n\r\n    /**\r\n     * 当前表单内的所有输入控件。\r\n     */\r\n    get inputs() {\r\n        const result: Input[] = [];\r\n        const elems = this.elem.getElementsByTagName(\"*\");\r\n        for (let i = 0; elems[i]; i++) {\r\n            const elem = elems[i] as HTMLElement;\r\n            if (elem.__control__ instanceof Input) {\r\n                result.push(elem.__control__);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 验证当期表单内的所有输入域。\r\n     * @return 返回验证后的出错的字段列表。如果返回空数组说明验证成功。\r\n     */\r\n    checkValidity() {\r\n        const inputs = this.inputs;\r\n        const promises: Promise<string>[] = [];\r\n        const result: Input[] = [];\r\n        for (const input of inputs) {\r\n            const inputResult = input.checkValidity();\r\n            if (inputResult instanceof Promise) {\r\n                promises.push(inputResult.then(r => {\r\n                    if (r) {\r\n                        result.push(input);\r\n                    }\r\n                    return r;\r\n                }));\r\n            } else if (inputResult) {\r\n                result.push(input);\r\n            }\r\n        }\r\n        if (promises.length) {\r\n            return Promise.all(promises).then(() => result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 向用户报告验证结果。\r\n     */\r\n    reportValidity() {\r\n        const inputs = this.inputs;\r\n        const promises: Promise<string>[] = [];\r\n        const result: Input[] = [];\r\n        for (const input of inputs) {\r\n            const inputResult = input.reportValidity();\r\n            if (inputResult instanceof Promise) {\r\n                promises.push(inputResult.then(r => {\r\n                    if (r) {\r\n                        result.push(input);\r\n                    }\r\n                    return r;\r\n                }));\r\n            } else if (inputResult) {\r\n                result.push(input);\r\n            }\r\n        }\r\n        if (promises.length) {\r\n            return Promise.all(promises).then(() => result);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 清空验证结果。\r\n     */\r\n    resetValidity() {\r\n        this.inputs.forEach(input => input.resetValidity());\r\n    }\r\n\r\n}\r\n\r\nexport default Form;\r\n"],"mappings":"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"}