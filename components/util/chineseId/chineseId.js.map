{"version":3,"file":"chineseId.js","sourceRoot":"../../..","sources":["components/util/chineseId/chineseId.ts"],"sourcesContent":["\r\n/**\r\n * 解析身份证号的信息并检验合法性。\r\n * @param value 要解析的身份证号。\r\n * @return 返回一个 JSON，如：\r\n * ```json\r\n * {\r\n *      \"valid\": true,      // 表示身份证信息合法。\r\n *      \"province\": \"北京\", // 表示省份。\r\n *      \"birthday\": Date(), // 表示生日。\r\n *      \"sex\": false        // 表示性别。true 表示 '男'。\r\n * }\r\n * ```\r\n * @example parseChineseId(\"152500198909267865\")\r\n * @desc 本函数只验证身份证的数值特征，因此只适用于过滤无效的身份证号，并不能判定身份证是否真实存在。\r\n */\r\nexport default function parseChineseId(value: string) {\r\n\r\n    // 身份证 0 - 1 表示省份(省,自治区,直辖市)。\r\n    const province = ({\r\n        11: \"北京\",\r\n        12: \"天津\",\r\n        13: \"河北\",\r\n        14: \"山西\",\r\n        15: \"内蒙古\",\r\n        21: \"辽宁\",\r\n        22: \"吉林\",\r\n        23: \"黑龙江\",\r\n        31: \"上海\",\r\n        32: \"江苏\",\r\n        33: \"浙江\",\r\n        34: \"安徽\",\r\n        35: \"福建\",\r\n        36: \"江西\",\r\n        37: \"山东\",\r\n        41: \"河南\",\r\n        42: \"湖北\",\r\n        43: \"湖南\",\r\n        44: \"广东\",\r\n        45: \"广西\",\r\n        46: \"海南\",\r\n        50: \"重庆\",\r\n        51: \"四川\",\r\n        52: \"贵州\",\r\n        53: \"云南\",\r\n        54: \"西藏\",\r\n        61: \"陕西\",\r\n        62: \"甘肃\",\r\n        63: \"青海\",\r\n        64: \"宁夏\",\r\n        65: \"新疆\",\r\n        71: \"台湾\",\r\n        81: \"香港\",\r\n        82: \"澳门\",\r\n        91: \"国外\"\r\n    } as { [key: string]: string })[value.substr(0, 2)];\r\n\r\n    // 身份证 2 - 3 表示地区(市,州, 盟)。\r\n    // 身份证 4 - 5 表示县(旗,镇,区)。\r\n    // FIXME: 限于代码篇幅，此处不作校验。\r\n\r\n    // 身份证 6 - 13 表示生日。\r\n    const birthdayYear = +value.substr(6, 4);\r\n    const birthdayMonth = +value.substr(10, 2) - 1;\r\n    const birthdayDay = +value.substr(12, 2);\r\n    const birthday = new Date(birthdayYear, birthdayMonth, birthdayDay);\r\n\r\n    // 身份证 17 表示检验码。\r\n    let valid = !!province &&\r\n        birthday.getFullYear() === birthdayYear &&\r\n        birthday.getMonth() === birthdayMonth &&\r\n        birthday.getDate() === birthdayDay;\r\n    if (valid) {\r\n        let code = 0;\r\n        for (let i = 0; i < 18; i++) {\r\n            const bit = value.charCodeAt(17 - i);\r\n            code += ((1 << i) % 11) * (!i && (bit | 32) === 120 /*x*/ ? 10 : bit > 47 && bit < 58 ? bit - 48 : NaN);\r\n        }\r\n        valid = code % 11 === 1;\r\n    }\r\n\r\n    // 身份证 16 表示性别。\r\n    return {\r\n\r\n        /**\r\n         * 判断当前身份证是否合法。\r\n         */\r\n        valid,\r\n\r\n        /**\r\n         * 获取当前身份证的省份名。\r\n         */\r\n        province,\r\n\r\n        /**\r\n         * 获取当前身份证的生日。\r\n         */\r\n        birthday,\r\n\r\n        /**\r\n         * 获取当前身份证的性别。true 表示 '男', false 表示 '女'。\r\n         */\r\n        sex: value.charCodeAt(16) % 2 === 1\r\n\r\n    };\r\n}\r\n"],"mappings":";;IACA;;;;;;;;;;;;;;OAcG;IACH,wBAAuC,KAAa;QAEhD,6BAA6B;QAC7B,MAAM,QAAQ,GAAI;YACdmB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAEpD,0BAA0B;QAC1B,wBAAwB;QACxB,wBAAwB;QAExB,mBAAmB;QACnB,MAAM,YAAY,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,aAAa,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/C,MAAM,WAAW,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QACzC,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;QAEpE,gBAAgB;QAChB,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ;YAClB,QAAQ,CAAC,WAAW,EAAE,KAAK,YAAY;YACvC,QAAQ,CAAC,QAAQ,EAAE,KAAK,aAAa;YACrC,QAAQ,CAAC,OAAO,EAAE,KAAK,WAAW,CAAC;QACvC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACR,IAAI,IAAI,GAAG,CAAC,CAAC;YACb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC1B,MAAM,GAAG,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;gBACrC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,EAAE,CAAC,KAAK,GAAG,CAAC,KAAK,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;YAC5G,CAAC;YACD,KAAK,GAAG,IAAI,GAAG,EAAE,KAAK,CAAC,CAAC;QAC5B,CAAC;QAED,eAAe;QACf,MAAM,CAAC;YAEH;;eAEG;YACH,KAAK;YAEL;;eAEG;YACH,QAAQ;YAER;;eAEG;YACH,QAAQ;YAER;;eAEG;YACH,GAAG,EAAE,KAAK,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC;SAEtC,CAAC;IACN,CAAC;IAzFD,iCAyFC"}