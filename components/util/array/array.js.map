{"version":3,"file":"array.js","sourceRoot":"../../..","sources":["components/util/array/array.ts"],"sourcesContent":["/**\r\n * 创建一个等差数列组成的数组。\r\n * @param start 开始的数值。\r\n * @param end 结束的数值（不包含此数值）。\r\n * @param step 相邻数值的增幅。\r\n * @return 返回一个新数组。\r\n * @example range(0, 6) // [0, 1, 2, 3, 4, 5]\r\n * @example range(2, 11, 3) // [2, 5, 8]\r\n */\r\nexport function range(start: number, end: number, step = 1) {\r\n    const result: number[] = [];\r\n    for (; start < end; start += step) {\r\n        result.push(start);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 如果数组中不存在项则添加到数组末尾。\r\n * @param arr 相关的数组。\r\n * @param item 要添加的项。\r\n * @return 如果已添加到数组则返回 true，否则返回 false。\r\n * @example pushIf(1, 9, 0], 1) // 数组变成 [1, 9, 0]\r\n * @example pushIf([1, 9, 0], 2) // 数组变成 [1, 9, 0, 2]\r\n */\r\nexport function pushIf<T>(arr: T[], item: T) {\r\n    return arr.indexOf(item) < 0 && arr.push(item) > 0;\r\n}\r\n\r\n/**\r\n * 在数组的指定索引插入项。\r\n * @param arr 相关的数组。\r\n * @param index 要插入的索引（从 0 开始）。如果 *index* 大于数组的长度，则插入到末尾。\r\n * @param item 要插入的项。\r\n * @example insert([\"I\", \"you\"], 1, \"love\"); // 数组变成 [\"I\", \"love\", \"you\"]\r\n */\r\nexport function insert<T>(arr: T[], index: number, item: T) {\r\n    arr.splice(index, 0, item);\r\n}\r\n\r\n/**\r\n * 删除数组中指定的项。如果有多个匹配则只删除第一项。\r\n * @param arr 相关的数组。\r\n * @param item 要删除的项。\r\n * @param startIndex 开始搜索 *value* 的索引。\r\n * @return 返回被删除的项在原数组中的索引。如果数组中找不到指定的项则返回 -1。\r\n * @example remove([1, 9, 9, 0], 9) // 1, 数组变成 [1, 9, 0]\r\n * @example while(remove(arr, \"wow\") >= 0); // 删除所有 \"wow\"。\r\n */\r\nexport function remove<T>(arr: T[], item: T, startIndex?: number) {\r\n    startIndex = arr.indexOf(item, startIndex);\r\n    ~startIndex && arr.splice(startIndex, 1);\r\n    return startIndex;\r\n}\r\n\r\n/**\r\n * 删除数组中指定的项。如果有多个匹配则全部删除。\r\n * @param arr 相关的数组。\r\n * @param item 要删除的项。\r\n * @param startIndex 开始搜索 *value* 的索引。\r\n * @example removeAll([1, 9, 9, 0], 9) // 数组变成 [1, 0]\r\n */\r\nexport function removeAll<T>(arr: T[], item: T, startIndex?: number) {\r\n    let index = startIndex;\r\n    while ((index = remove(arr, item, index)) >= 0);\r\n}\r\n\r\n/**\r\n * 删除数组中值等价于 false 的项。\r\n * @param arr 相关的数组。\r\n * @example clean([\"\", false, 0, undefined, null, {}]) // 数组变成 [{}]\r\n */\r\nexport function clean<T>(arr: T[]) {\r\n    for (let i = arr.length; --i >= 0;) {\r\n        if (!arr[i]) {\r\n            arr.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 清空数组的所有项。\r\n * @param arr 相关的数组。\r\n * @example clear([1, 2]) // 数组变成 []\r\n */\r\nexport function clear<T>(arr: T[]) {\r\n    arr.length = 0;\r\n}\r\n\r\n/**\r\n * 交换数组中的两个项。\r\n * @param arr 相关的数组。\r\n * @param x 要交换的第一个索引。\r\n * @param y 要交换的第二个索引。\r\n * @example swap([1, 2, 3], 1, 2)\r\n */\r\nexport function swap<T>(arr: T[], x: number, y: number) {\r\n    const t = arr[x];\r\n    arr[x] = arr[y];\r\n    arr[y] = t;\r\n}\r\n\r\n/**\r\n * 根据指定的规则排序。\r\n * @param arr 相关的数组。\r\n * @param keys 排序的规则参数。可以是键名或自定义取值的函数。\r\n * @example sortBy([{ \"user\": \"fred\" }, { \"user\": \"bred\" }], o => o.user) // [{ \"user\": \"bred\" }, { \"user\": \"fred\" }]\r\n * @example sortBy([{ \"user\": \"fred\" }, { \"user\": \"bred\" }], \"user\") // [{ \"user\": \"bred\" }, { \"user\": \"fred\" }]\r\n */\r\nexport function sortBy<T>(arr: T[], ...keys: (((item: T) => any) | keyof T)[]) {\r\n    arr.sort((x, y) => {\r\n        for (const key of keys) {\r\n            const valueX = typeof key === \"function\" ? (key as (item: T) => any)(x) : x[key];\r\n            const valueY = typeof key === \"function\" ? (key as (item: T) => any)(y) : y[key];\r\n            if (valueX > valueY) {\r\n                return 1;\r\n            }\r\n            if (valueX < valueY) {\r\n                return -1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * 根据指定的规则倒排。\r\n * @param arr 相关的数组。\r\n * @param keys 排序的规则参数。可以是键名或自定义取值的函数。\r\n * @example sortByDesc([{ \"user\": \"bred\" }, { \"user\": \"fred\" }], o => o.user) // [{ \"user\": \"fred\" }, { \"user\": \"bred\" }]\r\n * @example sortByDesc([{ \"user\": \"bred\" }, { \"user\": \"fred\" }], \"user\") // [{ \"user\": \"fred\" }, { \"user\": \"bred\" }]\r\n */\r\nexport function sortByDesc<T>(arr: T[], ...keys: (((item: T) => any) | keyof T)[]) {\r\n    return arr.sort((x, y) => {\r\n        for (const item of keys) {\r\n            const valueX = typeof item === \"function\" ? (item as (item: T) => any)(x) : x[item];\r\n            const valueY = typeof item === \"function\" ? (item as (item: T) => any)(y) : y[item];\r\n            if (valueX > valueY) {\r\n                return -1;\r\n            }\r\n            if (valueX < valueY) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n}\r\n\r\n/**\r\n * 将数组中的项随机打乱。\r\n * @param arr 相关的数组。\r\n * @example shuffle([1, 2, 3])\r\n */\r\nexport function shuffle<T>(arr: T[]) {\r\n    let index = arr.length;\r\n    while (index > 0) {\r\n        const target = Math.floor(Math.random() * index);\r\n        const value = arr[--index];\r\n        arr[index] = arr[target];\r\n        arr[target] = value;\r\n    }\r\n}\r\n\r\n/**\r\n * 获取数组中指定索引的项。\r\n * @param arr 相关的数组。\r\n * @param index 要获取的索引（从 0 开始）。如果值为负数，则获取倒数的项。\r\n * @return 返回指定索引的项。\r\n * @example item([\"a\", \"b\"], -1) // \"b\"\r\n */\r\nexport function item<T>(arr: T[], index: number) {\r\n    return arr[index < 0 ? arr.length + index : index];\r\n}\r\n\r\n/**\r\n * 获取数组中第一个不为空的项。\r\n * @param arr 相关的数组。\r\n * @return 返回第一个不为空的项，如果所有项都为空则返回 undefined。\r\n * @example pick([undefined, null, 1, 2]) // 1\r\n */\r\nexport function pick<T>(arr: T[]) {\r\n    for (const value of arr) {\r\n        if (value != undefined) {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 随机获取数组中的任一项。\r\n * @param arr 相关的数组。\r\n * @return 返回某一项。如果数组为空则返回 undefined。\r\n * @example random([1, 2, 3])\r\n */\r\nexport function random<T>(arr: T[]) {\r\n    return arr[Math.floor(arr.length * Math.random())];\r\n}\r\n\r\n/**\r\n * 计算指定项在数组中出现的次数。\r\n * @param arr 相关的数组。\r\n * @param item 要搜索的项。\r\n * @param startIndex 开始搜索的索引（从 0 开始）。\r\n * @param endIndex 结束搜索的索引（从 0 开始，不含）。\r\n * @return 返回项出现的次数。\r\n * @example count([\"a\", \"b\"], \"a\") // 1\r\n */\r\nexport function count<T>(arr: T[], item: T, startIndex = 0, endIndex = arr.length) {\r\n    let result = 0;\r\n    for (; startIndex < endIndex; startIndex++) {\r\n        if (arr[startIndex] === item) {\r\n            result++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断数组中是否存在重复项。\r\n * @param arr 相关的数组。\r\n * @return 若数组中存在重复项则返回 true，否则返回 false。\r\n * @example isUnique([1, 9, 0]) // true\r\n * @example isUnique([1, 9, 9, 0]) // false\r\n */\r\nexport function isUnique<T>(arr: T[]) {\r\n    for (let i = arr.length - 1; i > 0; i--) {\r\n        if (~arr.indexOf(arr[i - 1], i)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 删除当前数组中的重复项并返回新数组。\r\n * @param arr 相关的数组。\r\n * @return 返回过滤后的新数组。\r\n * @example [1, 9, 9, 0].unique() // [1, 9, 0]\r\n */\r\nexport function unique<T>(arr: T[]) {\r\n    const result: T[] = [];\r\n    for (const value of arr) {\r\n        result.indexOf(value) < 0 && result.push(value);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 将多维数组合并为一维数组。\r\n * @param arr 相关的数组。\r\n * @return 返回新数组。\r\n * @example flatten([[1, 2], [[[3]]]]) // [1, 2, 3]\r\n */\r\nexport function flatten(arr: any[]) {\r\n    const result: any[] = [];\r\n    for (const value of arr) {\r\n        value && value instanceof Array ? result.push(...flatten(value)) : result.push(value);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 从数组中删除另一个数组的所有项，返回剩下的项组成的新数组。\r\n * @param arr 相关的数组。\r\n * @param other 需要被删除的项数组。\r\n * @return 返回新数组。\r\n * @example sub([1, 2], [1]) // [2]\r\n */\r\nexport function sub<T>(arr: T[], other: T[]) {\r\n    const result: T[] = [];\r\n    for (let i = arr.length; --i >= 0;) {\r\n        ~other.indexOf(arr[i]) || result.push(arr[i]);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 计算数组的全排列结果。\r\n * @param arr 相关的数组。\r\n * @return 返回一个新数组，其每一项都是一种排列结果。\r\n * @example permute([1, 2, 3]) // [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\r\n */\r\nexport function permute<T>(arr: T[]) {\r\n    const result: T[][] = [];\r\n    const usedItems: T[] = [];\r\n    const next = (input: any) => {\r\n        for (let i = 0; i < input.length; i++) {\r\n            const item = input.splice(i, 1)[0];\r\n            usedItems.push(item);\r\n            if (input.length == 0) {\r\n                result.push(usedItems.slice(0));\r\n            }\r\n            next(input);\r\n            input.splice(i, 0, item);\r\n            usedItems.pop();\r\n        }\r\n    };\r\n    next(arr);\r\n    return result;\r\n}\r\n\r\n/**\r\n * 将数组中的项分别和指定的键组合为对象。\r\n * @param arr 相关的数组。\r\n * @param keys 相关的键列表。\r\n * @return 返回数组和指定键组成的键值对。\r\n * @example associate([1, 2], [\"a\", \"b\"]) // { a: 1, b: 2 }\r\n */\r\nexport function associate<T>(arr: T[], keys: string[]) {\r\n    const result: { [key: string]: T; } = {};\r\n    const length = Math.min(arr.length, keys.length);\r\n    for (let i = 0; i < length; i++) {\r\n        result[keys[i]] = arr[i];\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 调用数组每一项的成员函数。\r\n * @param arr 相关的数组。\r\n * @param funcName 要调用的成员函数名。\r\n * @param args 调用的参数列表。\r\n * @return 返回所有调用结果组成的新数组。\r\n * @example invoke([\"Teal\", \"UI\"], \"length\"); // [4, 2]\r\n */\r\nexport function invoke<T>(arr: T[], funcName: string, ...args: any[]) {\r\n    const result: T[] = [];\r\n    for (const value of arr) {\r\n        let item = (value as any)[funcName];\r\n        if (typeof item === \"function\") {\r\n            item = item.apply(value, args);\r\n        }\r\n        result.push(item);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 根据指定的规则选择项。\r\n * @param arr 相关的数组。\r\n * @param key 选择的规则参数。可以是键名或自定义取值的函数。\r\n * @return 返回选择的结果组成的新数组。\r\n * @example select([{ \"user\": \"fred\" },{ \"banch\": \"bred\" }], o => o.user) // [\"fred\"]\r\n * @example select([{ \"user\": \"fred\" },{ \"banch\": \"bred\" }], \"user\") // [\"fred\"]\r\n */\r\nexport function select<T, R>(arr: T[], key: ((item: T) => R) | keyof T) {\r\n    const result: R[] = [];\r\n    for (const item of arr) {\r\n        result.push(typeof key === \"function\" ? (key as (item: T) => R)(item) : item[key] as any);\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的最小值。\r\n * @param arr 相关的数组。\r\n * @return 返回数组中所有项的最小值。如果数组为空则返回 Infinity。\r\n * @example min([1, 2]) // 1\r\n */\r\nexport function min(arr: number[]) {\r\n    return Math.min(...arr);\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的最大值。\r\n * @param arr 相关的数组。\r\n * @return 返回数组中所有项的最大值。如果数组为空则返回 -Infinity。\r\n * @example max([1, 2]) // 2\r\n */\r\nexport function max(arr: number[]) {\r\n    return Math.max(...arr);\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的和。\r\n * @param arr 相关的数组。\r\n * @return 返回数组中所有数值的和。计算时将忽略非数字的项。如果数组为空则返回 0。\r\n * @example sum([1, 2]) // 3\r\n */\r\nexport function sum(arr: number[]) {\r\n    let result = 0;\r\n    let i = arr.length;\r\n    while (--i >= 0) {\r\n        result += +arr[i] || 0;\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 计算数组中所有项的算术平均值。\r\n * @param arr 相关的数组。\r\n * @return 返回数组中所有数值的算术平均值。计算时将忽略非数字的项。如果数组为空则返回 0。\r\n * @example avg([1, 2]) // 1.5\r\n */\r\nexport function avg(arr: number[]) {\r\n    let sum = 0;\r\n    let c = 0;\r\n    let i = arr.length;\r\n    while (--i >= 0) {\r\n        if (arr[i] === 0 || +arr[i]) {\r\n            sum += +arr[i];\r\n            c++;\r\n        }\r\n    }\r\n    return c ? sum / c : 0;\r\n}\r\n"],"mappings":"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"}