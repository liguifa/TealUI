{"version":3,"file":"object.js","sourceRoot":"../../..","sources":["components/util/object/object.ts"],"sourcesContent":["/**\r\n * 复制对象的所有属性到目标对象，如果目标对象已存在对应属性则跳过。\r\n * @param iterable 复制的目标对象。\r\n * @param source 复制的源对象。\r\n * @example assignIf({a: 1}, {a: 2, b: 2}) // {a: 1, b: 2}\r\n */\r\nexport function assignIf<T, R>(iterable: T, source: R) {\r\n    for (const key in source as any) {\r\n        if ((iterable as any)[key] === undefined) {\r\n            (iterable as any)[key] = (source as any)[key];\r\n        }\r\n    }\r\n    return iterable as T & R;\r\n}\r\n\r\n/**\r\n * 在对象指定键之前插入一个键值对。\r\n * @param obj 要插入的对象。\r\n * @param newKey 新插入的键。\r\n * @param newValue 新插入的值。\r\n * @param refKey 插入的位置。新键值对将插入在指定的键前。如果指定键不存在则插入到末尾。\r\n * @example insertBefore({ a: 1 }, \"b\", 2, \"a\") // { b:2, a: 1 }\r\n */\r\nexport function insertBefore<T extends any>(obj: T, newKey: string, newValue: any, refKey?: keyof T) {\r\n    let tmpObj: any;\r\n    for (const key in obj) {\r\n        if (key === refKey) {\r\n            tmpObj = {};\r\n        }\r\n        if (tmpObj) {\r\n            tmpObj[key] = obj[key];\r\n            delete obj[key];\r\n        }\r\n    }\r\n    obj[newKey] = newValue;\r\n    for (const key in tmpObj) {\r\n        obj[key] = tmpObj[key];\r\n    }\r\n}\r\n\r\n/**\r\n * 对指定的类数组每一项执行一次 *callback*。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：函数可以返回 false 以终止循环。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果循环是因为 *callback* 返回 false 而中止，则返回 false，否则返回 true。\r\n * @example each([\"a\", \"b\"], console.log, console); // 打印 '0  a' 和 '1  b'\r\n */\r\nexport function each<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean | void, thisArg?: any): boolean;\r\n\r\n/**\r\n * 对指定的对象（不支持函数）每一项执行一次 *callback*。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：函数可以返回 false 以终止循环。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果循环是因为 *callback* 返回 false 而中止，则返回 false，否则返回 true。\r\n * @example each({a: 1, b: 2}, console.log, console); // 打印 'a  1' 和 'b  2'\r\n */\r\nexport function each<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean | void, thisArg?: any): boolean;\r\n\r\nexport function each<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean | void, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && callback.call(thisArg, (iterable as any)[i], i, iterable) === false) {\r\n                return false;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (callback.call(thisArg, (iterable as any)[i], i, iterable) === false) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 对指定的类数组每一项执行一次 *callback*。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @example forEach([\"a\", \"b\"], console.log, console) // 打印 '0  a' 和 '1  b'\r\n */\r\nexport function forEach<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean | void, thisArg?: any): void;\r\n\r\n/**\r\n * 对指定的对象（不支持函数）每一项执行一次 *callback*。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @example forEach({a: 1, b: 2}, console.log, console) // 打印 'a  1' 和 'b  2'\r\n */\r\nexport function forEach<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean | void, thisArg?: any): void;\r\n\r\nexport function forEach<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean | void, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if (i in iterable) {\r\n                callback.call(thisArg, (iterable as any)[i], i, iterable);\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            callback.call(thisArg, (iterable as any)[i], i, iterable);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 筛选指定类数组中符合要求的项并组成一个新数组。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回一个新数组。\r\n * @example filter([1, 2], function (item) { return item > 1; }) // [2]\r\n */\r\nexport function filter<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean, thisArg?: any): { [key: string]: T };\r\n\r\n/**\r\n * 筛选指定对象中符合要求的项并组成一个新对象。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回一个新对象。\r\n * @example filter({a: 1, b: 2}, function (item) { return item > 1; }) // {b: 2}\r\n */\r\nexport function filter<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean, thisArg?: any): { [key: string]: T };\r\n\r\nexport function filter<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean, thisArg?: any) {\r\n    let result: T[] | { [key: string]: T };\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        result = [];\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                (result as T[]).push((iterable as any)[i]);\r\n            }\r\n        }\r\n    } else {\r\n        result = {};\r\n        for (const i in iterable) {\r\n            if (callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                result[i] = (iterable as any)[i];\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 遍历指定类数组，并对每一项执行 *callback*，然后返回每个结果组成的新数组。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于计算每一项的返回值。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：返回结果。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回一个新数组。\r\n * @example map([\"a\", \"b\"], function (a) { return a + a; }) // [\"aa\", \"bb\"]\r\n */\r\nexport function map<T, R>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => R, thisArg?: any): R[];\r\n\r\n/**\r\n * 遍历指定对象（不支持函数），并对每一项执行 *callback*，然后返回每个结果组成的新对象。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于计算每一项的返回值。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：结果。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回一个新对象。\r\n * @example map({length: 1, \"0\": \"a\"}, function (a) { return a + a; }) // [\"a\"]\r\n * @example map({a: \"a\", b: \"b\"}, function (a) { return a + a; }) // {a: \"aa\", b: \"bb\"}\r\n */\r\nexport function map<T, R>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => R, thisArg?: any): { [key: string]: R };\r\n\r\nexport function map<T, R>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => R, thisArg?: any) {\r\n    let result: R[] | { [key: string]: R };\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        result = [];\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if (i in iterable) {\r\n                result[i] = callback.call(thisArg, (iterable as any)[i], i, iterable);\r\n            }\r\n        }\r\n    } else {\r\n        result = {};\r\n        for (const i in iterable) {\r\n            result[i] = callback.call(thisArg, (iterable as any)[i], i, iterable);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断指定类数组的每一项是否都满足条件。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果所有项满足条件则返回 true，否则返回 false。\r\n * @example every([1, 2], function (item) { return item > 0; }) // true\r\n * @example every([1, 2], function (item) { return item > 1; }) // false\r\n * @example every([1, 2], function (item) { return item > 2; }) // false\r\n */\r\nexport function every<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean, thisArg?: any): boolean;\r\n\r\n/**\r\n * 判断指定对象（不支持函数）的每一项是否都满足条件。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果所有项满足条件则返回 true，否则返回 false。\r\n * @example every({a: 1, b: 2}, function (item) { return item > 0; }) // true\r\n * @example every({a: 1, b: 2}, function (item) { return item > 1; }) // false\r\n * @example every({a: 1, b: 2}, function (item) { return item > 2; }) // false\r\n */\r\nexport function every<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean, thisArg?: any): boolean;\r\n\r\nexport function every<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && !callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return false;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (!callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 判断指定类数组是否至少存在一项满足条件。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果至少存在一项满足条件则返回 true，否则返回 false。\r\n * @example some([1, 2], function (item) { return item > 0; }) // true\r\n * @example some([1, 2], function (item) { return item > 1; }) // true\r\n * @example some([1, 2], function (item) { return item > 2; }) // false\r\n */\r\nexport function some<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean, thisArg?: any): boolean;\r\n\r\n/**\r\n * 判断指定对象（不支持函数）是否至少存在一项满足条件。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 如果至少存在一项满足条件则返回 true，否则返回 false。\r\n * @example some({a: 1, b: 2}, function (item) { return item > 1; }) // true\r\n * @example some({a: 1, b: 2}, function (item) { return item > 1; }) // true\r\n * @example some({a: 1, b: 2}, function (item) { return item > 2; }) // false\r\n */\r\nexport function some<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean, thisArg?: any): boolean;\r\n\r\nexport function some<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return true;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 找出指定类数组中符合条件的第一项。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回符合条件的第一项，如果没有满足条件的项，则返回 undefined。\r\n * @example find([1, 2], function (item) { return item > 1; }) // 2\r\n */\r\nexport function find<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean, thisArg?: any): T | undefined;\r\n\r\n/**\r\n * 找出指定对象（不支持函数）中符合条件的第一项。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回符合条件的第一项，如果没有满足条件的项，则返回 undefined。\r\n * @example find({a: 1, b: 2}, function (item) { return item > 1; }) // 2\r\n */\r\nexport function find<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean, thisArg?: any): T | undefined;\r\n\r\nexport function find<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return (iterable as any)[i] as T;\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return (iterable as any)[i] as T;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 找出指定类数组中符合条件的第一项的索引。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回符合条件的第一项的索引，如果没有满足条件的项，则返回 -1 或 undefined。\r\n * @example findIndex([1, 2], function (item){ return item > 1; }) // 1\r\n * @example findIndex([1, 2], function (item){ return item > 2; }) // -1\r\n */\r\nexport function findIndex<T>(iterable: ArrayLike<T>, callback: (value: T, index: number, iterable: ArrayLike<T>) => boolean, thisArg?: any): number;\r\n\r\n/**\r\n * 找出指定对象（不支持函数）中符合条件的第一项的键。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，用于确定每一项是否符合条件。\r\n * - value：当前项的值。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：如果当前项符合条件则应该返回 true，否则返回 false。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回符合条件的第一项的键，如果没有满足条件的项，则返回 -1 或 undefined。\r\n * @example findIndex({a: 1, b: 2}, function (item){return item > 1;}) // 'b'\r\n * @example findIndex({a: 1, b: 2}, function (item){return item > 2;}) // undefined\r\n */\r\nexport function findIndex<T>(iterable: { [key: string]: T }, callback: (value: T, key: string, iterable: { [key: string]: T }) => boolean, thisArg?: any): string | undefined;\r\n\r\nexport function findIndex<T>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (value: T, key: any, iterable: any) => boolean, thisArg?: any) {\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if ((i in iterable) && callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (callback.call(thisArg, (iterable as any)[i], i, iterable)) {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 从左往右依次合并类数组中的每一项并最终返回一个值。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，每次合并两项为一项。\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduce([1, 2], function (x, y) { return x + y; }) // 3\r\n * @example reduce([1, 2], function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduce<T, R>(iterable: ArrayLike<T>, callback: (previousValue: R, currentValue: T, index: number, iterable: ArrayLike<T>) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\n/**\r\n * 从左往右依次合并对象（不支持函数）中的每一项并最终返回一个值。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，每次合并两项为一项。\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduce({a: 1, b: 2}, function (x, y) { return x + y; }) // 3\r\n * @example reduce({a: 1, b: 2}, function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduce<T, R>(iterable: { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: string, iterable: { [key: string]: T }) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\nexport function reduce<T, R>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: any, iterable: any) => R, initialValue?: R, thisArg?: any) {\r\n    let result: R | undefined;\r\n    let first = true;\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = 0; i < (iterable as ArrayLike<T>).length; i++) {\r\n            if (i in iterable) {\r\n                if (first) {\r\n                    first = false;\r\n                    result = initialValue === undefined ? (iterable as any)[i] : callback.call(thisArg, initialValue, (iterable as any)[i], i, iterable);\r\n                } else {\r\n                    result = callback.call(thisArg, result, (iterable as any)[i], i, iterable);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        for (const i in iterable) {\r\n            if (first) {\r\n                first = false;\r\n                result = initialValue === undefined ? (iterable as any)[i] : callback.call(thisArg, initialValue, (iterable as any)[i], i, iterable);\r\n            } else {\r\n                result = callback.call(thisArg, result, (iterable as any)[i], i, iterable);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 从左往右依次合并类数组中的每一项并最终返回一个值。\r\n * @param iterable 要遍历的类数组。\r\n * @param callback 对每一项执行的函数，每次合并两项为一项。\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - index：当前项的索引。\r\n * - iterable：类数组本身。\r\n * - 返回：合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduceRight([1, 2], function (x, y) { return x + y; }) // 3\r\n * @example reduceRight([1, 2], function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduceRight<T, R>(iterable: ArrayLike<T>, callback: (previousValue: R, currentValue: T, index: number, iterable: ArrayLike<T>) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\n/**\r\n * 从左往右依次合并对象（不支持函数）中的每一项并最终返回一个值。\r\n * @param iterable 要遍历的对象（不支持函数）。\r\n * @param callback 对每一项执行的函数，每次合并两项为一项。\r\n * - previousValue：要合并的前一项。\r\n * - currentValue：要合并的当前项。\r\n * - key：当前项的键。\r\n * - iterable：对象本身。\r\n * - 返回：合并的结果。\r\n * @param initialValue 用于合并第一项的初始值。\r\n * @param thisArg 执行 *callback* 时 this 的值。\r\n * @return 返回合并后的最终结果值。\r\n * @example reduceRight({a: 1, b: 2}, function (x, y) { return x + y; }) // 3\r\n * @example reduceRight({a: 1, b: 2}, function (x, y) { return x + y; }, 10) // 13\r\n */\r\nexport function reduceRight<T, R>(iterable: { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: string, iterable: { [key: string]: T }) => R, initialValue?: R, thisArg?: any): R | undefined;\r\n\r\nexport function reduceRight<T, R>(iterable: ArrayLike<T> | { [key: string]: T }, callback: (previousValue: R, currentValue: T, key: any, iterable: any) => R, initialValue?: R, thisArg?: any) {\r\n    let result: R | undefined;\r\n    let first = true;\r\n    if (iterable && typeof (iterable as ArrayLike<T>).length === \"number\") {\r\n        for (let i = (iterable as ArrayLike<T>).length; --i >= 0;) {\r\n            if (i in iterable) {\r\n                if (first) {\r\n                    first = false;\r\n                    result = initialValue === undefined ? (iterable as any)[i] : callback.call(thisArg, initialValue, (iterable as any)[i], i, iterable);\r\n                } else {\r\n                    result = callback.call(thisArg, result, (iterable as any)[i], i, iterable);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        const key: string[] = [];\r\n        for (const i in iterable) {\r\n            key.push(i);\r\n        }\r\n        for (let i = key.length; --i >= 0;) {\r\n            if (first) {\r\n                first = false;\r\n                result = initialValue === undefined ? (iterable as any)[key[i]] : callback.call(thisArg, initialValue, (iterable as any)[key[i]], key[i], iterable);\r\n            } else {\r\n                result = callback.call(thisArg, result, (iterable as any)[key[i]], key[i], iterable);\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 获取对象指定键列表的子集。\r\n * @param obj 要处理的对象。\r\n * @param keys 要获取的键列表。\r\n * @return 返回新对象。\r\n * @example subset({a: 1, b: 2}, ['a']) // {a: 1}\r\n */\r\nexport function subset<T>(obj: { [key: number]: T } | { [key: string]: T }, keys: (string | number)[]) {\r\n    const result: { [key: string]: T } = {};\r\n    for (const key of keys) {\r\n        if (key in obj) {\r\n            result[key] = (obj as any)[key];\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断一个对象是否是引用对象。\r\n * @param obj 要判断的对象。\r\n * @return 如果 *obj* 是引用变量，则返回 true，否则返回 false。\r\n * @desc 此函数等效于 `obj !== null && typeof obj === \"object\"`\r\n * @example isObject({}) // true\r\n * @example isObject(null) // false\r\n */\r\nexport function isObject(obj: any): obj is object {\r\n    return obj !== null && typeof obj === \"object\";\r\n}\r\n\r\n/**\r\n * 缓存所有类型转为字符串的值。\r\n */\r\nlet types: { [key: string]: \"string\" | \"number\" | \"boolean\" | \"undefined\" | \"null\" | \"array\" | \"function\" | \"date\" | \"regexp\" | \"error\" | \"object\"; };\r\n\r\n/**\r\n * 获取指定对象的类型。\r\n * @param obj 要判断的对象。\r\n * @return 返回类型字符串。\r\n * @example type(null) // \"null\"\r\n * @example type(undefined) // \"undefined\"\r\n * @example type(new Function) // \"function\"\r\n * @example type(+'a') // \"number\"\r\n * @example type(/a/) // \"regexp\"\r\n * @example type([]) // \"array\"\r\n */\r\nexport function type(obj: any) {\r\n    if (!types) {\r\n        types = { __proto__: null! };\r\n        \"Boolean Number String Function Array Date RegExp Object Error\".replace(/\\w+/g, typeName => types[\"[object \" + typeName + \"]\"] = typeName.toLowerCase() as any);\r\n    }\r\n    return obj == null ? String(obj) as \"null\" | \"undefined\" : types[Object.prototype.toString.call(obj)] || \"object\";\r\n}\r\n\r\n/**\r\n * 计算对象的属性数。\r\n * @param obj 要处理的对象。\r\n * @return 返回对象自身的属性数，不包含原型属性。\r\n * @example size({a: 1, b: 2}) // 2\r\n * @example size([0, 1]) // 2\r\n */\r\nexport function size(obj: any) {\r\n    let result = 0;\r\n    for (const key in obj) {\r\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n            result++;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 判断一个对象是否为空。\r\n * @param obj 要判断的对象。\r\n * @return 如果 *obj* 是 null、undefined、false、空字符串、空数组或空对象，则返回 true，否则返回 false。\r\n * @example isEmpty(null) // true\r\n * @example isEmpty(undefined) // true\r\n * @example isEmpty(\"\") // true\r\n * @example isEmpty(\" \") // false\r\n * @example isEmpty([]) // true\r\n * @example isEmpty({}) // true\r\n */\r\nexport function isEmpty(obj: any): obj is null {\r\n    if (!obj || obj.length === 0) {\r\n        return true;\r\n    }\r\n    for (const key in obj) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * 浅拷贝一个对象并返回和原对象无引用关系的副本。\r\n * @param obj 要复制的对象。\r\n * @return 返回拷贝的新对象，更新新对象不会影响原对象。\r\n * @desc 出于性能考虑，本函数不会拷贝函数和正则表达式。\r\n * @example clone({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function clone<T>(obj: T) {\r\n    if (obj && typeof obj === \"object\") {\r\n        return { ...obj as any };\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 深拷贝一个对象并返回和原对象无引用关系的副本。\r\n * @param obj 要复制的对象。\r\n * @param depth 最多拷贝的深度。\r\n * @return 返回拷贝的新对象，更新新对象不会影响原对象。\r\n * @desc 出于性能考虑，本函数不会深拷贝函数和正则表达式。\r\n * @example deepClone({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function deepClone<T>(obj: T, depth = Infinity) {\r\n    if (obj && typeof obj === \"object\" && depth-- > 0) {\r\n        if (obj instanceof Array) {\r\n            const newObj: any = [];\r\n            for (let i = 0; i < obj.length; i++) {\r\n                newObj[i] = deepClone(obj[i]);\r\n            }\r\n            obj = newObj;\r\n        } else if (obj instanceof Date) {\r\n            obj = new Date(+obj) as any;\r\n        } else if (!(obj instanceof RegExp)) {\r\n            const newObj: any = { __proto__: (obj as any).__proto__ };\r\n            for (const i in obj) {\r\n                newObj[i] = deepClone(obj[i]);\r\n            }\r\n            obj = newObj;\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 深拷贝一个对象并返回和原对象无引用关系的副本。此函数可以处理循环引用。\r\n * @param obj 要复制的对象。\r\n * @param depth 最多拷贝的深度。\r\n * @return 返回拷贝的新对象，更新新对象不会影响原对象。\r\n * @desc 出于性能考虑，本函数不会深拷贝函数和正则表达式。\r\n * @example deepCloneSafe({a: 3, b: [5]}) // {a: 3, b: [5]}\r\n */\r\nexport function deepCloneSafe<T>(obj: T, cloned: any[] = [], clonedResult: any[] = []) {\r\n    if (obj && typeof obj === \"object\") {\r\n        const index = cloned.indexOf(obj);\r\n        if (index >= 0) {\r\n            return clonedResult[index];\r\n        }\r\n        if (obj instanceof Array) {\r\n            const newObj: any = [];\r\n            cloned.push(obj);\r\n            clonedResult.push(newObj);\r\n            for (let i = 0; i < obj.length; i++) {\r\n                newObj[i] = deepCloneSafe(obj[i], cloned, clonedResult);\r\n            }\r\n            obj = newObj;\r\n        } else if (obj instanceof Date) {\r\n            obj = new Date(+obj) as any;\r\n        } else if (!(obj instanceof RegExp)) {\r\n            const newObj: any = { __proto__: (obj as any).__proto__ };\r\n            cloned.push(obj);\r\n            clonedResult.push(newObj);\r\n            for (const i in obj) {\r\n                newObj[i] = deepCloneSafe(obj[i], cloned, clonedResult);\r\n            }\r\n            obj = newObj;\r\n        }\r\n    }\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 比较两个引用对象的内容是否相同。\r\n * @param x 要比较的第一个对象。\r\n * @param y 要比较的第二个对象。\r\n * @return 如果比较的对象相同则返回 true，否则返回 false。\r\n * @example deepEqual([], []) // true\r\n */\r\nexport function deepEqual(x: any, y: any) {\r\n    if (x && y && typeof x === \"object\" && typeof y === \"object\") {\r\n        if (Array.isArray(x) !== Array.isArray(y)) {\r\n            return false;\r\n        }\r\n        for (const key in x) {\r\n            if (!deepEqual(x[key], y[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        for (const key in y) {\r\n            if (!deepEqual(x[key], y[key])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return x === y;\r\n}\r\n\r\n/**\r\n * 深度比较两个对象的差异。\r\n * @param x 要比较的第一个对象。\r\n * @param y 要比较的第二个对象。\r\n * @return 返回一个新对象。\r\n * @example diff({ a:1, c: 1 }, { b: 1, c: 2 }) // { left: [\"a\"], right: [\"b\"], both: [\"c\"] }\r\n */\r\nexport function diff(x: any, y: any) {\r\n    const result = {\r\n\r\n        /**\r\n         * 获取仅在左值存在的字段。\r\n         */\r\n        left: [] as string[],\r\n\r\n        /**\r\n         * 获取仅在右值存在的字段。\r\n         */\r\n        right: [] as string[],\r\n\r\n        /**\r\n         * 获取在左右同时存在但其值不同的字段。\r\n         */\r\n        both: [] as string[],\r\n\r\n    };\r\n    for (const key in x) {\r\n        if (!(key in y)) {\r\n            result.left.push(key);\r\n        } else if (x[key] !== y[key]) {\r\n            result.both.push(key);\r\n        }\r\n    }\r\n    for (const key in y) {\r\n        if (!(key in x)) {\r\n            result.right.push(key);\r\n        }\r\n    }\r\n    return result;\r\n}\r\n\r\n/**\r\n * 深度比较两个对象的差异。\r\n * @param objX 要比较的第一个对象。\r\n * @param objY 要比较的第二个对象。\r\n * @param depth 最多比较的深度。\r\n * @return 返回一个新对象。\r\n * @example deepDiff({ a:1, c: 1 }, { b: 1, c: 2 }) // {left: [\"a\"], right: [\"b\"], both: [\"c\"]}\r\n */\r\nexport function deepDiff(x: any, y: any, depth = Infinity) {\r\n    const result = {\r\n\r\n        /**\r\n         * 获取仅在左值存在的字段。\r\n         */\r\n        left: [] as string[],\r\n\r\n        /**\r\n         * 获取仅在右值存在的字段。\r\n         */\r\n        right: [] as string[],\r\n\r\n        /**\r\n         * 获取在左右同时存在但其值不同的字段。\r\n         */\r\n        both: [] as string[],\r\n\r\n    };\r\n    diff(x, y, \"\", depth);\r\n    return result;\r\n    function diff(x: any, y: any, prefix: string, depth: number) {\r\n        if (depth-- === 0) {\r\n            return;\r\n        }\r\n        for (const key in x) {\r\n            if (!(key in y)) {\r\n                result.left.push(prefix + key);\r\n            } else if (x[key] !== y[key]) {\r\n                if (typeof x[key] !== \"object\" || typeof y[key] !== \"object\") {\r\n                    result.both.push(prefix + key);\r\n                } else {\r\n                    diff(x[key], y[key], prefix + key + \".\", depth);\r\n                }\r\n            }\r\n        }\r\n        for (const key in y) {\r\n            if (!(key in x)) {\r\n                result.right.push(prefix + key);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 返回第一个不为空的值。\r\n * @param values 要检测的对象。\r\n * @return 返回第一个不为空的值。如果都为空则返回 undefined。\r\n * @example pick(undefined, null, 1) // 1\r\n */\r\nexport function pick(...values: any[]) {\r\n    for (const value of values) {\r\n        if (value != undefined) {\r\n            return value;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * 返回对象中指定值对应的第一个键。\r\n * @param obj 要搜索的对象。\r\n * @param value 要查找的值。\r\n * @return 返回匹配的第一个键，如果不存在匹配的值则返回 null。\r\n * @example keyOf({a:1, b:1}, 1) // \"a\"\r\n */\r\nexport function keyOf(obj: any, value: any) {\r\n    for (const key in obj) {\r\n        if (obj[key] === value) {\r\n            return key;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\n/**\r\n * 获取对象指定属性的值。\r\n * @param obj 要获取的对象。\r\n * @param prop 要获取的属性表达式。如 `a.b[0]`。\r\n * @return 返回属性值。如果属性不存在则返回 undefined。\r\n * @example get({a: {b: 1}}, \"a.b\") // 1\r\n */\r\nexport function get(obj: any, prop: string) {\r\n    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((_: string, propName: string, indexer: string) => {\r\n        if (obj) {\r\n            obj = obj[propName || indexer];\r\n        }\r\n    }) as any);\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 设置对象指定属性的值。\r\n * @param obj 要设置的对象。\r\n * @param prop 要设置的属性表达式。如 `a.b[0]`。\r\n * @param value 要设置的值。\r\n * @example set({}, \"a[1].b\", 2) // { a: [undefined, { b: 2 }]}\r\n */\r\nexport function set(obj: any, prop: string, value: any) {\r\n    let prevObject: any;\r\n    let prevKey: string;\r\n    prop.replace(/\\.?\\s*([^\\.\\[]+)|\\[\\s*([^\\]]*)\\s*\\]/g, ((source: string, propName: string | undefined, indexer: string | undefined, index: number) => {\r\n        let currentObject = prevKey ? prevObject[prevKey] : obj;\r\n        if (currentObject == null) {\r\n            currentObject = indexer ? [] : {};\r\n            if (prevKey) {\r\n                prevObject[prevKey] = currentObject;\r\n            } else {\r\n                prevObject = obj = currentObject;\r\n            }\r\n        }\r\n        prevObject = currentObject;\r\n        prevKey = propName || indexer!;\r\n        if (index + source.length === prop.length) {\r\n            currentObject[prevKey] = value;\r\n        }\r\n    }) as any);\r\n    return obj;\r\n}\r\n\r\n/**\r\n * 设置一个对象的属性值。\r\n * @param obj 要修改的对象。\r\n * @param key 要设置的属性名。\r\n * @param value 要设置的属性值。\r\n * @return 返回已修改的对象。\r\n * @example setProperty({myKey: \"oldValue\"}, \"myKey\", \"newValue\")\r\n */\r\nexport function setProperty(obj: any, key: string, value: any) {\r\n    return Object.defineProperty(obj, key, {\r\n        value: value,\r\n        writable: true,\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n}\r\n\r\n/**\r\n * 添加调用指定成员函数后的回调函数。\r\n * @param obj 相关的对象。\r\n * @param key 相关的属性名。\r\n * @param callback 要添加的函数。\r\n * @example\r\n * var obj = { func: function() { console.log(1); } };\r\n * addCallback(obj, \"func\", function() { console.log(2); } )\r\n * obj.func(); // 输出 1, 2\r\n */\r\nexport function addCallback<T extends any>(obj: T, key: keyof T, callback: Function) {\r\n    const oldFunc = obj[key] as Function;\r\n    obj[key] = oldFunc ? function (this: any) {\r\n        const oldResult = oldFunc.apply(this, arguments);\r\n        const newResult = callback.apply(this, arguments);\r\n        return oldResult !== undefined ? oldResult : newResult;\r\n    } : callback;\r\n}\r\n\r\n/**\r\n * 添加设置指定属性后的回调函数。\r\n * @param obj 相关的对象。\r\n * @param key 相关的属性名。\r\n * @param callback 要添加的函数。\r\n */\r\nexport function addSetter<T extends any>(obj: T, key: keyof T, callback: Function) {\r\n    let originalData: any;\r\n    Object.defineProperty(obj, key, {\r\n        get() {\r\n            return originalData;\r\n        },\r\n        set(value) {\r\n            originalData = value;\r\n            callback();\r\n        }\r\n    })\r\n}\r\n"],"mappings":"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"}