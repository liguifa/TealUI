{"version":3,"file":"rect.js","sourceRoot":"../../..","sources":["components/util/rect/rect.ts"],"sourcesContent":["/**\r\n * 表示一个点。\r\n */\r\nexport interface Point {\r\n\r\n    /**\r\n     * X 坐标值。\r\n     */\r\n    x: number;\r\n\r\n    /**\r\n     * Y 坐标值。\r\n     */\r\n    y: number;\r\n\r\n}\r\n\r\n/**\r\n * 表示一个大小。\r\n */\r\nexport interface Size {\r\n\r\n    /**\r\n     * 宽度。\r\n     */\r\n    width: number;\r\n\r\n    /**\r\n     * 高度。\r\n     */\r\n    height: number;\r\n\r\n}\r\n\r\n/**\r\n * 表示一个矩形区域。\r\n */\r\nexport interface Rect extends Point, Size { }\r\n\r\n/**\r\n * 计算指定区域偏移指定坐标后的新区域。\r\n * @param rect 要处理的区域或点。\r\n * @param p 要偏移的距离。\r\n * @return 返回新区域。\r\n * @example offsetRect({x: 0, y: 0, width: 10, height: 10}, {x: 10, y: 20}) // {x: 10, y: 20, width: 10, height: 10}\r\n */\r\nexport function offsetRect(rect: Rect, p: Point) {\r\n    rect.x += p.x;\r\n    rect.y += p.y;\r\n    return rect;\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的矩形区域(含边框)内。\r\n * @param rect 要判断的矩形区域。\r\n * @param p 要判断的点。\r\n * @return 如果在区域内或区域边界上则返回 true，否则返回 false。\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 20, y: 20}) // false\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5}) // true\r\n * @example inRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 0}) // true\r\n */\r\nexport function inRect(rect: Rect, p: Point) {\r\n    const beginX = rect.x;\r\n    const endX = rect.x + rect.width;\r\n    const beginY = rect.y;\r\n    const endY = rect.y + rect.height;\r\n    if (p.x >= beginX && p.x <= endX) {\r\n        if (p.y >= beginY && p.y <= endY) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的矩形区域边框上。\r\n * @param rect 要判断的矩形区域。\r\n * @param p 要判断的点。\r\n * @return 如果在区域边界上则返回 true，否则返回 false。\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 20,y: 20}) // false\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5}) // false\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 0}) // true\r\n * @example onRect({x: 0, y: 0, width: 10, height: 10}, {x: 0, y: 3}) // true\r\n */\r\nexport function onRect(rect: Rect, p: Point) {\r\n    const beginX = rect.x;\r\n    const endX = rect.x + rect.width;\r\n    const beginY = rect.y;\r\n    const endY = rect.y + rect.height;\r\n    if (p.x == beginX || p.x == endX) {\r\n        if (p.y >= beginY && p.y <= endY) {\r\n            return true;\r\n        }\r\n    }\r\n    if (p.y == beginY || p.y == endY) {\r\n        if (p.x >= beginX && p.x <= endX) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * 计算两个区域的交集部分。\r\n * @param rectX 要处理的第一个区域。\r\n * @param rectY 要处理的第二个区域。\r\n * @return 返回公共区域。如果区域无交集则返回长宽为 0 的区域。\r\n * @example intersectRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 10, height: 10}) // {x: 5, y: 5, width: 5, height: 5}\r\n * @example intersectRect({x: 0, y: 0, width: 10, height: 10}, {x: 11, y: 11, width: 10, height: 10}) // {x: 0, y: 0, width: 0, height: 0}\r\n */\r\nexport function intersectRect(rectX: Rect, rectY: Rect) {\r\n    const pointX = { x: rectX.x, y: rectX.y };\r\n    const pointY = { x: rectY.x, y: rectY.y };\r\n    const result = {} as Rect;\r\n    const rectXendX = rectX.x + rectX.width;\r\n    const rectXendY = rectX.y + rectX.height;\r\n    const rectYendX = rectY.x + rectY.width;\r\n    const rectYendY = rectY.y + rectY.height;\r\n    const pointEnd = {\r\n        x: rectXendX <= rectYendX ? rectXendX : rectYendX,\r\n        y: rectXendY <= rectYendY ? rectXendY : rectYendY\r\n    };\r\n    if (inRect(rectX, pointY)) {\r\n        result.x = pointY.x;\r\n        result.y = pointY.y;\r\n        result.width = pointEnd.x - pointY.x;\r\n        result.height = pointEnd.y - pointY.y;\r\n        return result;\r\n    }\r\n    if (inRect(rectY, pointX)) {\r\n        result.x = pointX.x;\r\n        result.y = pointX.y;\r\n        result.width = pointEnd.x - pointX.x;\r\n        result.height = pointEnd.y - pointX.y;\r\n        return result;\r\n    }\r\n    return {\r\n        \"x\": 0,\r\n        \"y\": 0,\r\n        \"width\": 0,\r\n        \"height\": 0\r\n    };\r\n}\r\n\r\n/**\r\n * 计算两个区域的并集部分。\r\n * @param rectX 要处理的第一个区域。\r\n * @param rectY 要处理的第二个区域。\r\n * @return 返回并集区域。如果区域无交集则返回长宽为 0 的区域。\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 10, height: 10}) // {x: 0, y: 0, width: 15, height: 15}\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 5, y: 5, width: 2, height: 2}) // {x: 0, y: 0, width: 10, height: 10}\r\n * @example unionRect({x: 0, y: 0, width: 10, height: 10}, {x: 15, y: 15, width: 10, height: 10}) // {x: 0, y: 0, width: 25, height: 25}\r\n */\r\nexport function unionRect(rectX: Rect, rectY: Rect) {\r\n    const pointEndX = {\r\n        x: rectX.x + rectX.width,\r\n        y: rectX.y + rectX.height\r\n    };\r\n    const pointEndY = {\r\n        x: rectY.x + rectY.width,\r\n        y: rectY.y + rectY.height\r\n    };\r\n    const pointStart = {\r\n        x: rectX.x < rectY.x ? rectX.x : rectY.x,\r\n        y: rectX.y < rectY.y ? rectX.y : rectY.y\r\n    };\r\n    const pointEnd = {\r\n        x: pointEndX.x > pointEndY.x ? pointEndX.x : pointEndY.x,\r\n        y: pointEndX.y > pointEndY.y ? pointEndX.y : pointEndY.y\r\n    };\r\n    return {\r\n        x: pointStart.x,\r\n        y: pointStart.y,\r\n        width: pointEnd.x - pointStart.x,\r\n        height: pointEnd.y - pointStart.y\r\n    };\r\n}\r\n\r\n/**\r\n * 表示一个正圆区域。\r\n */\r\nexport interface Circle extends Point {\r\n\r\n    /**\r\n     * 圆型的半径。\r\n     */\r\n    r: number;\r\n\r\n}\r\n\r\n/**\r\n * 判断一个点是否在指定的正圆区域(含边框)内。\r\n * @param circle 要判断的正圆区域。\r\n * @param p 要判断的点。\r\n * @return 如果在区域内或区域边界上则返回 true，否则返回 false。\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 2, y: 2}) // true\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 3, y: 2}) // true\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 4, y: 2}) // false\r\n * @example inCircle({x: 2, y: 2, r: 1}, {x: 3, y: 3}) // false\r\n */\r\nexport function inCircle(circle: Circle, p: Point) {\r\n    const a = circle.x - p.x;\r\n    const b = circle.y - p.y;\r\n    const c = Math.sqrt(a * a + b * b);\r\n    return c <= circle.r ? true : false;\r\n}\r\n"],"mappings":";;IAuCA;;;;;;OAMG;IACH,oBAA2B,IAAU,EAAE,CAAQ;QAC3C,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAJD,gCAIC;IAED;;;;;;;;OAQG;IACH,gBAAuB,IAAU,EAAE,CAAQ;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAXD,wBAWC;IAED;;;;;;;;;OASG;IACH,gBAAuB,IAAU,EAAE,CAAQ;QACvC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC;QACtB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;QAClC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,MAAM,CAAC,IAAI,CAAC;YAChB,CAAC;QACL,CAAC;QACD,MAAM,CAAC,KAAK,CAAC;IACjB,CAAC;IAhBD,wBAgBC;IAED;;;;;;;OAOG;IACH,uBAA8B,KAAW,EAAE,KAAW;QAClD,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;QAC1C,MAAM,MAAM,GAAG,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;QAC1C,MAAM,MAAM,GAAG,EAAU,CAAC;QAC1B,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;QACxC,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QACzC,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;QACxC,MAAM,SAAS,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC;QACzC,MAAM,QAAQ,GAAG;YACb,CAAC,EAAE,SAAS,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS;YACjD,CAAC,EAAE,SAAS,IAAI,SAAS,GAAG,SAAS,GAAG,SAAS;SACpD,CAAC;QACF,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC;YACtC,MAAM,CAAC,MAAM,CAAC;QAClB,CAAC;QACD,MAAM,CAAC;YACH,GAAG,EAAE,CAAC;YACN,GAAG,EAAE,CAAC;YACN,OAAO,EAAE,CAAC;YACV,QAAQ,EAAE,CAAC;SACd,CAAC;IACN,CAAC;IAhCD,sCAgCC;IAED;;;;;;;;OAQG;IACH,mBAA0B,KAAW,EAAE,KAAW;QAC9C,MAAM,SAAS,GAAG;YACd,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK;YACxB,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM;SAC5B,CAAC;QACF,MAAM,SAAS,GAAG;YACd,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,KAAK;YACxB,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,MAAM;SAC5B,CAAC;QACF,MAAM,UAAU,GAAG;YACf,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;YACxC,CAAC,EAAE,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;SAC3C,CAAC;QACF,MAAM,QAAQ,GAAG;YACb,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;YACxD,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC;SAC3D,CAAC;QACF,MAAM,CAAC;YACH,CAAC,EAAE,UAAU,CAAC,CAAC;YACf,CAAC,EAAE,UAAU,CAAC,CAAC;YACf,KAAK,EAAE,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;YAChC,MAAM,EAAE,QAAQ,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC;SACpC,CAAC;IACN,CAAC;IAvBD,8BAuBC;IAcD;;;;;;;;;OASG;IACH,kBAAyB,MAAc,EAAE,CAAQ;QAC7C,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzB,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACnC,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,GAAG,IAAI,GAAG,KAAK,CAAC;IACxC,CAAC;IALD,4BAKC"}