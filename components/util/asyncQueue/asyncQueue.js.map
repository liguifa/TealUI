{"version":3,"file":"asyncQueue.js","sourceRoot":"../../..","sources":["components/util/asyncQueue/asyncQueue.ts"],"sourcesContent":["/**\r\n * 表示一个异步任务队列。\r\n */\r\nexport default class AsyncQueue extends Array<Function> {\r\n\r\n    /**\r\n     * 添加一个任务函数。\r\n     * @param callback 要添加的任务函数。\r\n     * @param link 当前队列正在等待其它异步任务函数时所使用的处理方式。\r\n     *\r\n     * 值      | 意义\r\n     * --------|--------------------------------------------\r\n     * wait    | 等待之前所有异步任务都完成后再执行当前任务。\r\n     * abort   | 终止正在执行和其它正在等待的任务并立即执行当前任务。\r\n     * replace | 终止正在执行的异步任务并立即执行当前任务，然后继续执行其它正在等待的异步任务。\r\n     * insert  | 等待正在执行的异步任务完成后执行当前任务，然后继续执行其它正在等待的异步任务。\r\n     * cancel  | 取消当前任务。\r\n     *\r\n     * @example new AsyncQueue().then(() => { })\r\n     */\r\n    then(callback: (data: any) => void, link: \"wait\" | \"abort\" | \"insert\" | \"replace\" | \"cancel\" = \"wait\") {\r\n        if (this._suspendCount && link !== \"wait\") {\r\n            switch (link) {\r\n                case \"abort\":\r\n                    this[0] = callback;\r\n                    this.length = 1;\r\n                    this.skip();\r\n                    break;\r\n                case \"insert\":\r\n                    this.splice(1, 0, callback);\r\n                    break;\r\n                case \"replace\":\r\n                    this.splice(1, 0, callback);\r\n                    this.skip();\r\n                    break;\r\n            }\r\n        } else {\r\n            this.push(callback);\r\n            this._progress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 终止当前正在执行的异步任务并执行其它正在等待的任务。\r\n     * @example new AsyncQueue().abort()\r\n     */\r\n    skip() {\r\n        if (this._abortable) {\r\n            this._abortable.abort();\r\n        } else {\r\n            this.resume();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 挂起当前队列。所有后续任务都将开始等待。\r\n     * @param abortable 引发挂起的对象。其提供一个 `abort()` 函数可立即终止执行。\r\n     * @example new AsyncQueue().suspend()\r\n     */\r\n    suspend(abortable?: Abortable) {\r\n        this._suspendCount++;\r\n        if (abortable) {\r\n            this._abortable = abortable;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 通知当前异步任务已经完成，并继续执行下一个任务。\r\n     * @param data 传递给下个异步任务的数据。\r\n     * @example new AsyncQueue().resume()\r\n     */\r\n    resume(data?: any) {\r\n        this._suspendCount--;\r\n        if (data !== undefined) {\r\n            this._data = data;\r\n        }\r\n        this._progress();\r\n    }\r\n\r\n    /**\r\n     * 判断当前队列是否已被阻止。\r\n     */\r\n    get suspended() { return !!this._suspendCount; }\r\n    \r\n    /**\r\n     * 被挂起的次数。\r\n     */\r\n    private _suspendCount = 0;\r\n\r\n    /**\r\n     * 存储终止当前任务的关联对象。\r\n     */\r\n    private _abortable?: Abortable;\r\n\r\n    /**\r\n     * 存储传递给下一个异步任务的参数列表。\r\n     */\r\n    private _data: any;\r\n\r\n    /**\r\n     * 执行队首的异步任务。\r\n     */\r\n    private _progress() {\r\n        while (this.length && !this._suspendCount) {\r\n            delete this._abortable;\r\n            this.shift()!(this._data);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * 表示一个可终止的异步操作。\r\n */\r\nexport interface Abortable {\r\n\r\n    /**\r\n     * 终止当前异步操作。\r\n     */\r\n    abort(): void;\r\n\r\n}\r\n"],"mappings":";;IAAA;;OAEG;IACH,gBAAgC,SAAQ,KAAe;QAAvD;;YAiFI;;eAEG;YACK,kBAAa,GAAG,CAAC,CAAC;QAsB9B,CAAC;QAxGG;;;;;;;;;;;;;;WAcG;QACH,IAAI,CAAC,QAA6B,EAAE,OAA2D,MAAM;YACjG,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,IAAI,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;gBACxC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;oBACX,KAAK,OAAO;wBACR,IAAI,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC;wBACnB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;wBAChB,IAAI,CAAC,IAAI,EAAE,CAAC;wBACZ,KAAK,CAAC;oBACV,KAAK,QAAQ;wBACT,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;wBAC5B,KAAK,CAAC;oBACV,KAAK,SAAS;wBACV,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;wBAC5B,IAAI,CAAC,IAAI,EAAE,CAAC;wBACZ,KAAK,CAAC;gBACd,CAAC;YACL,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACpB,IAAI,CAAC,SAAS,EAAE,CAAC;YACrB,CAAC;QACL,CAAC;QAED;;;WAGG;QACH,IAAI;YACA,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YAC5B,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC;QACL,CAAC;QAED;;;;WAIG;QACH,OAAO,CAAC,SAAqB;YACzB,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;gBACZ,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;YAChC,CAAC;QACL,CAAC;QAED;;;;WAIG;QACH,MAAM,CAAC,IAAU;YACb,IAAI,CAAC,aAAa,EAAE,CAAC;YACrB,EAAE,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;gBACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YACtB,CAAC;YACD,IAAI,CAAC,SAAS,EAAE,CAAC;QACrB,CAAC;QAED;;WAEG;QACH,IAAI,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;QAiBhD;;WAEG;QACK,SAAS;YACb,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACxC,OAAO,IAAI,CAAC,UAAU,CAAC;gBACvB,IAAI,CAAC,KAAK,EAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC;KAEJ;IA1GD,6BA0GC"}