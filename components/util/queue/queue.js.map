{"version":3,"file":"queue.js","sourceRoot":"../../..","sources":["components/util/queue/queue.ts"],"sourcesContent":["/**\r\n * 表示一个队列。\r\n */\r\nexport default class Queue<T> implements Iterable<T> {\r\n\r\n    /**\r\n     * 存储当前队列的最后一项。\r\n     */\r\n    private _last?: QueueEntry<T>;\r\n\r\n    /**\r\n     * 判断当前队列是否为空。\r\n     */\r\n    get empty() { return this._last == undefined; }\r\n\r\n    /**\r\n     * 获取队列顶部的值。\r\n     */\r\n    get top() { return this._last ? this._last.next.value : undefined; }\r\n\r\n    /**\r\n     * 获取当前队列的长度。\r\n     */\r\n    get length() {\r\n        if (this._last == undefined) {\r\n            return 0;\r\n        }\r\n        let count = 1;\r\n        for (let item = this._last.next; item !== this._last; item = item.next) {\r\n            count++;\r\n        }\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * 获取当前队列的迭代器。\r\n     */\r\n    [Symbol.iterator]() {\r\n        const last = this._last;\r\n        let current = last;\r\n        let end = last == undefined;\r\n        return {\r\n            next() {\r\n                if (end) {\r\n                    return { value: undefined, done: true };\r\n                }\r\n                current = current!.next;\r\n                if (current === last) {\r\n                    end = true;\r\n                }\r\n                return { value: current.value, done: false };\r\n            }\r\n        } as Iterator<T>;\r\n    }\r\n\r\n    /**\r\n     * 将指定的项添加到队列末尾。\r\n     * @param item 要添加的项。\r\n     */\r\n    enqueue(item: T) {\r\n        const last = this._last;\r\n        if (last) {\r\n            this._last = last.next = {\r\n                value: item,\r\n                next: last.next\r\n            };\r\n        } else {\r\n            const entry = { value: item } as QueueEntry<T>;\r\n            this._last = entry.next = entry;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 取出队首的项。\r\n     * @return 返回队首的项。如果队列为空则返回 undefined。\r\n     */\r\n    dequeue() {\r\n        if (!this._last) {\r\n            return;\r\n        }\r\n        const head = this._last.next;\r\n        if (head === this._last) {\r\n            this._last = undefined;\r\n        } else {\r\n            this._last.next = head.next;\r\n        }\r\n        return head.value;\r\n    }\r\n\r\n    /**\r\n     * 获取当前队列的等价数组。\r\n     */\r\n    toArray() {\r\n        const result: T[] = [];\r\n        if (this._last) {\r\n            for (let item = this._last.next; item !== this._last; item = item.next) {\r\n                result.push(item.value);\r\n            }\r\n            result.push(this._last.value);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 获取当前队列的等价字符串。\r\n     */\r\n    toString() { return this.toArray().toString(); }\r\n\r\n    /**\r\n     * 自定义当前对象在调试时的显示文案。\r\n     */\r\n    private inspect() { return `[${this.toString()}]`; }\r\n\r\n}\r\n\r\n/**\r\n * 表示一个队列项。\r\n */\r\ninterface QueueEntry<T> {\r\n\r\n    /**\r\n     * 存储当前项的值。\r\n     */\r\n    value: T;\r\n\r\n    /**\r\n     * 存储下一个队列项。\r\n     */\r\n    next: QueueEntry<T>;\r\n\r\n}\r\n"],"mappings":"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"}