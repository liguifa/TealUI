{"version":3,"file":"number-test.js","sourceRoot":"../../..","sources":["components/util/number/number-test.ts"],"sourcesContent":["import * as assert from \"assert\";\r\nimport * as number from \"./number\";\r\n\r\nexport function isNumberTest() {\r\n    assert.strictEqual(number.isNumber(7), true);\r\n}\r\n\r\nexport function isIntegerTest() {\r\n    assert.strictEqual(number.isInteger(7), true);\r\n    assert.strictEqual(number.isInteger(7.6), false);\r\n}\r\n\r\nexport function limitTest() {\r\n    assert.strictEqual(number.limit(1, 2, 6), 2);\r\n}\r\n\r\nexport function randomTest() {\r\n    assert.strictEqual(number.random(2, 3), 2);\r\n}\r\n\r\nexport function getPrecisionTest() {\r\n    assert.strictEqual(number.getPrecision(0), 0);\r\n    assert.strictEqual(number.getPrecision(0.1), 1);\r\n    assert.strictEqual(number.getPrecision(0.01), 2);\r\n}\r\n\r\nexport function getIntegerLengthTest() {\r\n    assert.strictEqual(number.getIntegerLength(0), 1);\r\n    assert.strictEqual(number.getIntegerLength(10), 2);\r\n    assert.strictEqual(number.getIntegerLength(10.1), 2);\r\n}\r\n\r\nexport function formatTest() {\r\n    assert.strictEqual(number.format(0, \"#\"), \"0\");\r\n    assert.strictEqual(number.format(0, \"##\"), \"0\");\r\n    assert.strictEqual(number.format(0, \"###\"), \"0\");\r\n    assert.strictEqual(number.format(0, \"#,###\"), \"0\");\r\n\r\n    assert.strictEqual(number.format(0, \"0\"), \"0\");\r\n    assert.strictEqual(number.format(0, \"00\"), \"00\");\r\n    assert.strictEqual(number.format(0, \"000\"), \"000\");\r\n    assert.strictEqual(number.format(0, \"0,000\"), \"0,000\");\r\n\r\n    assert.strictEqual(number.format(1, \"#\"), \"1\");\r\n    assert.strictEqual(number.format(1, \"##\"), \"1\");\r\n    assert.strictEqual(number.format(1, \"###\"), \"1\");\r\n    assert.strictEqual(number.format(1, \"#,###\"), \"1\");\r\n\r\n    assert.strictEqual(number.format(1, \"0\"), \"1\");\r\n    assert.strictEqual(number.format(1, \"00\"), \"01\");\r\n    assert.strictEqual(number.format(1, \"000\"), \"001\");\r\n    assert.strictEqual(number.format(1, \"0,000\"), \"0,001\");\r\n\r\n    assert.strictEqual(number.format(-1, \"#\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"##\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"###\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"#,###\"), \"-1\");\r\n\r\n    assert.strictEqual(number.format(-1, \"0\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"00\"), \"-01\");\r\n    assert.strictEqual(number.format(-1, \"000\"), \"-001\");\r\n    assert.strictEqual(number.format(-1, \"0,000\"), \"-0,001\");\r\n\r\n    assert.strictEqual(number.format(1, \"+#\"), \"+1\");\r\n    assert.strictEqual(number.format(1, \"+##\"), \"+1\");\r\n    assert.strictEqual(number.format(1, \"+###\"), \"+1\");\r\n    assert.strictEqual(number.format(1, \"+#,###\"), \"+1\");\r\n\r\n    assert.strictEqual(number.format(-1, \"+#\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"+##\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"+###\"), \"-1\");\r\n    assert.strictEqual(number.format(-1, \"+#,###\"), \"-1\");\r\n\r\n    assert.strictEqual(number.format(1, \"###,###\"), \"1\");\r\n    assert.strictEqual(number.format(10, \"###,###\"), \"10\");\r\n    assert.strictEqual(number.format(100, \"###,###\"), \"100\");\r\n    assert.strictEqual(number.format(1000, \"###,###\"), \"1,000\");\r\n    assert.strictEqual(number.format(10000, \"###,###\"), \"10,000\");\r\n\r\n    assert.strictEqual(number.format(1, \"0##,###\"), \"1\");\r\n    assert.strictEqual(number.format(10, \"0##,###\"), \"10\");\r\n    assert.strictEqual(number.format(100, \"0##,###\"), \"100\");\r\n    assert.strictEqual(number.format(1000, \"0##,###\"), \"1,000\");\r\n    assert.strictEqual(number.format(10000, \"0##,###\"), \"010,000\");\r\n\r\n    assert.strictEqual(number.format(1.1, \"#\"), \"1.1\");\r\n    assert.strictEqual(number.format(1.1, \"#.\"), \"1\");\r\n    assert.strictEqual(number.format(1.1, \"#.#\"), \"1.1\");\r\n    assert.strictEqual(number.format(1.1, \"#.##\"), \"1.1\");\r\n\r\n    assert.strictEqual(number.format(1.1, \"0\"), \"1.1\");\r\n    assert.strictEqual(number.format(1.1, \"0.\"), \"1\");\r\n    assert.strictEqual(number.format(1.1, \"0.0\"), \"1.1\");\r\n    assert.strictEqual(number.format(1.1, \"0.00\"), \"1.10\");\r\n\r\n    assert.strictEqual(number.format(1.9, \"#\"), \"1.9\");\r\n    assert.strictEqual(number.format(1.9, \"#.\"), \"2\");\r\n    assert.strictEqual(number.format(1.9, \"#.#\"), \"1.9\");\r\n    assert.strictEqual(number.format(1.9, \"#.##\"), \"1.9\");\r\n\r\n    assert.strictEqual(number.format(1.9, \"0\"), \"1.9\");\r\n    assert.strictEqual(number.format(1.9, \"0.\"), \"2\");\r\n    assert.strictEqual(number.format(1.9, \"0.0\"), \"1.9\");\r\n    assert.strictEqual(number.format(1.9, \"0.00\"), \"1.90\");\r\n\r\n    assert.strictEqual(number.format(10100, \"xxx\"), \"xxx\");\r\n    assert.strictEqual(number.format(101, \"xxxxx\"), \"xxxxx\");\r\n    assert.strictEqual(number.format(-101, \"##xxxx\"), \"-101xxxx\");\r\n    assert.strictEqual(number.format(101, \"+##\"), \"+101\");\r\n    assert.strictEqual(number.format(-101, \"+##\"), \"-101\");\r\n    assert.strictEqual(number.format(101, \"-####\"), \"-101\");\r\n    assert.strictEqual(number.format(101, \"-##xxxx\"), \"-101xxxx\");\r\n    assert.strictEqual(number.format(101, \"##.xxxx\"), \"101xxxx\");\r\n    assert.strictEqual(number.format(101, \".##\"), \"\");\r\n    assert.strictEqual(number.format(101.01, \".##\"), \".01\");\r\n    assert.strictEqual(number.format(101.008, \".##\"), \".01\");\r\n    assert.strictEqual(number.format(-0.101, \"##.xxxx\"), \"-0xxxx\");\r\n    assert.strictEqual(number.format(0.101, \"-##.xxxx\"), \"-0xxxx\");\r\n    assert.strictEqual(number.format(0.10109, \"-##.xxxx\"), \"-0xxxx\");\r\n    assert.strictEqual(number.format(0.10104, \"-##.####\"), \"-0.101\");\r\n    assert.strictEqual(number.format(0.10104, \"-##.###\"), \"-0.101\");\r\n    assert.strictEqual(number.format(0.101, \"-##xxxx.xxxx\"), \"-0.101xxxx.xxxx\");\r\n    assert.strictEqual(number.format(1.212313131, \"x###.####\"), \"x1.2123\");\r\n    assert.strictEqual(number.format(1.235, \"#.##\"), \"1.24\");\r\n    assert.strictEqual(number.format(1.21, \"+#.##\"), \"+1.21\");\r\n    assert.strictEqual(number.format(1.2, \"-#.##\"), \"-1.2\");\r\n    assert.strictEqual(number.format(1235, \"###,###\"), \"1,235\");\r\n    assert.strictEqual(number.format(-1235, \"###,###\"), \"-1,235\");\r\n    assert.strictEqual(number.format(123, \"###,###\"), \"123\");\r\n    assert.strictEqual(number.format(-123, \"###,###\"), \"-123\");\r\n    assert.strictEqual(number.format(-123, \"00#,###\"), \"-123\");\r\n}\r\n"],"mappings":"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"}