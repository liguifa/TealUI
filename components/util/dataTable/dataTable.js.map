{"version":3,"file":"dataTable.js","sourceRoot":"../../..","sources":["components/util/dataTable/dataTable.ts"],"sourcesContent":["// #todo\r\n\r\n\r\n\r\ntypeof include === \"function\" && include(\"../lang/class\");\r\n\r\n\r\n/**\r\n * 表示一个表格数据集。\r\n * @class\r\n * @extends Base\r\n */\r\nvar DataTable = Base.extend.call(Array, {\r\n\r\n    trigger: Base.prototype.trigger,\r\n    on: Base.prototype.on,\r\n    off: Base.prototype.off,\r\n    toString: function () {\r\n        return JSON.stringify(this.slice(0));\r\n    },\r\n\r\n    /**\r\n     * 当添加行时回调。\r\n     * @param {Number} index 要添加的行号位置。\r\n     * @param {Object} row 要添加的行。\r\n     * @return {Boolean} 如果返回 @true，则允许添加指定的行，否则不允许。\r\n     * @protected\r\n     * @inner\r\n     */\r\n    onAddRow: function(index, row){\r\n        return this.trigger('add', {index: index, row: row}) && this.onChange();\r\n    },\r\n\r\n    /**\r\n     * 当删除行时回调。\r\n     * @param {Number} index 要删除的行号。\r\n     * @param {Number} length 要删除的行数。\r\n     * @return {Boolean} 如果返回 @true，则允许删除指定的行，否则不允许。\r\n     * @protected\r\n     * @inner\r\n     */\r\n    onRemoveRow: function(index, length){\r\n        return this.trigger('remove', {index: index, length: length}) && this.onChange();\r\n    },\r\n\r\n    /**\r\n     * 当数据发生改变时回调。\r\n     * @protected\r\n     * @inner\r\n     */\r\n    onChange: function(){\r\n        return this.trigger('change');\r\n    },\r\n\r\n    /**\r\n     * 初始化 DataSet 类。\r\n     * @param {Object} [columns] 当前表格的列信息。具体格式如：\r\n     * \r\n     *      {\r\n     *          a: { // 列名。表格内列应该唯一。\r\n     *              type: 'number', // 列类型，可填写 JavaScript typeof 返回的所有内置类型。\r\n     *              sorter: function(){} // 当前列的排序方案\r\n     *          } // , ...\r\n     *      }\r\n     * \r\n     * @param {Array} [data] 要处理的原始数据。具体数值应该是和列一一对应的 JSON 对象数组。\r\n     * @constructor\r\n     * @example \r\n     * new DataTable({\r\n     *     a: { // 列名。表格内列应该唯一。\r\n     *         type: 'number', // 列类型，可填写 JavaScript typeof 返回的所有内置类型。\r\n     *         sorter: function(){} // 当前列的排序方案\r\n     *     } // , ...\r\n     * }, [{\r\n     *      a: 1\r\n     * }, {\r\n     *      a: 2\r\n     * }]);\r\n     */\r\n    constructor: function (columns, data) {\r\n        this.columns = columns || {};\r\n        data && this.set(data);\r\n        /*@cc_on if(!-\"\\v1\"){\r\n         var result = [];\r\n         for(var p in this){\r\n            result[p] = this[p];\r\n         }\r\n         return result; \r\n        } @*/\r\n    },\r\n\r\n    /**\r\n     * 设置当前数据集的所有数据或指定行数据。\r\n     * @param {Number} [index=0] 要更新的行号。\r\n     * @param {Object} row 要更新的新行。\r\n     * @return this\r\n     * @example \r\n     * new DataTable().set(2, {});\r\n     * \r\n     * new DataTable().set([{}]);\r\n     */\r\n    set: function (index, row) {\r\n        if(index != null && index.constructor === Number && this.onRemoveRow(index, 1) && this.onAddRow(index, row)) {\r\n            this[index] = row;\r\n            if(index + 1 > this.length) {\r\n                this.length = index + 1;\r\n            }\r\n        } else {\r\n            this.clear().add.apply(this, index);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 在当前数据表添加一行。\r\n     * @param {Number} [index=0] 要添加的行号。\r\n     * @param {Object} row 要添加的行。\r\n     * @param {Object} ... 要添加的行。\r\n     * @return {Number} 返回最新的长度。\r\n     * @example new DataTable().add([1, 2, 3])\r\n     */\r\n    add: function (index, row) {\r\n\r\n        // 判断是否包含位置标记。\r\n        var firstRowArgIndex = 0;\r\n        if (typeof index === \"number\") {\r\n            firstRowArgIndex = 1;\r\n        }\r\n        for(; firstRowArgIndex < arguments.length; firstRowArgIndex++)\r\n            if(this.onAddRow(firstRowArgIndex ? index : this.length, arguments[firstRowArgIndex]))\r\n                firstRowArgIndex ? this.splice(index++, 0, arguments[firstRowArgIndex]) : this.push(arguments[firstRowArgIndex]);\r\n\r\n        return this.length;\r\n    },\r\n\r\n    /**\r\n     * 删除一行数据。\r\n     * @param {mixed} row 要删除的行号或行本身。\r\n     * @param {Number} [length=1] 要删除的行数。\r\n     * @return {Array} 返回本次被删除的行组成的数组。如果未删除则返回空数组。\r\n     * @example new DataTable().remove(1)\r\n     */\r\n    remove: function (row, length) {\r\n        length = length == undefined ? 1 : length;\r\n        // 将行内容转为行号。\r\n        if (typeof row !== \"number\") {\r\n            row = this.indexOf(row);\r\n        }\r\n        return this.onRemoveRow(row, length) ? this.splice(row, length) : [];\r\n    },\r\n\r\n    /**\r\n     * 清空当前表格的所有行。\r\n     * @return this\r\n     * @example new DataTable().clear()\r\n     */\r\n    clear: function(){\r\n        if(this.onRemoveRow(0, this.length)) {\r\n            this.length = 0;\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * 获取指定列或全部列的所有值。\r\n     * @param {mixed} [column] 要获取的列名或列号。如果不设置列，则获取全部列的值。\r\n     * @return {Array} 返回指定列或全部列的值。\r\n     * @example new DataTable().values(\"columnName\")\r\n     */\r\n    values: function (column) {\r\n\r\n        // 未指定列名获取所有数据。\r\n        if(column == undefined) {\r\n            return this.slice(0);\r\n        }\r\n\r\n        // 选出指定列的值。\r\n        column = this.columns[column];\r\n        var result = [];\r\n        for(var i = 0; i < this.length; i++) {\r\n            result.push(this[i][column.name]);\r\n        }\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     * 对当前表进行排序。\r\n     * @param  {mixed} column 排序的列或排序方法。\r\n     * @return this\r\n     * @example\r\n     * ##### 按列名排序\r\n     * new DataTable().sort('columnName')\r\n     * ##### 按自定义排序\r\n     * new DataTable().sort(function(x, y){ return x.id > y.id })\r\n     */\r\n    sort: function(column){\r\n\r\n        // 根据列排序。\r\n        if(column != null && column.constructor !== Function) {\r\n            var col = this.columns[column];\r\n            column = col && (col.sorter ? function(x, y){\r\n                return col.sorter(x[col.name], y[col.name]);\r\n            } : function(x, y){\r\n                return x[col.name] - y[col.name];\r\n            });\r\n        }\r\n        \r\n        Array.prototype.sort.call(this, column);\r\n        this.set(this.slice(0));\r\n        return this;\r\n    }\r\n\r\n});\r\n"],"mappings":"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"}