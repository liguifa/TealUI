{"version":3,"file":"bigNumber.js","sourceRoot":"../../..","sources":["components/util/bigNumber/bigNumber.js"],"sourcesContent":["/*! bignumber.js v4.0.2 https://github.com/MikeMcl/bignumber.js/LICENCE */\r\n\r\n; (function (globalObj) {\r\n    'use strict';\r\n\r\n    /*\r\n      bignumber.js v4.0.2\r\n      A JavaScript library for arbitrary-precision arithmetic.\r\n      https://github.com/MikeMcl/bignumber.js\r\n      Copyright (c) 2017 Michael Mclaughlin <M8ch88l@gmail.com>\r\n      MIT Expat Licence\r\n    */\r\n\r\n\r\n    var BigNumber,\r\n        isNumeric = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n        mathceil = Math.ceil,\r\n        mathfloor = Math.floor,\r\n        notBool = ' not a boolean or binary digit',\r\n        roundingMode = 'rounding mode',\r\n        tooManyDigits = 'number type has more than 15 significant digits',\r\n        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_',\r\n        BASE = 1e14,\r\n        LOG_BASE = 14,\r\n        MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n        // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n        POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n        SQRT_BASE = 1e7,\r\n\r\n        /*\r\n         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an\r\n         * exception is thrown (if ERRORS is true).\r\n         */\r\n        MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n    /*\r\n     * Create and return a BigNumber constructor.\r\n     */\r\n    function constructorFactory(config) {\r\n        var div, parseNumeric,\r\n\r\n            // id tracks the caller function, so its name can be included in error messages.\r\n            id = 0,\r\n            P = BigNumber.prototype,\r\n            ONE = new BigNumber(1),\r\n\r\n\r\n            /********************************* EDITABLE DEFAULTS **********************************/\r\n\r\n\r\n            /*\r\n             * The default values below must be integers within the inclusive ranges stated.\r\n             * The values can also be changed at run-time using BigNumber.config.\r\n             */\r\n\r\n            // The maximum number of decimal places for operations involving division.\r\n            DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n            /*\r\n             * The rounding mode used when rounding to the above decimal places, and when using\r\n             * toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n             * UP         0 Away from zero.\r\n             * DOWN       1 Towards zero.\r\n             * CEIL       2 Towards +Infinity.\r\n             * FLOOR      3 Towards -Infinity.\r\n             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n             */\r\n            ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n            // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n            // The exponent value at and beneath which toString returns exponential notation.\r\n            // Number type: -7\r\n            TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n            // The exponent value at and above which toString returns exponential notation.\r\n            // Number type: 21\r\n            TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n            // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n            // The minimum exponent value, beneath which underflow to zero occurs.\r\n            // Number type: -324  (5e-324)\r\n            MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n            // The maximum exponent value, above which overflow to Infinity occurs.\r\n            // Number type:  308  (1.7976931348623157e+308)\r\n            // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n            MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n            // Whether BigNumber Errors are ever thrown.\r\n            ERRORS = true,                           // true or false\r\n\r\n            // Change to intValidatorNoErrors if ERRORS is false.\r\n            isValidInt = intValidatorWithErrors,     // intValidatorWithErrors/intValidatorNoErrors\r\n\r\n            // Whether to use cryptographically-secure random number generation, if available.\r\n            CRYPTO = false,                          // true or false\r\n\r\n            /*\r\n             * The modulo mode used when calculating the modulus: a mod n.\r\n             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n             * The remainder (r) is calculated as: r = a - n * q.\r\n             *\r\n             * UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n             * DOWN      1 The remainder has the same sign as the dividend.\r\n             *             This modulo mode is commonly known as 'truncated division' and is\r\n             *             equivalent to (a % n) in JavaScript.\r\n             * FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n             *             The remainder is always positive.\r\n             *\r\n             * The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n             * modes are commonly used for the modulus operation.\r\n             * Although the other rounding modes can also be used, they may not give useful results.\r\n             */\r\n            MODULO_MODE = 1,                         // 0 to 9\r\n\r\n            // The maximum number of significant digits of the result of the toPower operation.\r\n            // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n            POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n            // The format specification used by the BigNumber.prototype.toFormat method.\r\n            FORMAT = {\r\n                decimalSeparator: '.',\r\n                groupSeparator: ',',\r\n                groupSize: 3,\r\n                secondaryGroupSize: 0,\r\n                fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n                fractionGroupSize: 0\r\n            };\r\n\r\n\r\n        /******************************************************************************************/\r\n\r\n\r\n        // CONSTRUCTOR\r\n\r\n\r\n        /*\r\n         * The BigNumber constructor and exported function.\r\n         * Create and return a new instance of a BigNumber object.\r\n         *\r\n         * n {number|string|BigNumber} A numeric value.\r\n         * [b] {number} The base of n. Integer, 2 to 64 inclusive.\r\n         */\r\n        function BigNumber(n, b) {\r\n            var c, e, i, num, len, str,\r\n                x = this;\r\n\r\n            // Enable constructor usage without new.\r\n            if (!(x instanceof BigNumber)) {\r\n\r\n                // 'BigNumber() constructor call without new: {n}'\r\n                if (ERRORS) raise(26, 'constructor call without new', n);\r\n                return new BigNumber(n, b);\r\n            }\r\n\r\n            // 'new BigNumber() base not an integer: {b}'\r\n            // 'new BigNumber() base out of range: {b}'\r\n            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {\r\n\r\n                // Duplicate.\r\n                if (n instanceof BigNumber) {\r\n                    x.s = n.s;\r\n                    x.e = n.e;\r\n                    x.c = (n = n.c) ? n.slice() : n;\r\n                    id = 0;\r\n                    return;\r\n                }\r\n\r\n                if ((num = typeof n == 'number') && n * 0 == 0) {\r\n                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;\r\n\r\n                    // Fast path for integers.\r\n                    if (n === ~~n) {\r\n                        for (e = 0, i = n; i >= 10; i /= 10, e++);\r\n                        x.e = e;\r\n                        x.c = [n];\r\n                        id = 0;\r\n                        return;\r\n                    }\r\n\r\n                    str = n + '';\r\n                } else {\r\n                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);\r\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n                }\r\n            } else {\r\n                b = b | 0;\r\n                str = n + '';\r\n\r\n                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.\r\n                // Allow exponential notation to be used with base 10 argument.\r\n                if (b == 10) {\r\n                    x = new BigNumber(n instanceof BigNumber ? n : str);\r\n                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n                }\r\n\r\n                // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n                // Any number in exponential form will fail due to the [Ee][+-].\r\n                if ((num = typeof n == 'number') && n * 0 != 0 ||\r\n                    !(new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') +\r\n                        '(?:\\\\.' + c + ')?$', b < 37 ? 'i' : '')).test(str)) {\r\n                    return parseNumeric(x, str, num, b);\r\n                }\r\n\r\n                if (num) {\r\n                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n                    if (ERRORS && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n\r\n                        // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                        raise(id, tooManyDigits, n);\r\n                    }\r\n\r\n                    // Prevent later check for length on converted number.\r\n                    num = false;\r\n                } else {\r\n                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n                }\r\n\r\n                str = convertBase(str, 10, b, x.s);\r\n            }\r\n\r\n            // Decimal point?\r\n            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n            // Exponential form?\r\n            if ((i = str.search(/e/i)) > 0) {\r\n\r\n                // Determine exponent.\r\n                if (e < 0) e = i;\r\n                e += +str.slice(i + 1);\r\n                str = str.substring(0, i);\r\n            } else if (e < 0) {\r\n\r\n                // Integer.\r\n                e = str.length;\r\n            }\r\n\r\n            // Determine leading zeros.\r\n            for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n            // Determine trailing zeros.\r\n            for (len = str.length; str.charCodeAt(--len) === 48;);\r\n            str = str.slice(i, len + 1);\r\n\r\n            if (str) {\r\n                len = str.length;\r\n\r\n                // Disallow numbers with over 15 significant digits if number type.\r\n                // 'new BigNumber() number type has more than 15 significant digits: {n}'\r\n                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) {\r\n                    raise(id, tooManyDigits, x.s * n);\r\n                }\r\n\r\n                e = e - i - 1;\r\n\r\n                // Overflow?\r\n                if (e > MAX_EXP) {\r\n\r\n                    // Infinity.\r\n                    x.c = x.e = null;\r\n\r\n                    // Underflow?\r\n                } else if (e < MIN_EXP) {\r\n\r\n                    // Zero.\r\n                    x.c = [x.e = 0];\r\n                } else {\r\n                    x.e = e;\r\n                    x.c = [];\r\n\r\n                    // Transform base\r\n\r\n                    // e is the base 10 exponent.\r\n                    // i is where to slice str to get the first element of the coefficient array.\r\n                    i = (e + 1) % LOG_BASE;\r\n                    if (e < 0) i += LOG_BASE;\r\n\r\n                    if (i < len) {\r\n                        if (i) x.c.push(+str.slice(0, i));\r\n\r\n                        for (len -= LOG_BASE; i < len;) {\r\n                            x.c.push(+str.slice(i, i += LOG_BASE));\r\n                        }\r\n\r\n                        str = str.slice(i);\r\n                        i = LOG_BASE - str.length;\r\n                    } else {\r\n                        i -= len;\r\n                    }\r\n\r\n                    for (; i--; str += '0');\r\n                    x.c.push(+str);\r\n                }\r\n            } else {\r\n\r\n                // Zero.\r\n                x.c = [x.e = 0];\r\n            }\r\n\r\n            id = 0;\r\n        }\r\n\r\n\r\n        // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n        BigNumber.another = constructorFactory;\r\n\r\n        BigNumber.ROUND_UP = 0;\r\n        BigNumber.ROUND_DOWN = 1;\r\n        BigNumber.ROUND_CEIL = 2;\r\n        BigNumber.ROUND_FLOOR = 3;\r\n        BigNumber.ROUND_HALF_UP = 4;\r\n        BigNumber.ROUND_HALF_DOWN = 5;\r\n        BigNumber.ROUND_HALF_EVEN = 6;\r\n        BigNumber.ROUND_HALF_CEIL = 7;\r\n        BigNumber.ROUND_HALF_FLOOR = 8;\r\n        BigNumber.EUCLID = 9;\r\n\r\n\r\n        /*\r\n         * Configure infrequently-changing library-wide settings.\r\n         *\r\n         * Accept an object or an argument list, with one or many of the following properties or\r\n         * parameters respectively:\r\n         *\r\n         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive\r\n         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive\r\n         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]\r\n         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or\r\n         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]\r\n         *   ERRORS          {boolean|number}   true, false, 1 or 0\r\n         *   CRYPTO          {boolean|number}   true, false, 1 or 0\r\n         *   MODULO_MODE     {number}           0 to 9 inclusive\r\n         *   POW_PRECISION   {number}           0 to MAX inclusive\r\n         *   FORMAT          {object}           See BigNumber.prototype.toFormat\r\n         *      decimalSeparator       {string}\r\n         *      groupSeparator         {string}\r\n         *      groupSize              {number}\r\n         *      secondaryGroupSize     {number}\r\n         *      fractionGroupSeparator {string}\r\n         *      fractionGroupSize      {number}\r\n         *\r\n         * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n         *\r\n         * E.g.\r\n         * BigNumber.config(20, 4) is equivalent to\r\n         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n         *\r\n         * Ignore properties/parameters set to null or undefined.\r\n         * Return an object with the properties current values.\r\n         */\r\n        BigNumber.config = BigNumber.set = function () {\r\n            var v, p,\r\n                i = 0,\r\n                r = {},\r\n                a = arguments,\r\n                o = a[0],\r\n                has = o && typeof o == 'object'\r\n                    ? function () { if (o.hasOwnProperty(p)) return (v = o[p]) != null; }\r\n                    : function () { if (a.length > i) return (v = a[i++]) != null; };\r\n\r\n            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n            // 'config() DECIMAL_PLACES not an integer: {v}'\r\n            // 'config() DECIMAL_PLACES out of range: {v}'\r\n            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) {\r\n                DECIMAL_PLACES = v | 0;\r\n            }\r\n            r[p] = DECIMAL_PLACES;\r\n\r\n            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n            // 'config() ROUNDING_MODE not an integer: {v}'\r\n            // 'config() ROUNDING_MODE out of range: {v}'\r\n            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) {\r\n                ROUNDING_MODE = v | 0;\r\n            }\r\n            r[p] = ROUNDING_MODE;\r\n\r\n            // EXPONENTIAL_AT {number|number[]}\r\n            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n            // 'config() EXPONENTIAL_AT not an integer: {v}'\r\n            // 'config() EXPONENTIAL_AT out of range: {v}'\r\n            if (has(p = 'EXPONENTIAL_AT')) {\r\n\r\n                if (isArray(v)) {\r\n                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {\r\n                        TO_EXP_NEG = v[0] | 0;\r\n                        TO_EXP_POS = v[1] | 0;\r\n                    }\r\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\r\n                    TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);\r\n                }\r\n            }\r\n            r[p] = [TO_EXP_NEG, TO_EXP_POS];\r\n\r\n            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n            // 'config() RANGE not an integer: {v}'\r\n            // 'config() RANGE cannot be zero: {v}'\r\n            // 'config() RANGE out of range: {v}'\r\n            if (has(p = 'RANGE')) {\r\n\r\n                if (isArray(v)) {\r\n                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {\r\n                        MIN_EXP = v[0] | 0;\r\n                        MAX_EXP = v[1] | 0;\r\n                    }\r\n                } else if (isValidInt(v, -MAX, MAX, 2, p)) {\r\n                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);\r\n                    else if (ERRORS) raise(2, p + ' cannot be zero', v);\r\n                }\r\n            }\r\n            r[p] = [MIN_EXP, MAX_EXP];\r\n\r\n            // ERRORS {boolean|number} true, false, 1 or 0.\r\n            // 'config() ERRORS not a boolean or binary digit: {v}'\r\n            if (has(p = 'ERRORS')) {\r\n\r\n                if (v === !!v || v === 1 || v === 0) {\r\n                    id = 0;\r\n                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;\r\n                } else if (ERRORS) {\r\n                    raise(2, p + notBool, v);\r\n                }\r\n            }\r\n            r[p] = ERRORS;\r\n\r\n            // CRYPTO {boolean|number} true, false, 1 or 0.\r\n            // 'config() CRYPTO not a boolean or binary digit: {v}'\r\n            // 'config() crypto unavailable: {crypto}'\r\n            if (has(p = 'CRYPTO')) {\r\n\r\n                if (v === true || v === false || v === 1 || v === 0) {\r\n                    if (v) {\r\n                        v = typeof crypto == 'undefined';\r\n                        if (!v && crypto && (crypto.getRandomValues || crypto.randomBytes)) {\r\n                            CRYPTO = true;\r\n                        } else if (ERRORS) {\r\n                            raise(2, 'crypto unavailable', v ? void 0 : crypto);\r\n                        } else {\r\n                            CRYPTO = false;\r\n                        }\r\n                    } else {\r\n                        CRYPTO = false;\r\n                    }\r\n                } else if (ERRORS) {\r\n                    raise(2, p + notBool, v);\r\n                }\r\n            }\r\n            r[p] = CRYPTO;\r\n\r\n            // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n            // 'config() MODULO_MODE not an integer: {v}'\r\n            // 'config() MODULO_MODE out of range: {v}'\r\n            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) {\r\n                MODULO_MODE = v | 0;\r\n            }\r\n            r[p] = MODULO_MODE;\r\n\r\n            // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n            // 'config() POW_PRECISION not an integer: {v}'\r\n            // 'config() POW_PRECISION out of range: {v}'\r\n            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) {\r\n                POW_PRECISION = v | 0;\r\n            }\r\n            r[p] = POW_PRECISION;\r\n\r\n            // FORMAT {object}\r\n            // 'config() FORMAT not an object: {v}'\r\n            if (has(p = 'FORMAT')) {\r\n\r\n                if (typeof v == 'object') {\r\n                    FORMAT = v;\r\n                } else if (ERRORS) {\r\n                    raise(2, p + ' not an object', v);\r\n                }\r\n            }\r\n            r[p] = FORMAT;\r\n\r\n            return r;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the maximum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.max = function () { return maxOrMin(arguments, P.lt); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the minimum of the arguments.\r\n         *\r\n         * arguments {number|string|BigNumber}\r\n         */\r\n        BigNumber.min = function () { return maxOrMin(arguments, P.gt); };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n         * zeros are produced).\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         *\r\n         * 'random() decimal places not an integer: {dp}'\r\n         * 'random() decimal places out of range: {dp}'\r\n         * 'random() crypto unavailable: {crypto}'\r\n         */\r\n        BigNumber.random = (function () {\r\n            var pow2_53 = 0x20000000000000;\r\n\r\n            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n            // Check if Math.random() produces more than 32 bits of randomness.\r\n            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n            var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n                ? function () { return mathfloor(Math.random() * pow2_53); }\r\n                : function () {\r\n                    return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n                        (Math.random() * 0x800000 | 0);\r\n                };\r\n\r\n            return function (dp) {\r\n                var a, b, e, k, v,\r\n                    i = 0,\r\n                    c = [],\r\n                    rand = new BigNumber(ONE);\r\n\r\n                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;\r\n                k = mathceil(dp / LOG_BASE);\r\n\r\n                if (CRYPTO) {\r\n\r\n                    // Browsers supporting crypto.getRandomValues.\r\n                    if (crypto.getRandomValues) {\r\n\r\n                        a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n                        for (; i < k;) {\r\n\r\n                            // 53 bits:\r\n                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n                            //                                     11111 11111111 11111111\r\n                            // 0x20000 is 2^21.\r\n                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n                            // Rejection sampling:\r\n                            // 0 <= v < 9007199254740992\r\n                            // Probability that v >= 9e15, is\r\n                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n                            if (v >= 9e15) {\r\n                                b = crypto.getRandomValues(new Uint32Array(2));\r\n                                a[i] = b[0];\r\n                                a[i + 1] = b[1];\r\n                            } else {\r\n\r\n                                // 0 <= v <= 8999999999999999\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push(v % 1e14);\r\n                                i += 2;\r\n                            }\r\n                        }\r\n                        i = k / 2;\r\n\r\n                        // Node.js supporting crypto.randomBytes.\r\n                    } else if (crypto.randomBytes) {\r\n\r\n                        // buffer\r\n                        a = crypto.randomBytes(k *= 7);\r\n\r\n                        for (; i < k;) {\r\n\r\n                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n                            // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n                            // 0 <= v < 9007199254740992\r\n                            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                                (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                                (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n                            if (v >= 9e15) {\r\n                                crypto.randomBytes(7).copy(a, i);\r\n                            } else {\r\n\r\n                                // 0 <= (v % 1e14) <= 99999999999999\r\n                                c.push(v % 1e14);\r\n                                i += 7;\r\n                            }\r\n                        }\r\n                        i = k / 7;\r\n                    } else {\r\n                        CRYPTO = false;\r\n                        if (ERRORS) raise(14, 'crypto unavailable', crypto);\r\n                    }\r\n                }\r\n\r\n                // Use Math.random.\r\n                if (!CRYPTO) {\r\n\r\n                    for (; i < k;) {\r\n                        v = random53bitInt();\r\n                        if (v < 9e15) c[i++] = v % 1e14;\r\n                    }\r\n                }\r\n\r\n                k = c[--i];\r\n                dp %= LOG_BASE;\r\n\r\n                // Convert trailing digits to zeros according to dp.\r\n                if (k && dp) {\r\n                    v = POWS_TEN[LOG_BASE - dp];\r\n                    c[i] = mathfloor(k / v) * v;\r\n                }\r\n\r\n                // Remove trailing elements which are zero.\r\n                for (; c[i] === 0; c.pop(), i--);\r\n\r\n                // Zero?\r\n                if (i < 0) {\r\n                    c = [e = 0];\r\n                } else {\r\n\r\n                    // Remove leading elements which are zero and adjust exponent accordingly.\r\n                    for (e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n                    // Count the digits of the first element of c to determine leading zeros, and...\r\n                    for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n                    // adjust the exponent accordingly.\r\n                    if (i < LOG_BASE) e -= LOG_BASE - i;\r\n                }\r\n\r\n                rand.e = e;\r\n                rand.c = c;\r\n                return rand;\r\n            };\r\n        })();\r\n\r\n\r\n        // PRIVATE FUNCTIONS\r\n\r\n\r\n        // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n        function convertBase(str, baseOut, baseIn, sign) {\r\n            var d, e, k, r, x, xc, y,\r\n                i = str.indexOf('.'),\r\n                dp = DECIMAL_PLACES,\r\n                rm = ROUNDING_MODE;\r\n\r\n            if (baseIn < 37) str = str.toLowerCase();\r\n\r\n            // Non-integer.\r\n            if (i >= 0) {\r\n                k = POW_PRECISION;\r\n\r\n                // Unlimited precision.\r\n                POW_PRECISION = 0;\r\n                str = str.replace('.', '');\r\n                y = new BigNumber(baseIn);\r\n                x = y.pow(str.length - i);\r\n                POW_PRECISION = k;\r\n\r\n                // Convert str as if an integer, then restore the fraction part by dividing the\r\n                // result by its base raised to a power.\r\n                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);\r\n                y.e = y.c.length;\r\n            }\r\n\r\n            // Convert the number as integer.\r\n            xc = toBaseOut(str, baseIn, baseOut);\r\n            e = k = xc.length;\r\n\r\n            // Remove trailing zeros.\r\n            for (; xc[--k] == 0; xc.pop());\r\n            if (!xc[0]) return '0';\r\n\r\n            if (i < 0) {\r\n                --e;\r\n            } else {\r\n                x.c = xc;\r\n                x.e = e;\r\n\r\n                // sign is needed for correct rounding.\r\n                x.s = sign;\r\n                x = div(x, y, dp, rm, baseOut);\r\n                xc = x.c;\r\n                r = x.r;\r\n                e = x.e;\r\n            }\r\n\r\n            d = e + dp + 1;\r\n\r\n            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.\r\n            i = xc[d];\r\n            k = baseOut / 2;\r\n            r = r || d < 0 || xc[d + 1] != null;\r\n\r\n            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n                : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n                    rm == (x.s < 0 ? 8 : 7));\r\n\r\n            if (d < 1 || !xc[0]) {\r\n\r\n                // 1^-dp or 0.\r\n                str = r ? toFixedPoint('1', -dp) : '0';\r\n            } else {\r\n                xc.length = d;\r\n\r\n                if (r) {\r\n\r\n                    // Rounding up may mean the previous digit has to be rounded up and so on.\r\n                    for (--baseOut; ++xc[--d] > baseOut;) {\r\n                        xc[d] = 0;\r\n\r\n                        if (!d) {\r\n                            ++e;\r\n                            xc = [1].concat(xc);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Determine trailing zeros.\r\n                for (k = xc.length; !xc[--k];);\r\n\r\n                // E.g. [4, 11, 15] becomes 4bf.\r\n                for (i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));\r\n                str = toFixedPoint(str, e);\r\n            }\r\n\r\n            // The caller will add the sign.\r\n            return str;\r\n        }\r\n\r\n\r\n        // Perform division in the specified base. Called by div and convertBase.\r\n        div = (function () {\r\n\r\n            // Assume non-zero x and k.\r\n            function multiply(x, k, base) {\r\n                var m, temp, xlo, xhi,\r\n                    carry = 0,\r\n                    i = x.length,\r\n                    klo = k % SQRT_BASE,\r\n                    khi = k / SQRT_BASE | 0;\r\n\r\n                for (x = x.slice(); i--;) {\r\n                    xlo = x[i] % SQRT_BASE;\r\n                    xhi = x[i] / SQRT_BASE | 0;\r\n                    m = khi * xlo + xhi * klo;\r\n                    temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n                    x[i] = temp % base;\r\n                }\r\n\r\n                if (carry) x = [carry].concat(x);\r\n\r\n                return x;\r\n            }\r\n\r\n            function compare(a, b, aL, bL) {\r\n                var i, cmp;\r\n\r\n                if (aL != bL) {\r\n                    cmp = aL > bL ? 1 : -1;\r\n                } else {\r\n\r\n                    for (i = cmp = 0; i < aL; i++) {\r\n\r\n                        if (a[i] != b[i]) {\r\n                            cmp = a[i] > b[i] ? 1 : -1;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                return cmp;\r\n            }\r\n\r\n            function subtract(a, b, aL, base) {\r\n                var i = 0;\r\n\r\n                // Subtract b from a.\r\n                for (; aL--;) {\r\n                    a[aL] -= i;\r\n                    i = a[aL] < b[aL] ? 1 : 0;\r\n                    a[aL] = i * base + a[aL] - b[aL];\r\n                }\r\n\r\n                // Remove leading zeros.\r\n                for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n            }\r\n\r\n            // x: dividend, y: divisor.\r\n            return function (x, y, dp, rm, base) {\r\n                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n                    yL, yz,\r\n                    s = x.s == y.s ? 1 : -1,\r\n                    xc = x.c,\r\n                    yc = y.c;\r\n\r\n                // Either NaN, Infinity or 0?\r\n                if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n                    return new BigNumber(\r\n\r\n                        // Return NaN if either NaN, or both Infinity or 0.\r\n                        !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n                            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n                            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n                    );\r\n                }\r\n\r\n                q = new BigNumber(s);\r\n                qc = q.c = [];\r\n                e = x.e - y.e;\r\n                s = dp + e + 1;\r\n\r\n                if (!base) {\r\n                    base = BASE;\r\n                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n                    s = s / LOG_BASE | 0;\r\n                }\r\n\r\n                // Result exponent may be one less then the current value of e.\r\n                // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n                for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n                if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n                if (s < 0) {\r\n                    qc.push(1);\r\n                    more = true;\r\n                } else {\r\n                    xL = xc.length;\r\n                    yL = yc.length;\r\n                    i = 0;\r\n                    s += 2;\r\n\r\n                    // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n                    n = mathfloor(base / (yc[0] + 1));\r\n\r\n                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.\r\n                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {\r\n                    if (n > 1) {\r\n                        yc = multiply(yc, n, base);\r\n                        xc = multiply(xc, n, base);\r\n                        yL = yc.length;\r\n                        xL = xc.length;\r\n                    }\r\n\r\n                    xi = yL;\r\n                    rem = xc.slice(0, yL);\r\n                    remL = rem.length;\r\n\r\n                    // Add zeros to make remainder as long as divisor.\r\n                    for (; remL < yL; rem[remL++] = 0);\r\n                    yz = yc.slice();\r\n                    yz = [0].concat(yz);\r\n                    yc0 = yc[0];\r\n                    if (yc[1] >= base / 2) yc0++;\r\n                    // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;\r\n\r\n                    do {\r\n                        n = 0;\r\n\r\n                        // Compare divisor and remainder.\r\n                        cmp = compare(yc, rem, yL, remL);\r\n\r\n                        // If divisor < remainder.\r\n                        if (cmp < 0) {\r\n\r\n                            // Calculate trial digit, n.\r\n\r\n                            rem0 = rem[0];\r\n                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n                            // n is how many times the divisor goes into the current remainder.\r\n                            n = mathfloor(rem0 / yc0);\r\n\r\n                            //  Algorithm:\r\n                            //  1. product = divisor * trial digit (n)\r\n                            //  2. if product > remainder: product -= divisor, n--\r\n                            //  3. remainder -= product\r\n                            //  4. if product was < remainder at 2:\r\n                            //    5. compare new remainder and divisor\r\n                            //    6. If remainder > divisor: remainder -= divisor, n++\r\n\r\n                            if (n > 1) {\r\n\r\n                                // n may be > base only when base is 3.\r\n                                if (n >= base) n = base - 1;\r\n\r\n                                // product = divisor * trial digit.\r\n                                prod = multiply(yc, n, base);\r\n                                prodL = prod.length;\r\n                                remL = rem.length;\r\n\r\n                                // Compare product and remainder.\r\n                                // If product > remainder.\r\n                                // Trial digit n too high.\r\n                                // n is 1 too high about 5% of the time, and is not known to have\r\n                                // ever been more than 1 too high.\r\n                                while (compare(prod, rem, prodL, remL) == 1) {\r\n                                    n--;\r\n\r\n                                    // Subtract divisor from product.\r\n                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                                    prodL = prod.length;\r\n                                    cmp = 1;\r\n                                }\r\n                            } else {\r\n\r\n                                // n is 0 or 1, cmp is -1.\r\n                                // If n is 0, there is no need to compare yc and rem again below,\r\n                                // so change cmp to 1 to avoid it.\r\n                                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                                if (n == 0) {\r\n\r\n                                    // divisor < remainder, so n must be at least 1.\r\n                                    cmp = n = 1;\r\n                                }\r\n\r\n                                // product = divisor\r\n                                prod = yc.slice();\r\n                                prodL = prod.length;\r\n                            }\r\n\r\n                            if (prodL < remL) prod = [0].concat(prod);\r\n\r\n                            // Subtract product from remainder.\r\n                            subtract(rem, prod, remL, base);\r\n                            remL = rem.length;\r\n\r\n                            // If product was < remainder.\r\n                            if (cmp == -1) {\r\n\r\n                                // Compare divisor and new remainder.\r\n                                // If divisor < new remainder, subtract divisor from remainder.\r\n                                // Trial digit n too low.\r\n                                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                                while (compare(yc, rem, yL, remL) < 1) {\r\n                                    n++;\r\n\r\n                                    // Subtract divisor from remainder.\r\n                                    subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                                    remL = rem.length;\r\n                                }\r\n                            }\r\n                        } else if (cmp === 0) {\r\n                            n++;\r\n                            rem = [0];\r\n                        } // else cmp === 1 and n will be 0\r\n\r\n                        // Add the next digit, n, to the result array.\r\n                        qc[i++] = n;\r\n\r\n                        // Update the remainder.\r\n                        if (rem[0]) {\r\n                            rem[remL++] = xc[xi] || 0;\r\n                        } else {\r\n                            rem = [xc[xi]];\r\n                            remL = 1;\r\n                        }\r\n                    } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n                    more = rem[0] != null;\r\n\r\n                    // Leading zero?\r\n                    if (!qc[0]) qc.splice(0, 1);\r\n                }\r\n\r\n                if (base == BASE) {\r\n\r\n                    // To calculate q.e, first get the number of digits of qc[0].\r\n                    for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n                    // Caller is convertBase.\r\n                } else {\r\n                    q.e = e;\r\n                    q.r = +more;\r\n                }\r\n\r\n                return q;\r\n            };\r\n        })();\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n         * notation rounded to the specified decimal places or significant digits.\r\n         *\r\n         * n is a BigNumber.\r\n         * i is the index of the last digit required (i.e. the digit that may be rounded up).\r\n         * rm is the rounding mode.\r\n         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.\r\n         */\r\n        function format(n, i, rm, caller) {\r\n            var c0, e, ne, len, str;\r\n\r\n            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode)\r\n                ? rm | 0 : ROUNDING_MODE;\r\n\r\n            if (!n.c) return n.toString();\r\n            c0 = n.c[0];\r\n            ne = n.e;\r\n\r\n            if (i == null) {\r\n                str = coeffToString(n.c);\r\n                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG\r\n                    ? toExponential(str, ne)\r\n                    : toFixedPoint(str, ne);\r\n            } else {\r\n                n = round(new BigNumber(n), i, rm);\r\n\r\n                // n.e may have changed if the value was rounded up.\r\n                e = n.e;\r\n\r\n                str = coeffToString(n.c);\r\n                len = str.length;\r\n\r\n                // toPrecision returns exponential notation if the number of significant digits\r\n                // specified is less than the number of digits necessary to represent the integer\r\n                // part of the value in fixed-point notation.\r\n\r\n                // Exponential notation.\r\n                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n                    // Append zeros?\r\n                    for (; len < i; str += '0', len++);\r\n                    str = toExponential(str, e);\r\n\r\n                    // Fixed-point notation.\r\n                } else {\r\n                    i -= ne;\r\n                    str = toFixedPoint(str, e);\r\n\r\n                    // Append zeros?\r\n                    if (e + 1 > len) {\r\n                        if (--i > 0) for (str += '.'; i--; str += '0');\r\n                    } else {\r\n                        i += e - len;\r\n                        if (i > 0) {\r\n                            if (e + 1 == len) str += '.';\r\n                            for (; i--; str += '0');\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return n.s < 0 && c0 ? '-' + str : str;\r\n        }\r\n\r\n\r\n        // Handle BigNumber.max and BigNumber.min.\r\n        function maxOrMin(args, method) {\r\n            var m, n,\r\n                i = 0;\r\n\r\n            if (isArray(args[0])) args = args[0];\r\n            m = new BigNumber(args[0]);\r\n\r\n            for (; ++i < args.length;) {\r\n                n = new BigNumber(args[i]);\r\n\r\n                // If any number is NaN, return NaN.\r\n                if (!n.s) {\r\n                    m = n;\r\n                    break;\r\n                } else if (method.call(m, n)) {\r\n                    m = n;\r\n                }\r\n            }\r\n\r\n            return m;\r\n        }\r\n\r\n\r\n        /*\r\n         * Return true if n is an integer in range, otherwise throw.\r\n         * Use for argument validation when ERRORS is true.\r\n         */\r\n        function intValidatorWithErrors(n, min, max, caller, name) {\r\n            if (n < min || n > max || n != truncate(n)) {\r\n                raise(caller, (name || 'decimal places') +\r\n                    (n < min || n > max ? ' out of range' : ' not an integer'), n);\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n\r\n        /*\r\n         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n         * Called by minus, plus and times.\r\n         */\r\n        function normalise(n, c, e) {\r\n            var i = 1,\r\n                j = c.length;\r\n\r\n            // Remove trailing zeros.\r\n            for (; !c[--j]; c.pop());\r\n\r\n            // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n            for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n            // Overflow?\r\n            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n                // Infinity.\r\n                n.c = n.e = null;\r\n\r\n                // Underflow?\r\n            } else if (e < MIN_EXP) {\r\n\r\n                // Zero.\r\n                n.c = [n.e = 0];\r\n            } else {\r\n                n.e = e;\r\n                n.c = c;\r\n            }\r\n\r\n            return n;\r\n        }\r\n\r\n\r\n        // Handle values that fail the validity test in BigNumber.\r\n        parseNumeric = (function () {\r\n            var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n                dotAfter = /^([^.]+)\\.$/,\r\n                dotBefore = /^\\.([^.]+)$/,\r\n                isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n                whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n            return function (x, str, num, b) {\r\n                var base,\r\n                    s = num ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n                // No exception on ±Infinity or NaN.\r\n                if (isInfinityOrNaN.test(s)) {\r\n                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n                } else {\r\n                    if (!num) {\r\n\r\n                        // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n                        s = s.replace(basePrefix, function (m, p1, p2) {\r\n                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n                            return !b || b == base ? p1 : m;\r\n                        });\r\n\r\n                        if (b) {\r\n                            base = b;\r\n\r\n                            // E.g. '1.' to '1', '.1' to '0.1'\r\n                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n                        }\r\n\r\n                        if (str != s) return new BigNumber(s, base);\r\n                    }\r\n\r\n                    // 'new BigNumber() not a number: {n}'\r\n                    // 'new BigNumber() not a base {b} number: {n}'\r\n                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);\r\n                    x.s = null;\r\n                }\r\n\r\n                x.c = x.e = null;\r\n                id = 0;\r\n            }\r\n        })();\r\n\r\n\r\n        // Throw a BigNumber Error.\r\n        function raise(caller, msg, val) {\r\n            var error = new Error([\r\n                'new BigNumber',     // 0\r\n                'cmp',               // 1\r\n                'config',            // 2\r\n                'div',               // 3\r\n                'divToInt',          // 4\r\n                'eq',                // 5\r\n                'gt',                // 6\r\n                'gte',               // 7\r\n                'lt',                // 8\r\n                'lte',               // 9\r\n                'minus',             // 10\r\n                'mod',               // 11\r\n                'plus',              // 12\r\n                'precision',         // 13\r\n                'random',            // 14\r\n                'round',             // 15\r\n                'shift',             // 16\r\n                'times',             // 17\r\n                'toDigits',          // 18\r\n                'toExponential',     // 19\r\n                'toFixed',           // 20\r\n                'toFormat',          // 21\r\n                'toFraction',        // 22\r\n                'pow',               // 23\r\n                'toPrecision',       // 24\r\n                'toString',          // 25\r\n                'BigNumber'          // 26\r\n            ][caller] + '() ' + msg + ': ' + val);\r\n\r\n            error.name = 'BigNumber Error';\r\n            id = 0;\r\n            throw error;\r\n        }\r\n\r\n\r\n        /*\r\n         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n         * If r is truthy, it is known that there are more digits after the rounding digit.\r\n         */\r\n        function round(x, sd, rm, r) {\r\n            var d, i, j, k, n, ni, rd,\r\n                xc = x.c,\r\n                pows10 = POWS_TEN;\r\n\r\n            // if x is not Infinity or NaN...\r\n            if (xc) {\r\n\r\n                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n                // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n                // ni is the index of n within x.c.\r\n                // d is the number of digits of n.\r\n                // i is the index of rd within n including leading zeros.\r\n                // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n                out: {\r\n\r\n                    // Get the number of digits of the first element of xc.\r\n                    for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n                    i = sd - d;\r\n\r\n                    // If the rounding digit is in the first element of xc...\r\n                    if (i < 0) {\r\n                        i += LOG_BASE;\r\n                        j = sd;\r\n                        n = xc[ni = 0];\r\n\r\n                        // Get the rounding digit at index j of n.\r\n                        rd = n / pows10[d - j - 1] % 10 | 0;\r\n                    } else {\r\n                        ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n                        if (ni >= xc.length) {\r\n\r\n                            if (r) {\r\n\r\n                                // Needed by sqrt.\r\n                                for (; xc.length <= ni; xc.push(0));\r\n                                n = rd = 0;\r\n                                d = 1;\r\n                                i %= LOG_BASE;\r\n                                j = i - LOG_BASE + 1;\r\n                            } else {\r\n                                break out;\r\n                            }\r\n                        } else {\r\n                            n = k = xc[ni];\r\n\r\n                            // Get the number of digits of n.\r\n                            for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n                            // Get the index of rd within n.\r\n                            i %= LOG_BASE;\r\n\r\n                            // Get the index of rd within n, adjusted for leading zeros.\r\n                            // The number of leading zeros of n is given by LOG_BASE - d.\r\n                            j = i - LOG_BASE + d;\r\n\r\n                            // Get the rounding digit at index j of n.\r\n                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n                        }\r\n                    }\r\n\r\n                    r = r || sd < 0 ||\r\n\r\n                        // Are there any non-zero digits after the rounding digit?\r\n                        // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right\r\n                        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n                        xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n                    r = rm < 4\r\n                        ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n                        : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n                            // Check whether the digit to the left of the rounding digit is odd.\r\n                            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n                            rm == (x.s < 0 ? 8 : 7));\r\n\r\n                    if (sd < 1 || !xc[0]) {\r\n                        xc.length = 0;\r\n\r\n                        if (r) {\r\n\r\n                            // Convert sd to decimal places.\r\n                            sd -= x.e + 1;\r\n\r\n                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n                            x.e = -sd || 0;\r\n                        } else {\r\n\r\n                            // Zero.\r\n                            xc[0] = x.e = 0;\r\n                        }\r\n\r\n                        return x;\r\n                    }\r\n\r\n                    // Remove excess digits.\r\n                    if (i == 0) {\r\n                        xc.length = ni;\r\n                        k = 1;\r\n                        ni--;\r\n                    } else {\r\n                        xc.length = ni + 1;\r\n                        k = pows10[LOG_BASE - i];\r\n\r\n                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n                        // j > 0 means i > number of leading zeros of n.\r\n                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n                    }\r\n\r\n                    // Round up?\r\n                    if (r) {\r\n\r\n                        for (; ;) {\r\n\r\n                            // If the digit to be rounded up is in the first element of xc...\r\n                            if (ni == 0) {\r\n\r\n                                // i will be the length of xc[0] before k is added.\r\n                                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                                j = xc[0] += k;\r\n                                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                                // if i != k the length has increased.\r\n                                if (i != k) {\r\n                                    x.e++;\r\n                                    if (xc[0] == BASE) xc[0] = 1;\r\n                                }\r\n\r\n                                break;\r\n                            } else {\r\n                                xc[ni] += k;\r\n                                if (xc[ni] != BASE) break;\r\n                                xc[ni--] = 0;\r\n                                k = 1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Remove trailing zeros.\r\n                    for (i = xc.length; xc[--i] === 0; xc.pop());\r\n                }\r\n\r\n                // Overflow? Infinity.\r\n                if (x.e > MAX_EXP) {\r\n                    x.c = x.e = null;\r\n\r\n                    // Underflow? Zero.\r\n                } else if (x.e < MIN_EXP) {\r\n                    x.c = [x.e = 0];\r\n                }\r\n            }\r\n\r\n            return x;\r\n        }\r\n\r\n\r\n        // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n         */\r\n        P.absoluteValue = P.abs = function () {\r\n            var x = new BigNumber(this);\r\n            if (x.s < 0) x.s = 1;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of Infinity.\r\n         */\r\n        P.ceil = function () {\r\n            return round(new BigNumber(this), this.e + 1, 2);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return\r\n         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * 0 if they have the same value,\r\n         * or null if the value of either is NaN.\r\n         */\r\n        P.comparedTo = P.cmp = function (y, b) {\r\n            id = 1;\r\n            return compare(this, new BigNumber(y, b));\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of decimal places of the value of this BigNumber, or null if the value\r\n         * of this BigNumber is ±Infinity or NaN.\r\n         */\r\n        P.decimalPlaces = P.dp = function () {\r\n            var n, v,\r\n                c = this.c;\r\n\r\n            if (!c) return null;\r\n            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n            // Subtract the number of trailing zeros of the last number.\r\n            if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n            if (n < 0) n = 0;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n / 0 = I\r\n         *  n / N = N\r\n         *  n / I = 0\r\n         *  0 / n = 0\r\n         *  0 / 0 = N\r\n         *  0 / N = N\r\n         *  0 / I = 0\r\n         *  N / n = N\r\n         *  N / 0 = N\r\n         *  N / N = N\r\n         *  N / I = N\r\n         *  I / n = I\r\n         *  I / 0 = I\r\n         *  I / N = N\r\n         *  I / I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.dividedBy = P.div = function (y, b) {\r\n            id = 3;\r\n            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n         * BigNumber by the value of BigNumber(y, b).\r\n         */\r\n        P.dividedToIntegerBy = P.divToInt = function (y, b) {\r\n            id = 4;\r\n            return div(this, new BigNumber(y, b), 0, 1);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.equals = P.eq = function (y, b) {\r\n            id = 5;\r\n            return compare(this, new BigNumber(y, b)) === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole\r\n         * number in the direction of -Infinity.\r\n         */\r\n        P.floor = function () {\r\n            return round(new BigNumber(this), this.e + 1, 3);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.greaterThan = P.gt = function (y, b) {\r\n            id = 6;\r\n            return compare(this, new BigNumber(y, b)) > 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is greater than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.greaterThanOrEqualTo = P.gte = function (y, b) {\r\n            id = 7;\r\n            return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is a finite number, otherwise returns false.\r\n         */\r\n        P.isFinite = function () {\r\n            return !!this.c;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n         */\r\n        P.isInteger = P.isInt = function () {\r\n            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is NaN, otherwise returns false.\r\n         */\r\n        P.isNaN = function () {\r\n            return !this.s;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is negative, otherwise returns false.\r\n         */\r\n        P.isNegative = P.isNeg = function () {\r\n            return this.s < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.\r\n         */\r\n        P.isZero = function () {\r\n            return !!this.c && this.c[0] == 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n         * otherwise returns false.\r\n         */\r\n        P.lessThan = P.lt = function (y, b) {\r\n            id = 8;\r\n            return compare(this, new BigNumber(y, b)) < 0;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return true if the value of this BigNumber is less than or equal to the value of\r\n         * BigNumber(y, b), otherwise returns false.\r\n         */\r\n        P.lessThanOrEqualTo = P.lte = function (y, b) {\r\n            id = 9;\r\n            return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n - 0 = n\r\n         *  n - N = N\r\n         *  n - I = -I\r\n         *  0 - n = -n\r\n         *  0 - 0 = 0\r\n         *  0 - N = N\r\n         *  0 - I = -I\r\n         *  N - n = N\r\n         *  N - 0 = N\r\n         *  N - N = N\r\n         *  N - I = N\r\n         *  I - n = I\r\n         *  I - 0 = I\r\n         *  I - N = N\r\n         *  I - I = N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.minus = P.sub = function (y, b) {\r\n            var i, j, t, xLTy,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 10;\r\n            y = new BigNumber(y, b);\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if (!a || !b) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if (a != b) {\r\n                y.s = -b;\r\n                return x.plus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if (!xe || !ye) {\r\n\r\n                // Either Infinity?\r\n                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n                // Either zero?\r\n                if (!xc[0] || !yc[0]) {\r\n\r\n                    // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                    return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n                        // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n                        ROUNDING_MODE == 3 ? -0 : 0);\r\n                }\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Determine which is the bigger number.\r\n            if (a = xe - ye) {\r\n\r\n                if (xLTy = a < 0) {\r\n                    a = -a;\r\n                    t = xc;\r\n                } else {\r\n                    ye = xe;\r\n                    t = yc;\r\n                }\r\n\r\n                t.reverse();\r\n\r\n                // Prepend zeros to equalise exponents.\r\n                for (b = a; b--; t.push(0));\r\n                t.reverse();\r\n            } else {\r\n\r\n                // Exponents equal. Check digit by digit.\r\n                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n                for (a = b = 0; b < j; b++) {\r\n\r\n                    if (xc[b] != yc[b]) {\r\n                        xLTy = xc[b] < yc[b];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // x < y? Point xc to the array of the bigger number.\r\n            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n            b = (j = yc.length) - (i = xc.length);\r\n\r\n            // Append zeros to xc if shorter.\r\n            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n            if (b > 0) for (; b--; xc[i++] = 0);\r\n            b = BASE - 1;\r\n\r\n            // Subtract yc from xc.\r\n            for (; j > a;) {\r\n\r\n                if (xc[--j] < yc[j]) {\r\n                    for (i = j; i && !xc[--i]; xc[i] = b);\r\n                    --xc[i];\r\n                    xc[j] += BASE;\r\n                }\r\n\r\n                xc[j] -= yc[j];\r\n            }\r\n\r\n            // Remove leading zeros and adjust exponent accordingly.\r\n            for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n            // Zero?\r\n            if (!xc[0]) {\r\n\r\n                // Following IEEE 754 (2008) 6.3,\r\n                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n                y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n                y.c = [y.e = 0];\r\n                return y;\r\n            }\r\n\r\n            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n            // for finite x and y.\r\n            return normalise(y, xc, ye);\r\n        };\r\n\r\n\r\n        /*\r\n         *   n % 0 =  N\r\n         *   n % N =  N\r\n         *   n % I =  n\r\n         *   0 % n =  0\r\n         *  -0 % n = -0\r\n         *   0 % 0 =  N\r\n         *   0 % N =  N\r\n         *   0 % I =  0\r\n         *   N % n =  N\r\n         *   N % 0 =  N\r\n         *   N % N =  N\r\n         *   N % I =  N\r\n         *   I % n =  N\r\n         *   I % 0 =  N\r\n         *   I % N =  N\r\n         *   I % I =  N\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n         * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n         */\r\n        P.modulo = P.mod = function (y, b) {\r\n            var q, s,\r\n                x = this;\r\n\r\n            id = 11;\r\n            y = new BigNumber(y, b);\r\n\r\n            // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n            if (!x.c || !y.s || y.c && !y.c[0]) {\r\n                return new BigNumber(NaN);\r\n\r\n                // Return x if y is Infinity or x is zero.\r\n            } else if (!y.c || x.c && !x.c[0]) {\r\n                return new BigNumber(x);\r\n            }\r\n\r\n            if (MODULO_MODE == 9) {\r\n\r\n                // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n                // r = x - qy    where  0 <= r < abs(y)\r\n                s = y.s;\r\n                y.s = 1;\r\n                q = div(x, y, 0, 3);\r\n                y.s = s;\r\n                q.s *= s;\r\n            } else {\r\n                q = div(x, y, 0, MODULO_MODE);\r\n            }\r\n\r\n            return x.minus(q.times(y));\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n         * i.e. multiplied by -1.\r\n         */\r\n        P.negated = P.neg = function () {\r\n            var x = new BigNumber(this);\r\n            x.s = -x.s || null;\r\n            return x;\r\n        };\r\n\r\n\r\n        /*\r\n         *  n + 0 = n\r\n         *  n + N = N\r\n         *  n + I = I\r\n         *  0 + n = n\r\n         *  0 + 0 = 0\r\n         *  0 + N = N\r\n         *  0 + I = I\r\n         *  N + n = N\r\n         *  N + 0 = N\r\n         *  N + N = N\r\n         *  N + I = N\r\n         *  I + n = I\r\n         *  I + 0 = I\r\n         *  I + N = N\r\n         *  I + I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.plus = P.add = function (y, b) {\r\n            var t,\r\n                x = this,\r\n                a = x.s;\r\n\r\n            id = 12;\r\n            y = new BigNumber(y, b);\r\n            b = y.s;\r\n\r\n            // Either NaN?\r\n            if (!a || !b) return new BigNumber(NaN);\r\n\r\n            // Signs differ?\r\n            if (a != b) {\r\n                y.s = -b;\r\n                return x.minus(y);\r\n            }\r\n\r\n            var xe = x.e / LOG_BASE,\r\n                ye = y.e / LOG_BASE,\r\n                xc = x.c,\r\n                yc = y.c;\r\n\r\n            if (!xe || !ye) {\r\n\r\n                // Return ±Infinity if either ±Infinity.\r\n                if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n                // Either zero?\r\n                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n            }\r\n\r\n            xe = bitFloor(xe);\r\n            ye = bitFloor(ye);\r\n            xc = xc.slice();\r\n\r\n            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n            if (a = xe - ye) {\r\n                if (a > 0) {\r\n                    ye = xe;\r\n                    t = yc;\r\n                } else {\r\n                    a = -a;\r\n                    t = xc;\r\n                }\r\n\r\n                t.reverse();\r\n                for (; a--; t.push(0));\r\n                t.reverse();\r\n            }\r\n\r\n            a = xc.length;\r\n            b = yc.length;\r\n\r\n            // Point xc to the longer array, and b to the shorter length.\r\n            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n            for (a = 0; b;) {\r\n                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n            }\r\n\r\n            if (a) {\r\n                xc = [a].concat(xc);\r\n                ++ye;\r\n            }\r\n\r\n            // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n            // ye = MAX_EXP + 1 possible\r\n            return normalise(y, xc, ye);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the number of significant digits of the value of this BigNumber.\r\n         *\r\n         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n         */\r\n        P.precision = P.sd = function (z) {\r\n            var n, v,\r\n                x = this,\r\n                c = x.c;\r\n\r\n            // 'precision() argument not a boolean or binary digit: {z}'\r\n            if (z != null && z !== !!z && z !== 1 && z !== 0) {\r\n                if (ERRORS) raise(13, 'argument' + notBool, z);\r\n                if (z != !!z) z = null;\r\n            }\r\n\r\n            if (!c) return null;\r\n            v = c.length - 1;\r\n            n = v * LOG_BASE + 1;\r\n\r\n            if (v = c[v]) {\r\n\r\n                // Subtract the number of trailing zeros of the last element.\r\n                for (; v % 10 == 0; v /= 10, n--);\r\n\r\n                // Add the number of digits of the first element.\r\n                for (v = c[0]; v >= 10; v /= 10, n++);\r\n            }\r\n\r\n            if (z && x.e + 1 > n) n = x.e + 1;\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if\r\n         * omitted.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'round() decimal places out of range: {dp}'\r\n         * 'round() decimal places not an integer: {dp}'\r\n         * 'round() rounding mode not an integer: {rm}'\r\n         * 'round() rounding mode out of range: {rm}'\r\n         */\r\n        P.round = function (dp, rm) {\r\n            var n = new BigNumber(this);\r\n\r\n            if (dp == null || isValidInt(dp, 0, MAX, 15)) {\r\n                round(n, ~~dp + this.e + 1, rm == null ||\r\n                    !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);\r\n            }\r\n\r\n            return n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n         *\r\n         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         *\r\n         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity\r\n         * otherwise.\r\n         *\r\n         * 'shift() argument not an integer: {k}'\r\n         * 'shift() argument out of range: {k}'\r\n         */\r\n        P.shift = function (k) {\r\n            var n = this;\r\n            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument')\r\n\r\n                // k < 1e+21, or truncate(k) will produce exponential notation.\r\n                ? n.times('1e' + truncate(k))\r\n                : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER)\r\n                    ? n.s * (k < 0 ? 0 : 1 / 0)\r\n                    : n);\r\n        };\r\n\r\n\r\n        /*\r\n         *  sqrt(-n) =  N\r\n         *  sqrt( N) =  N\r\n         *  sqrt(-I) =  N\r\n         *  sqrt( I) =  I\r\n         *  sqrt( 0) =  0\r\n         *  sqrt(-0) = -0\r\n         *\r\n         * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         */\r\n        P.squareRoot = P.sqrt = function () {\r\n            var m, n, r, rep, t,\r\n                x = this,\r\n                c = x.c,\r\n                s = x.s,\r\n                e = x.e,\r\n                dp = DECIMAL_PLACES + 4,\r\n                half = new BigNumber('0.5');\r\n\r\n            // Negative/NaN/Infinity/zero?\r\n            if (s !== 1 || !c || !c[0]) {\r\n                return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n            }\r\n\r\n            // Initial estimate.\r\n            s = Math.sqrt(+x);\r\n\r\n            // Math.sqrt underflow/overflow?\r\n            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n            if (s == 0 || s == 1 / 0) {\r\n                n = coeffToString(c);\r\n                if ((n.length + e) % 2 == 0) n += '0';\r\n                s = Math.sqrt(n);\r\n                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n                if (s == 1 / 0) {\r\n                    n = '1e' + e;\r\n                } else {\r\n                    n = s.toExponential();\r\n                    n = n.slice(0, n.indexOf('e') + 1) + e;\r\n                }\r\n\r\n                r = new BigNumber(n);\r\n            } else {\r\n                r = new BigNumber(s + '');\r\n            }\r\n\r\n            // Check for zero.\r\n            // r could be zero if MIN_EXP is changed after the this value was created.\r\n            // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n            // coeffToString to throw.\r\n            if (r.c[0]) {\r\n                e = r.e;\r\n                s = e + dp;\r\n                if (s < 3) s = 0;\r\n\r\n                // Newton-Raphson iteration.\r\n                for (; ;) {\r\n                    t = r;\r\n                    r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n                    if (coeffToString(t.c).slice(0, s) === (n =\r\n                        coeffToString(r.c)).slice(0, s)) {\r\n\r\n                        // The exponent of r may here be one less than the final result exponent,\r\n                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n                        // are indexed correctly.\r\n                        if (r.e < e)--s;\r\n                        n = n.slice(s - 3, s + 1);\r\n\r\n                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n                        // iteration.\r\n                        if (n == '9999' || !rep && n == '4999') {\r\n\r\n                            // On the first iteration only, check to see if rounding up gives the\r\n                            // exact result as the nines may infinitely repeat.\r\n                            if (!rep) {\r\n                                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                                if (t.times(t).eq(x)) {\r\n                                    r = t;\r\n                                    break;\r\n                                }\r\n                            }\r\n\r\n                            dp += 4;\r\n                            s += 4;\r\n                            rep = 1;\r\n                        } else {\r\n\r\n                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n                            // result. If not, then there are further digits and m will be truthy.\r\n                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                                // Truncate to the first rounding digit.\r\n                                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                                m = !r.times(r).eq(x);\r\n                            }\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n        };\r\n\r\n\r\n        /*\r\n         *  n * 0 = 0\r\n         *  n * N = N\r\n         *  n * I = I\r\n         *  0 * n = 0\r\n         *  0 * 0 = 0\r\n         *  0 * N = N\r\n         *  0 * I = N\r\n         *  N * n = N\r\n         *  N * 0 = N\r\n         *  N * N = N\r\n         *  N * I = N\r\n         *  I * n = I\r\n         *  I * 0 = N\r\n         *  I * N = N\r\n         *  I * I = I\r\n         *\r\n         * Return a new BigNumber whose value is the value of this BigNumber times the value of\r\n         * BigNumber(y, b).\r\n         */\r\n        P.times = P.mul = function (y, b) {\r\n            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n                base, sqrtBase,\r\n                x = this,\r\n                xc = x.c,\r\n                yc = (id = 17, y = new BigNumber(y, b)).c;\r\n\r\n            // Either NaN, ±Infinity or ±0?\r\n            if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n                // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n                    y.c = y.e = y.s = null;\r\n                } else {\r\n                    y.s *= x.s;\r\n\r\n                    // Return ±Infinity if either is ±Infinity.\r\n                    if (!xc || !yc) {\r\n                        y.c = y.e = null;\r\n\r\n                        // Return ±0 if either is ±0.\r\n                    } else {\r\n                        y.c = [0];\r\n                        y.e = 0;\r\n                    }\r\n                }\r\n\r\n                return y;\r\n            }\r\n\r\n            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n            y.s *= x.s;\r\n            xcL = xc.length;\r\n            ycL = yc.length;\r\n\r\n            // Ensure xc points to longer array and xcL to its length.\r\n            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n            // Initialise the result array with zeros.\r\n            for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n            base = BASE;\r\n            sqrtBase = SQRT_BASE;\r\n\r\n            for (i = ycL; --i >= 0;) {\r\n                c = 0;\r\n                ylo = yc[i] % sqrtBase;\r\n                yhi = yc[i] / sqrtBase | 0;\r\n\r\n                for (k = xcL, j = i + k; j > i;) {\r\n                    xlo = xc[--k] % sqrtBase;\r\n                    xhi = xc[k] / sqrtBase | 0;\r\n                    m = yhi * xlo + xhi * ylo;\r\n                    xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n                    zc[j--] = xlo % base;\r\n                }\r\n\r\n                zc[j] = c;\r\n            }\r\n\r\n            if (c) {\r\n                ++e;\r\n            } else {\r\n                zc.splice(0, 1);\r\n            }\r\n\r\n            return normalise(y, zc, e);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of\r\n         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toDigits() precision out of range: {sd}'\r\n         * 'toDigits() precision not an integer: {sd}'\r\n         * 'toDigits() rounding mode not an integer: {rm}'\r\n         * 'toDigits() rounding mode out of range: {rm}'\r\n         */\r\n        P.toDigits = function (sd, rm) {\r\n            var n = new BigNumber(this);\r\n            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;\r\n            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;\r\n            return sd ? round(n, sd, rm) : n;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in exponential notation and\r\n         * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toExponential() decimal places not an integer: {dp}'\r\n         * 'toExponential() decimal places out of range: {dp}'\r\n         * 'toExponential() rounding mode not an integer: {rm}'\r\n         * 'toExponential() rounding mode out of range: {rm}'\r\n         */\r\n        P.toExponential = function (dp, rm) {\r\n            return format(this,\r\n                dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n         *\r\n         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n         * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFixed() decimal places not an integer: {dp}'\r\n         * 'toFixed() decimal places out of range: {dp}'\r\n         * 'toFixed() rounding mode not an integer: {rm}'\r\n         * 'toFixed() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFixed = function (dp, rm) {\r\n            return format(this, dp != null && isValidInt(dp, 0, MAX, 20)\r\n                ? ~~dp + this.e + 1 : null, rm, 20);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n         * of the FORMAT object (see BigNumber.config).\r\n         *\r\n         * FORMAT = {\r\n         *      decimalSeparator : '.',\r\n         *      groupSeparator : ',',\r\n         *      groupSize : 3,\r\n         *      secondaryGroupSize : 0,\r\n         *      fractionGroupSeparator : '\\xA0',    // non-breaking space\r\n         *      fractionGroupSize : 0\r\n         * };\r\n         *\r\n         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toFormat() decimal places not an integer: {dp}'\r\n         * 'toFormat() decimal places out of range: {dp}'\r\n         * 'toFormat() rounding mode not an integer: {rm}'\r\n         * 'toFormat() rounding mode out of range: {rm}'\r\n         */\r\n        P.toFormat = function (dp, rm) {\r\n            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21)\r\n                ? ~~dp + this.e + 1 : null, rm, 21);\r\n\r\n            if (this.c) {\r\n                var i,\r\n                    arr = str.split('.'),\r\n                    g1 = +FORMAT.groupSize,\r\n                    g2 = +FORMAT.secondaryGroupSize,\r\n                    groupSeparator = FORMAT.groupSeparator,\r\n                    intPart = arr[0],\r\n                    fractionPart = arr[1],\r\n                    isNeg = this.s < 0,\r\n                    intDigits = isNeg ? intPart.slice(1) : intPart,\r\n                    len = intDigits.length;\r\n\r\n                if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n                if (g1 > 0 && len > 0) {\r\n                    i = len % g1 || g1;\r\n                    intPart = intDigits.substr(0, i);\r\n\r\n                    for (; i < len; i += g1) {\r\n                        intPart += groupSeparator + intDigits.substr(i, g1);\r\n                    }\r\n\r\n                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n                    if (isNeg) intPart = '-' + intPart;\r\n                }\r\n\r\n                str = fractionPart\r\n                    ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize)\r\n                        ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n                            '$&' + FORMAT.fractionGroupSeparator)\r\n                        : fractionPart)\r\n                    : intPart;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string array representing the value of this BigNumber as a simple fraction with\r\n         * an integer numerator and an integer denominator. The denominator will be a positive\r\n         * non-zero value less than or equal to the specified maximum denominator. If a maximum\r\n         * denominator is not specified, the denominator will be the lowest value necessary to\r\n         * represent the number exactly.\r\n         *\r\n         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.\r\n         *\r\n         * 'toFraction() max denominator not an integer: {md}'\r\n         * 'toFraction() max denominator out of range: {md}'\r\n         */\r\n        P.toFraction = function (md) {\r\n            var arr, d0, d2, e, exp, n, n0, q, s,\r\n                k = ERRORS,\r\n                x = this,\r\n                xc = x.c,\r\n                d = new BigNumber(ONE),\r\n                n1 = d0 = new BigNumber(ONE),\r\n                d1 = n0 = new BigNumber(ONE);\r\n\r\n            if (md != null) {\r\n                ERRORS = false;\r\n                n = new BigNumber(md);\r\n                ERRORS = k;\r\n\r\n                if (!(k = n.isInt()) || n.lt(ONE)) {\r\n\r\n                    if (ERRORS) {\r\n                        raise(22,\r\n                            'max denominator ' + (k ? 'out of range' : 'not an integer'), md);\r\n                    }\r\n\r\n                    // ERRORS is false:\r\n                    // If md is a finite non-integer >= 1, round it to an integer and use it.\r\n                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;\r\n                }\r\n            }\r\n\r\n            if (!xc) return x.toString();\r\n            s = coeffToString(xc);\r\n\r\n            // Determine initial denominator.\r\n            // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n            e = d.e = s.length - x.e - 1;\r\n            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n            md = !md || n.cmp(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n            exp = MAX_EXP;\r\n            MAX_EXP = 1 / 0;\r\n            n = new BigNumber(s);\r\n\r\n            // n0 = d1 = 0\r\n            n0.c[0] = 0;\r\n\r\n            for (; ;) {\r\n                q = div(n, d, 0, 1);\r\n                d2 = d0.plus(q.times(d1));\r\n                if (d2.cmp(md) == 1) break;\r\n                d0 = d1;\r\n                d1 = d2;\r\n                n1 = n0.plus(q.times(d2 = n1));\r\n                n0 = d2;\r\n                d = n.minus(q.times(d2 = d));\r\n                n = d2;\r\n            }\r\n\r\n            d2 = div(md.minus(d0), d1, 0, 1);\r\n            n0 = n0.plus(d2.times(n1));\r\n            d0 = d0.plus(d2.times(d1));\r\n            n0.s = n1.s = x.s;\r\n            e *= 2;\r\n\r\n            // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(\r\n                div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1\r\n                ? [n1.toString(), d1.toString()]\r\n                : [n0.toString(), d0.toString()];\r\n\r\n            MAX_EXP = exp;\r\n            return arr;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return the value of this BigNumber converted to a number primitive.\r\n         */\r\n        P.toNumber = function () {\r\n            return +this;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.\r\n         * If m is present, return the result modulo m.\r\n         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using\r\n         * ROUNDING_MODE.\r\n         *\r\n         * The modular power operation works efficiently when x, n, and m are positive integers,\r\n         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).\r\n         *\r\n         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n         * [m] {number|string|BigNumber} The modulus.\r\n         *\r\n         * 'pow() exponent not an integer: {n}'\r\n         * 'pow() exponent out of range: {n}'\r\n         *\r\n         * Performs 54 loop iterations for n of 9007199254740991.\r\n         */\r\n        P.toPower = P.pow = function (n, m) {\r\n            var k, y, z,\r\n                i = mathfloor(n < 0 ? -n : +n),\r\n                x = this;\r\n\r\n            if (m != null) {\r\n                id = 23;\r\n                m = new BigNumber(m);\r\n            }\r\n\r\n            // Pass ±Infinity to Math.pow if exponent is out of range.\r\n            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') &&\r\n                (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) ||\r\n                    parseFloat(n) != n && !(n = NaN)) || n == 0) {\r\n                k = Math.pow(+x, n);\r\n                return new BigNumber(m ? k % m : k);\r\n            }\r\n\r\n            if (m) {\r\n                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) {\r\n                    x = x.mod(m);\r\n                } else {\r\n                    z = m;\r\n\r\n                    // Nullify m so only a single mod operation is performed at the end.\r\n                    m = null;\r\n                }\r\n            } else if (POW_PRECISION) {\r\n\r\n                // Truncating each coefficient array to a length of k after each multiplication\r\n                // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n                // i.e. there will be a minimum of 28 guard digits retained.\r\n                // (Using + 1.5 would give [9, 21] guard digits.)\r\n                k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n            }\r\n\r\n            y = new BigNumber(ONE);\r\n\r\n            for (; ;) {\r\n                if (i % 2) {\r\n                    y = y.times(x);\r\n                    if (!y.c) break;\r\n                    if (k) {\r\n                        if (y.c.length > k) y.c.length = k;\r\n                    } else if (m) {\r\n                        y = y.mod(m);\r\n                    }\r\n                }\r\n\r\n                i = mathfloor(i / 2);\r\n                if (!i) break;\r\n                x = x.times(x);\r\n                if (k) {\r\n                    if (x.c && x.c.length > k) x.c.length = k;\r\n                } else if (m) {\r\n                    x = x.mod(m);\r\n                }\r\n            }\r\n\r\n            if (m) return y;\r\n            if (n < 0) y = ONE.div(y);\r\n\r\n            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n         * necessary to represent the integer part of the value in fixed-point notation, then use\r\n         * exponential notation.\r\n         *\r\n         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n         *\r\n         * 'toPrecision() precision not an integer: {sd}'\r\n         * 'toPrecision() precision out of range: {sd}'\r\n         * 'toPrecision() rounding mode not an integer: {rm}'\r\n         * 'toPrecision() rounding mode out of range: {rm}'\r\n         */\r\n        P.toPrecision = function (sd, rm) {\r\n            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision')\r\n                ? sd | 0 : null, rm, 24);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n         * TO_EXP_NEG, return exponential notation.\r\n         *\r\n         * [b] {number} Integer, 2 to 64 inclusive.\r\n         *\r\n         * 'toString() base not an integer: {b}'\r\n         * 'toString() base out of range: {b}'\r\n         */\r\n        P.toString = function (b) {\r\n            var str,\r\n                n = this,\r\n                s = n.s,\r\n                e = n.e;\r\n\r\n            // Infinity or NaN?\r\n            if (e === null) {\r\n\r\n                if (s) {\r\n                    str = 'Infinity';\r\n                    if (s < 0) str = '-' + str;\r\n                } else {\r\n                    str = 'NaN';\r\n                }\r\n            } else {\r\n                str = coeffToString(n.c);\r\n\r\n                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) {\r\n                    str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                        ? toExponential(str, e)\r\n                        : toFixedPoint(str, e);\r\n                } else {\r\n                    str = convertBase(toFixedPoint(str, e), b | 0, 10, s);\r\n                }\r\n\r\n                if (s < 0 && n.c[0]) str = '-' + str;\r\n            }\r\n\r\n            return str;\r\n        };\r\n\r\n\r\n        /*\r\n         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole\r\n         * number.\r\n         */\r\n        P.truncated = P.trunc = function () {\r\n            return round(new BigNumber(this), this.e + 1, 1);\r\n        };\r\n\r\n\r\n        /*\r\n         * Return as toString, but do not accept a base argument, and include the minus sign for\r\n         * negative zero.\r\n         */\r\n        P.valueOf = P.toJSON = function () {\r\n            var str,\r\n                n = this,\r\n                e = n.e;\r\n\r\n            if (e === null) return n.toString();\r\n\r\n            str = coeffToString(n.c);\r\n\r\n            str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n                ? toExponential(str, e)\r\n                : toFixedPoint(str, e);\r\n\r\n            return n.s < 0 ? '-' + str : str;\r\n        };\r\n\r\n\r\n        P.isBigNumber = true;\r\n\r\n        if (config != null) BigNumber.config(config);\r\n\r\n        return BigNumber;\r\n    }\r\n\r\n\r\n    // PRIVATE HELPER FUNCTIONS\r\n\r\n\r\n    function bitFloor(n) {\r\n        var i = n | 0;\r\n        return n > 0 || n === i ? i : i - 1;\r\n    }\r\n\r\n\r\n    // Return a coefficient array as a string of base 10 digits.\r\n    function coeffToString(a) {\r\n        var s, z,\r\n            i = 1,\r\n            j = a.length,\r\n            r = a[0] + '';\r\n\r\n        for (; i < j;) {\r\n            s = a[i++] + '';\r\n            z = LOG_BASE - s.length;\r\n            for (; z--; s = '0' + s);\r\n            r += s;\r\n        }\r\n\r\n        // Determine trailing zeros.\r\n        for (j = r.length; r.charCodeAt(--j) === 48;);\r\n        return r.slice(0, j + 1 || 1);\r\n    }\r\n\r\n\r\n    // Compare the value of BigNumbers x and y.\r\n    function compare(x, y) {\r\n        var a, b,\r\n            xc = x.c,\r\n            yc = y.c,\r\n            i = x.s,\r\n            j = y.s,\r\n            k = x.e,\r\n            l = y.e;\r\n\r\n        // Either NaN?\r\n        if (!i || !j) return null;\r\n\r\n        a = xc && !xc[0];\r\n        b = yc && !yc[0];\r\n\r\n        // Either zero?\r\n        if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n        // Signs differ?\r\n        if (i != j) return i;\r\n\r\n        a = i < 0;\r\n        b = k == l;\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n        // Compare exponents.\r\n        if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n        j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n        // Compare digit by digit.\r\n        for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n        // Compare lengths.\r\n        return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n    }\r\n\r\n\r\n    /*\r\n     * Return true if n is a valid number in range, otherwise false.\r\n     * Use for argument validation when ERRORS is false.\r\n     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.\r\n     */\r\n    function intValidatorNoErrors(n, min, max) {\r\n        return (n = truncate(n)) >= min && n <= max;\r\n    }\r\n\r\n\r\n    function isArray(obj) {\r\n        return Object.prototype.toString.call(obj) == '[object Array]';\r\n    }\r\n\r\n\r\n    /*\r\n     * Convert string of baseIn to an array of numbers of baseOut.\r\n     * Eg. convertBase('255', 10, 16) returns [15, 15].\r\n     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\n     */\r\n    function toBaseOut(str, baseIn, baseOut) {\r\n        var j,\r\n            arr = [0],\r\n            arrL,\r\n            i = 0,\r\n            len = str.length;\r\n\r\n        for (; i < len;) {\r\n            for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));\r\n\r\n            for (; j < arr.length; j++) {\r\n\r\n                if (arr[j] > baseOut - 1) {\r\n                    if (arr[j + 1] == null) arr[j + 1] = 0;\r\n                    arr[j + 1] += arr[j] / baseOut | 0;\r\n                    arr[j] %= baseOut;\r\n                }\r\n            }\r\n        }\r\n\r\n        return arr.reverse();\r\n    }\r\n\r\n\r\n    function toExponential(str, e) {\r\n        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n            (e < 0 ? 'e' : 'e+') + e;\r\n    }\r\n\r\n\r\n    function toFixedPoint(str, e) {\r\n        var len, z;\r\n\r\n        // Negative exponent?\r\n        if (e < 0) {\r\n\r\n            // Prepend zeros.\r\n            for (z = '0.'; ++e; z += '0');\r\n            str = z + str;\r\n\r\n            // Positive exponent\r\n        } else {\r\n            len = str.length;\r\n\r\n            // Append zeros.\r\n            if (++e > len) {\r\n                for (z = '0', e -= len; --e; z += '0');\r\n                str += z;\r\n            } else if (e < len) {\r\n                str = str.slice(0, e) + '.' + str.slice(e);\r\n            }\r\n        }\r\n\r\n        return str;\r\n    }\r\n\r\n\r\n    function truncate(n) {\r\n        n = parseFloat(n);\r\n        return n < 0 ? mathceil(n) : mathfloor(n);\r\n    }\r\n\r\n\r\n    // EXPORT\r\n\r\n\r\n    BigNumber = constructorFactory();\r\n    BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n\r\n    // AMD.\r\n    if (typeof define == 'function' && define.amd) {\r\n        define(function () { return BigNumber; });\r\n\r\n        // Node.js and other environments that support module.exports.\r\n    } else if (typeof module != 'undefined' && module.exports) {\r\n        module.exports = BigNumber;\r\n\r\n        // Browser.\r\n    } else {\r\n        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();\r\n        globalObj.BigNumber = BigNumber;\r\n    }\r\n})(this);"],"mappings":"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"}