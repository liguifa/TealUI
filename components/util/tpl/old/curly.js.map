{"version":3,"file":"curly.js","sourceRoot":"../../../..","sources":["components/util/tpl/old/curly.ts"],"sourcesContent":["// /**\r\n//  * @fileOverview 简单但完整的模板引擎。\r\n//  * @author xuld@vip.qq.com\r\n//  */\r\n\r\n// // 为了支持 foreach 模板使用的 Object.each 函数。\r\n// import {each} from '../../lang/object';\r\n\r\n// /**\r\n//  * 表示一个 JavaScript 模板解析器。\r\n//  * @remark\r\n//  * #### 模板语法介绍\r\n//  *\r\n//  * 在模板中，可以直接书写最终生成的文本内容，并通过 { 和 } 在文本中插入逻辑代码。\r\n//  * 如：\r\n//  *      hello {if a > 0} world {/if}\r\n//  * 其中 {if a > 0} 和 {end} 是模板内部使用的逻辑表达式，用于控制模板的输出内容。\r\n//  *\r\n//  * ##### 常量\r\n//  * 模板内任意字符串都会原样输出，模板引擎只解析 {} 内的数据。模板内使用 {{ 代替 { 本身，使用 }} 代替 } 本身。\r\n//  *\r\n//  * ##### if 语句\r\n//  *\r\n//  *      {if 表达式}\r\n//  *          这里是 if 成功输出的文本\r\n//  *      {else if 表达式}\r\n//  *          这里是 else if 成功输出的文本\r\n//  *      {else}\r\n//  *          这里是 else 成功输出的文本\r\n//  *      {/if}\r\n//  *\r\n//  * ##### for 语句\r\n//  *      {for(var key in obj)}\r\n//  *          {循环输出的内容}\r\n//  *      {end}\r\n//  *\r\n//  *\r\n//  *      {for(var i = 0; i < arr.length; i++)}\r\n//  *          {循环输出的内容}\r\n//  *      {/for}\r\n//  *\r\n//  * ##### while 语句\r\n//  *      {while 表达式}\r\n//  *          {循环输出的内容}\r\n//  *      {/while}\r\n//  *\r\n//  * ##### continue/break 语句\r\n//  * 在循环时可使用此类语句终止循环。\r\n//  *      {continue}\r\n//  *\r\n//  *\r\n//  *      {break}\r\n//  *\r\n//  * ##### function 语句\r\n//  *      {function fn(a, b)}\r\n//  *          {函数主体}\r\n//  *      {/function}\r\n//  *\r\n//  * ##### var 语句\r\n//  *      {var a = 1, b = 2}\r\n//  *\r\n//  * ##### void 语句\r\n//  * `void` 语句用于执行代码，但不会在模板字符串内添加任何内容。\r\n//  *\r\n//  *      {void alert(\"alert\")}\r\n//  *\r\n//  * ##### foreach 语句\r\n//  *    为了简化循环操作，模板引擎提供了快速遍历类数组和对象的方式。\r\n//  *\r\n//  *      {foreach item in obj}\r\n//  *          {循环输出的内容}\r\n//  *      {/foreach}\r\n//  *\r\n//  *\r\n//  *      {foreach item, index in obj}\r\n//  *          {循环输出的内容}\r\n//  *      {/foreach}\r\n//  *\r\n//  *    foreach 语句同时支持类数组和对象，item 都表示遍历的值，index 表示数组索引或对象键。\r\n//  *    在 foreach 语句中，可以使用 $target 获取当前遍历的对象，使用 $key 获取循环变量值。\r\n//  *    存在嵌套 foreach 时，它们分别表示最近的循环对应的值，如需跨语句，可使用变量保存。\r\n//  *    在 foreach 语句中，可以使用 {break} 和 {continue} 控制流程。\r\n//  *      {foreach item in obj}\r\n//  *          {if $key == 0}\r\n//  *              {continue}\r\n//  *          {/if}\r\n//  *          {foreach item2 in item}\r\n//  *              {item2}\r\n//  *          {/foreach}\r\n//  *      {/foreach}\r\n//  *\r\n//  * ##### 内置宏变量\r\n//  * 在模板内部可以直接使用一些内置宏变量。\r\n//  *\r\n//  * - `$data`: 被解析的数据。\r\n//  * - `$key`: foreach 语句中获取最近的循环索引或键。\r\n//  * - `$target`: foreach 语句中获取最近的循环对象。\r\n//  *\r\n//  */\r\n// module CurlyTpl {\r\n\r\n//     /**\r\n//      * 存储所有模板编译缓存。\r\n//      */\r\n//     export var _cache: { [key: string]: ((data: any) => string) } = { __proto__: null };\r\n\r\n//     /**\r\n//      * 编译指定的模板。\r\n//      * @param tplSource 要编译的模板文本。\r\n//      * @param cacheKey 表示当前模板的缓存键，相同缓存键的模板可避免被重复编译以提高解析速度。\r\n//      */\r\n//     export function compile(tplSource: string, cacheKey?: string) {\r\n//         const func = CurlyTpl._cache[cacheKey = cacheKey || tplSource];\r\n//         if (func) return func;\r\n\r\n//         // 存储已编译的代码段。\r\n//         let compiledCode = 'var $output=\"\"\\n';\r\n\r\n//         // 下一个 { 的开始位置。\r\n//         let blockStart = -1;\r\n\r\n//         // 上一个 } 的结束位置。\r\n//         let blockEnd = -1;\r\n\r\n//         // 存储所有代码语句块。\r\n//         let commandsStack = [];\r\n\r\n//         // 纯文本各部分。\r\n//         let commandText;\r\n\r\n//         // 标准命令。\r\n//         let commandMatch;\r\n\r\n//         // 标准命令。\r\n//         let commandName;\r\n\r\n//         // 每次处理一个 {} 的部分。\r\n//         while ((blockStart = tplSource.indexOf('{', blockStart + 1)) >= 0) {\r\n\r\n//             // 忽略 {{。\r\n//             if (tplSource[blockStart + 1] === '{') {\r\n//                 blockStart++;\r\n//                 continue;\r\n//             }\r\n\r\n//             // 处理 { 之前的内容。\r\n//             compiledCode += getSourceAsPlainText(blockEnd + 1, blockStart);\r\n\r\n//             // 从  blockStart 处搜索 }\r\n//             blockEnd = blockStart;\r\n\r\n//             // 搜索 }。\r\n//             while (true) {\r\n//                 blockEnd = tplSource.indexOf('}', blockEnd + 1);\r\n\r\n//                 // 处理不存在 } 的情况。\r\n//                 if (blockEnd == -1) {\r\n//                     throw new SyntaxError(\"缺少 “}”\\r\\n在“\" + tplSource.substr(blockStart) + \"”范围\");\r\n//                 }\r\n\r\n//                 // 忽略 }}。\r\n//                 if (tplSource[blockEnd + 1] !== '}') {\r\n//                     break;\r\n//                 }\r\n\r\n//                 blockEnd++;\r\n//             }\r\n\r\n//             // 处理 {} 之间的内容。\r\n//             commandText = getSource(blockStart + 1, blockEnd);\r\n\r\n//             commandMatch = /^\\s*(\\/?)(\\w+)\\b/.exec(commandText) || [];\r\n\r\n//             if (commandMatch[1]) {\r\n//                 if (!commandsStack.length || commandsStack[commandsStack.length - 1] !== commandMatch[2]) {\r\n//                     throw new SyntaxError(\"模板编译错误：发现多余的\" + commandText + \"\\r\\n在“\" + tplSource.substring(blockStart - 20, blockStart) + \"”附近\");\r\n//                 }\r\n//                 compiledCode += commandsStack.pop() === 'foreach' ? '},this)\\n' : '}\\n';\r\n//             } else {\r\n\r\n//                 switch (commandName = commandMatch[2]) {\r\n//                     case 'foreach':\r\n//                         commandMatch = /^\\s*foreach\\s*(\\(([\\s\\S]*)\\)|[\\s\\S]*)\\s*$/.exec(commandText);\r\n//                         commandText = commandMatch[2] || commandMatch[1];\r\n//                         commandMatch = /^\\s*(?:var)?\\s*([\\w$]+)(?:\\s*,\\s*([\\w$]+))?\\s+in\\s+([\\s\\S]*)\\s*$/.exec(commandText);\r\n//                         if (!commandMatch) {\r\n//                             throw new SyntaxError(\"模板编译错误：foreach 格式不合法，应为 foreach item in object：\\r\\n在“\" + commandText + \"”附近\");\r\n//                         }\r\n//                         compiledCode += 'Object.each(' + commandMatch[3] + ',function(' + commandMatch[1] + ',' + (commandMatch[2] || '$key') + ',$target){\\n';\r\n//                         commandsStack.push(commandName);\r\n//                         break;\r\n//                     case 'if':\r\n//                     case 'for':\r\n//                     case 'while':\r\n//                     case 'switch':\r\n//                     case 'with':\r\n//                         // 追加括号。\r\n//                         commandText = commandName + '(' + commandText.substr(commandMatch[0].length).replace(/^\\s*\\(/, '').replace(/\\)\\s*$/, '') + ')';\r\n\r\n//                     // 不需要 break 。\r\n//                     case 'function':\r\n//                         compiledCode += commandText + '{\\n';\r\n//                         commandsStack.push(commandName);\r\n//                         break;\r\n//                     case 'else':\r\n//                         commandMatch = /^\\s*else\\s+if\\b(.*)/.exec(commandText);\r\n//                         compiledCode += commandMatch ? '}else if(' + commandMatch[1].replace(/^\\s*\\(/, '').replace(/\\)\\s*$/, '') + ') {\\n' : '}else{\\n';\r\n//                         break;\r\n//                     case 'var':\r\n//                     case 'void':\r\n//                     case 'case':\r\n//                     case 'return':\r\n//                         compiledCode += commandText + '\\n';\r\n//                         break;\r\n//                     case 'break':\r\n//                     case 'continue':\r\n//                         compiledCode += commandsStack[commandsStack.length - 1] === 'foreach' ? commandName.length === 5 ? 'return false\\n' : 'return\\n' : (commandText + '\\n');\r\n//                         break;\r\n//                     default:\r\n//                         compiledCode += (/;\\s*$/.test(commandText) ? commandText : ('$output+=' + commandText)) + '\\n';\r\n//                 }\r\n\r\n//             }\r\n\r\n//             // 更新下一次开始查找的位置。\r\n//             blockStart = blockEnd;\r\n\r\n//         }\r\n\r\n//         if (commandsStack.length) {\r\n//             throw new SyntaxError('模板编译错误：缺少 {/' + commandsStack[commandsStack.length - 1] + '}\\r\\n源码：' + compiledCode);\r\n//         }\r\n\r\n//         // 处理最后一个 } 之后的内容。\r\n//         compiledCode += getSourceAsPlainText(blockEnd + 1, tplSource.length) + 'return $output';\r\n\r\n//         try {\r\n//             return CurlyTpl._cache[cacheKey] = new Function(\"$data\", compiledCode) as ((data: any) => string);\r\n//         } catch (e) {\r\n//             throw new SyntaxError('模板编译错误：' + e.message + '\\r\\n源码：' + compiledCode);\r\n//         }\r\n\r\n//         // 获取模板指定部分并解析为字符串。\r\n//         function getSourceAsPlainText(start: number, end: number) {\r\n//             return '$output+=\"' + getSource(start, end).replace(/[\\r\\n\\\"\\\\]/g, specialChar => ({\r\n//                 '\"': '\\\\\"',\r\n//                 '\\n': '\\\\n',\r\n//                 '\\r': '\\\\r',\r\n//                 '\\\\': '\\\\\\\\'\r\n//             })[specialChar]) + '\"\\n';\r\n//         }\r\n\r\n//         // 获取模板指定部分。\r\n//         function getSource(start: number, end: number) {\r\n//             return tplSource.substring(start, end).replace(/([{}])\\1/g, '$1');\r\n//         }\r\n\r\n//     }\r\n\r\n//     /**\r\n//      * 使用指定的数据解析模板，并返回生成的内容。\r\n//      * @param tplSource 要解析的模板文本。\r\n//      * @param data 传递给模板的数据对象。在模板中使用 $data 变量接收此参数。\r\n//      * @param cacheKey = tplSource 表示当前模板的键，主要用于缓存。\r\n//      * @return 返回解析后的模板内容。\r\n//      * @example CurlyTpl.parse(\"{if $data === 1}OK{/if}\", 1) // \"OK\"\r\n//      */\r\n//     export function parse(tplSource: string, data: any, cacheKey?: string) {\r\n//         return CurlyTpl.compile(tplSource, cacheKey).call(data, data);\r\n//     }\r\n\r\n// }\r\n"],"mappings":"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"}