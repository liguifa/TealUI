{"version":3,"file":"asp.js","sourceRoot":"../../../..","sources":["components/util/tpl/old/asp.ts"],"sourcesContent":["// /**\r\n//  * @fileOverview 经典 ASP 语法的模板引擎。\r\n//  * @author xuld@vip.qq.com\r\n//  */\r\n\r\n// /**\r\n//  * 表示一个 JavaScript 模板解析器。\r\n//  * @remark\r\n//  * #### 模板语法介绍\r\n//  * 模板中可以直接书写普通文本，并通过 `<%` 和 `%>` 插入 JavaScript 代码段，如：\r\n//  * ```\r\n//  * hello <%if (a > 0) %> world <% } %>\r\n//  * ```\r\n//  * 其中 `<%if (a > 0) %>` 和 `<% } %>` 是模板内部使用的逻辑表达式，用于控制模板的输出内容。\r\n//  *\r\n//  * 如果需要将代码段的返回值放入模板，需要使用 `<%= ... %>` 语法，如：\r\n//  * hello <%= true ? \" world\" : \"\" %>\r\n//  *\r\n//  */\r\n// module AspTpl {\r\n\r\n//     /**\r\n//      * 存储所有模板编译缓存。\r\n//      */\r\n//     export var _cache: { [key: string]: ((data: any) => string) } = { __proto__: null };\r\n\r\n//     /**\r\n//      * 设置代码段的开始标记。\r\n//      */\r\n//     export var tplStart = \"<%\";\r\n\r\n//     /**\r\n//      * 设置代码段的结束标记。\r\n//      */\r\n//     export var tplEnd = \"%>\";\r\n\r\n//     /**\r\n//      * 编译指定的模板。\r\n//      * @param tplSource 要编译的模板文本。\r\n//      * @param cacheKey 表示当前模板的缓存键，相同缓存键的模板可避免被重复编译以提高解析速度。\r\n//      * @example AspTpl.compile(\"<%if($data === 1) { %>OK<% } %>\", 1) // function($data){ ... }\r\n//      */\r\n//     export function compile(tplSource: string, cacheKey?: string) {\r\n//         const func = AspTpl._cache[cacheKey = cacheKey || tplSource];\r\n//         if (func) return func;\r\n\r\n//         // 存储已编译的代码段。\r\n//         let compiledCode = 'var $output=\"\";with($data||{}){\\n';\r\n\r\n//         // 下一个 <% 的开始位置。\r\n//         let blockStart = 0;\r\n\r\n//         // 上一个 %> 的结束位置。\r\n//         let blockEnd = 0;\r\n\r\n//         // 每次处理一个 <% 的部分。\r\n//         while ((blockStart = tplSource.indexOf(AspTpl.tplStart, blockStart)) >= 0) {\r\n\r\n//             // 处理 <% 之前的内容。\r\n//             compiledCode += getSourceAsPlainText(blockEnd, blockStart);\r\n\r\n//             // 从  blockStart 处搜索 %>\r\n//             blockEnd = tplSource.indexOf(AspTpl.tplEnd, blockStart + 2);\r\n//             if (blockEnd == -1) {\r\n//                 blockEnd = tplSource.length;\r\n//             }\r\n\r\n//             // 处理 <%%> 之间的内容。\r\n//             let commandText = getSource(blockStart + AspTpl.tplStart.length, blockEnd);\r\n//             if (/^=/.test(commandText)) {\r\n//                 commandText = \"$output +\" + commandText;\r\n//             }\r\n//             compiledCode += commandText + '\\n';\r\n\r\n//             // 更新下一次开始查找的位置。\r\n//             blockStart = blockEnd += AspTpl.tplEnd.length;\r\n\r\n//         }\r\n\r\n//         // 处理最后一个 } 之后的内容。\r\n//         compiledCode += getSourceAsPlainText(blockEnd, tplSource.length) + '};return $output';\r\n\r\n//         try {\r\n//             return AspTpl._cache[cacheKey] = new Function(\"$data\", compiledCode) as ((data: any) => string);\r\n//         } catch (e) {\r\n//             throw new SyntaxError('模板编译错误：' + e.message + '\\r\\n源码：' + compiledCode);\r\n//         }\r\n\r\n//         // 获取模板指定部分并解析为字符串。\r\n//         function getSourceAsPlainText(start: number, end: number) {\r\n//             return '$output+=\"' + getSource(start, end).replace(/[\\r\\n\\\"\\\\]/g, specialChar => ({\r\n//                 '\"': '\\\\\"',\r\n//                 '\\n': '\\\\n',\r\n//                 '\\r': '\\\\r',\r\n//                 '\\\\': '\\\\\\\\'\r\n//             })[specialChar]) + '\"\\n';\r\n//         }\r\n\r\n//         // 获取模板指定部分。\r\n//         function getSource(start: number, end: number) {\r\n//             return tplSource.substring(start, end);\r\n//         }\r\n\r\n//     }\r\n\r\n//     /**\r\n//      * 使用指定的数据解析模板，并返回生成的内容。\r\n//      * @param tplSource 要解析的模板文本。\r\n//      * @param data 传递给模板的数据对象。在模板中使用 $data 变量接收此参数。\r\n//      * @param cacheKey = tplSource 表示当前模板的键，主要用于缓存。\r\n//      * @return 返回解析后的模板内容。 \r\n//      * @example AspTpl.parse(\"<%if(this === 1) { %>OK<% } %>\", 1) // \"OK\"\r\n//      */\r\n//     export function parse(tplSource: string, data: any, cacheKey?: string) {\r\n//         return AspTpl.compile(tplSource, cacheKey).call(data, data);\r\n//     }\r\n\r\n// }\r\n\r\n// export = AspTpl;\r\n"],"mappings":"AAAA,MAAM;AACN,mCAAmC;AACnC,6BAA6B;AAC7B,MAAM;AAEN,MAAM;AACN,4BAA4B;AAC5B,aAAa;AACb,iBAAiB;AACjB,wDAAwD;AACxD,SAAS;AACT,yCAAyC;AACzC,SAAS;AACT,iEAAiE;AACjE,KAAK;AACL,8CAA8C;AAC9C,uCAAuC;AACvC,KAAK;AACL,MAAM;AACN,kBAAkB;AAElB,UAAU;AACV,qBAAqB;AACrB,UAAU;AACV,2FAA2F;AAE3F,UAAU;AACV,qBAAqB;AACrB,UAAU;AACV,kCAAkC;AAElC,UAAU;AACV,qBAAqB;AACrB,UAAU;AACV,gCAAgC;AAEhC,UAAU;AACV,kBAAkB;AAClB,oCAAoC;AACpC,6DAA6D;AAC7D,iGAAiG;AACjG,UAAU;AACV,sEAAsE;AACtE,wEAAwE;AACxE,iCAAiC;AAEjC,wBAAwB;AACxB,kEAAkE;AAElE,2BAA2B;AAC3B,8BAA8B;AAE9B,2BAA2B;AAC3B,4BAA4B;AAE5B,4BAA4B;AAC5B,uFAAuF;AAEvF,8BAA8B;AAC9B,0EAA0E;AAE1E,sCAAsC;AACtC,2EAA2E;AAC3E,oCAAoC;AACpC,+CAA+C;AAC/C,gBAAgB;AAEhB,gCAAgC;AAChC,0FAA0F;AAC1F,4CAA4C;AAC5C,2DAA2D;AAC3D,gBAAgB;AAChB,kDAAkD;AAElD,+BAA+B;AAC/B,6DAA6D;AAE7D,YAAY;AAEZ,6BAA6B;AAC7B,iGAAiG;AAEjG,gBAAgB;AAChB,+GAA+G;AAC/G,wBAAwB;AACxB,uFAAuF;AACvF,YAAY;AAEZ,8BAA8B;AAC9B,sEAAsE;AACtE,mGAAmG;AACnG,8BAA8B;AAC9B,+BAA+B;AAC/B,+BAA+B;AAC/B,+BAA+B;AAC/B,wCAAwC;AACxC,YAAY;AAEZ,uBAAuB;AACvB,2DAA2D;AAC3D,sDAAsD;AACtD,YAAY;AAEZ,QAAQ;AAER,UAAU;AACV,+BAA+B;AAC/B,oCAAoC;AACpC,sDAAsD;AACtD,sDAAsD;AACtD,8BAA8B;AAC9B,4EAA4E;AAC5E,UAAU;AACV,+EAA+E;AAC/E,uEAAuE;AACvE,QAAQ;AAER,IAAI;AAEJ,mBAAmB"}