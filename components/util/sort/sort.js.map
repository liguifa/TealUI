{"version":3,"file":"sort.js","sourceRoot":"../../..","sources":["components/util/sort/sort.ts"],"sourcesContent":["/**\r\n * 表示一个类数组列表。\r\n */\r\nexport interface ArrayList<T> {\r\n\r\n    /**\r\n     * 获取当前列表的长度。\r\n     */\r\n    readonly length: number;\r\n\r\n    /**\r\n     * 获取或设置指定索引的值。\r\n     */\r\n    [index: number]: T;\r\n\r\n}\r\n\r\n/**\r\n * 对类数组进行冒泡排序。\r\n * @param iteratable 要排序的类数组。\r\n * @param comparer 用于排序时确定优先级的函数。函数的参数为：\r\n * - x：比较的第一个参数。\r\n * - y：比较的第二个参数。\r\n * - 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引。\r\n * @param end 结束排序的索引。\r\n * @desc 冒泡排序是稳定排序算法。\r\n * @example bubbleSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n*/\r\nexport function bubbleSort<T>(iteratable: ArrayList<T>, comparer = (x: T, y: T) => x < y, start = 0, end = iteratable.length) {\r\n    for (; start < end; start++) {\r\n        for (let i = start + 1; i < end; i++) {\r\n            if (comparer(iteratable[i], iteratable[start])) {\r\n                const t = iteratable[start];\r\n                iteratable[start] = iteratable[i];\r\n                iteratable[i] = t;\r\n            }\r\n        }\r\n    }\r\n    return iteratable;\r\n}\r\n\r\n/**\r\n * 对类数组进行快速排序。\r\n * @param iteratable 要排序的类数组。\r\n * @param comparer 用于排序时确定优先级的函数。函数的参数为：\r\n * - x：比较的第一个参数。\r\n * - y：比较的第二个参数。\r\n * - 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引。\r\n * @param end 结束排序的索引。\r\n * @desc 快速排序不是稳定排序算法。\r\n * @example quickSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n*/\r\nexport function quickSort<T>(iteratable: ArrayList<T>, comparer = (x: T, y: T) => x < y, start = 0, end = iteratable.length) {\r\n    if (start < end) {\r\n        const t = iteratable[start];\r\n        let low = start;\r\n        let high = end;\r\n        do {\r\n            while (high > low && !comparer(iteratable[high], t)) {\r\n                high--;\r\n            }\r\n            if (low < high) {\r\n                iteratable[low++] = iteratable[high];\r\n            }\r\n            while (low < high && comparer(iteratable[low], t)) {\r\n                low++;\r\n            }\r\n            if (low < high) {\r\n                iteratable[high--] = iteratable[low];\r\n            }\r\n        } while (low < high);\r\n        iteratable[low] = t;\r\n        quickSort(iteratable, comparer, start, high - 1);\r\n        quickSort(iteratable, comparer, high + 1, end);\r\n    }\r\n    return iteratable;\r\n}\r\n\r\n/**\r\n * 对类数组进行希尔排序。\r\n * @param iteratable 要排序的类数组。\r\n * @param comparer 用于排序时确定优先级的函数。函数的参数为：\r\n * - x：比较的第一个参数。\r\n * - y：比较的第二个参数。\r\n * - 如果返回 true，则说明 *x* 应该排在 *y* 之前。否则 *x* 应该排在 *y* 之后。\r\n * @param start 开始排序的索引。\r\n * @param end 结束排序的索引。\r\n * @desc 希尔排序不是稳定排序算法。\r\n * @example shellSort([1, 3, 5, 4, 3]) // [1, 3, 3, 4, 5]\r\n */\r\nexport function shellSort<T>(iteratable: ArrayList<T>, comparer = (x: T, y: T) => x < y, start = 0, end = iteratable.length) {\r\n    for (let gap = (end - start) >> 1; gap > 0; gap = gap >> 1) {\r\n        for (let i = gap + start; i < end; i++) {\r\n            const t = iteratable[i];\r\n            let j = i;\r\n            for (; (j - gap >= start) && comparer(t, iteratable[j - gap]); j -= gap) {\r\n                iteratable[j] = iteratable[j - gap];\r\n            }\r\n            iteratable[j] = t;\r\n        }\r\n    }\r\n    return iteratable;\r\n}\r\n"],"mappings":"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"}