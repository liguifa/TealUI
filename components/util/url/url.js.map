{"version":3,"file":"url.js","sourceRoot":"../../..","sources":["components/util/url/url.ts"],"sourcesContent":["import { parseQuery, formatQuery } from \"util/query\";\r\n\r\n// Reference: RFC 3986, RFC 1808, RFC 2396\r\n\r\n// protocols that never have a hostname.\r\nconst hostlessProtocol: any = {\r\n    \"javascript\": true,\r\n    \"javascript:\": true\r\n};\r\n// protocols that always contain a // bit.\r\nconst slashedProtocol: any = {\r\n    \"http\": true,\r\n    \"http:\": true,\r\n    \"https\": true,\r\n    \"https:\": true,\r\n    \"ftp\": true,\r\n    \"ftp:\": true,\r\n    \"gopher\": true,\r\n    \"gopher:\": true,\r\n    \"file\": true,\r\n    \"file:\": true\r\n};\r\n\r\n/**\r\n * 表示一个地址。\r\n * @see https://github.com/nodejs/node/blob/master/lib/url.js\r\n */\r\nexport default class Url {\r\n\r\n    /**\r\n     * 协议部分。如 \"http:\"。\r\n     */\r\n    protocol: string;\r\n\r\n    /**\r\n     * 判断当前地址是否包含分隔符(//)。\r\n     */\r\n    slashes: boolean;\r\n\r\n    /**\r\n     * 验证部分。如 \"name:password\"。\r\n     */\r\n    auth: string;\r\n\r\n    /**\r\n     * 主机部分。如 \"localhost:80\"。\r\n     */\r\n    host: string;\r\n\r\n    /**\r\n     * 端口部分。如 \"80\"。\r\n     */\r\n    port: string;\r\n\r\n    /**\r\n     * 主机名部分。如 \"localhost\"。\r\n     */\r\n    hostname: string;\r\n\r\n    /**\r\n     * 哈希值部分。如 \"#hash\"。\r\n     */\r\n    hash: string;\r\n\r\n    /**\r\n     * 查询参数部分。如 \"?q=1\"。\r\n     */\r\n    search: string;\r\n\r\n    /**\r\n     * 查询参数部分。如 {q: 1}。\r\n     */\r\n    query: string | { [key: string]: string };\r\n\r\n    /**\r\n     * 路径名部分。如 \"/foo/a.html?q=1\"。\r\n     */\r\n    pathname: string;\r\n\r\n    /**\r\n     * 路径部分。如 \"/foo/a.html\"。\r\n     */\r\n    path: string;\r\n\r\n    /**\r\n     * 完整地址。如 \"http://localhost:80/foo/a.html?q=1\"。\r\n     */\r\n    href: string;\r\n\r\n    /**\r\n     * 解析指定的地址并填充信息到当前地址。\r\n     * @param url 要解析的地址。\r\n     * @param parseQueryString 是否解析查询字符串。\r\n     * @param slashesDenoteHost 允许 \"/\" 作为主机名解析。\r\n     */\r\n    parse(url: string, parseQueryString?: boolean, slashesDenoteHost?: boolean) {\r\n\r\n        // Copy chrome, IE, opera backslash-handling behavior.\r\n        // Back slashes before the query string get converted to forward slashes\r\n        // See: https://code.google.com/p/chromium/issues/detail?id=25916\r\n        let hasHash = false;\r\n        let start = -1;\r\n        let end = -1;\r\n        let rest = \"\";\r\n        let lastPos = 0;\r\n        let i = 0;\r\n        for (let inWs = false, split = false; i < url.length; ++i) {\r\n            const code = url.charCodeAt(i);\r\n\r\n            // Find first and last non-whitespace characters for trimming\r\n            const isWs = code === 32 /* */ ||\r\n                code === 9 /*\\t*/ ||\r\n                code === 13 /*\\r*/ ||\r\n                code === 10 /*\\n*/ ||\r\n                code === 12 /*\\f*/ ||\r\n                code === 160 /*\\u00A0*/ ||\r\n                code === 65279 /*\\uFEFF*/;\r\n            if (start === -1) {\r\n                if (isWs)\r\n                    continue;\r\n                lastPos = start = i;\r\n            } else {\r\n                if (inWs) {\r\n                    if (!isWs) {\r\n                        end = -1;\r\n                        inWs = false;\r\n                    }\r\n                } else if (isWs) {\r\n                    end = i;\r\n                    inWs = true;\r\n                }\r\n            }\r\n\r\n            // Only convert backslashes while we haven't seen a split character\r\n            if (!split) {\r\n                switch (code) {\r\n                    case 35: // '#'\r\n                        hasHash = true;\r\n                    // Fall through\r\n                    case 63: // '?'\r\n                        split = true;\r\n                        break;\r\n                    case 92: // '\\\\'\r\n                        if (i - lastPos > 0)\r\n                            rest += url.slice(lastPos, i);\r\n                        rest += \"/\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                }\r\n            } else if (!hasHash && code === 35/*#*/) {\r\n                hasHash = true;\r\n            }\r\n        }\r\n\r\n        // Check if string was non-empty (including strings with only whitespace)\r\n        if (start !== -1) {\r\n            if (lastPos === start) {\r\n                // We didn't convert any backslashes\r\n\r\n                if (end === -1) {\r\n                    if (start === 0)\r\n                        rest = url;\r\n                    else\r\n                        rest = url.slice(start);\r\n                } else {\r\n                    rest = url.slice(start, end);\r\n                }\r\n            } else if (end === -1 && lastPos < url.length) {\r\n                // We converted some backslashes and have only part of the entire string\r\n                rest += url.slice(lastPos);\r\n            } else if (end !== -1 && lastPos < end) {\r\n                // We converted some backslashes and have only part of the entire string\r\n                rest += url.slice(lastPos, end);\r\n            }\r\n        }\r\n\r\n        if (!slashesDenoteHost && !hasHash) {\r\n            // Try fast path regexp\r\n            const simplePath = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/.exec(rest);\r\n            if (simplePath) {\r\n                this.path = rest;\r\n                this.href = rest;\r\n                this.pathname = simplePath[1];\r\n                if (simplePath[2]) {\r\n                    this.search = simplePath[2];\r\n                    this.query = parseQueryString ? parseQuery(this.search.slice(1)) : this.search.slice(1);\r\n                } else if (parseQueryString) {\r\n                    this.search = \"\";\r\n                    this.query = {};\r\n                }\r\n                return this;\r\n            }\r\n        }\r\n\r\n        const match = /^([a-z0-9.+-]+:)/i.exec(rest);\r\n        let proto;\r\n        let lowerProto;\r\n        if (match) {\r\n            proto = match[0];\r\n            this.protocol = lowerProto = proto.toLowerCase();\r\n            rest = rest.slice(proto.length);\r\n        }\r\n\r\n        // figure out if it's got a host\r\n        // user@server is *always* interpreted as a hostname, and url\r\n        // resolution will treat //foo/bar as host=foo,path=bar because that's\r\n        // how the browser resolves relative URLs.\r\n        let slashes;\r\n        if (slashesDenoteHost || proto || /^\\/\\/[^@\\/]+@[^@\\/]+/.test(rest)) {\r\n            slashes = rest.charCodeAt(0) === 47 /*/*/ &&\r\n                rest.charCodeAt(1) === 47 /*/*/;\r\n            if (slashes && !(proto && hostlessProtocol[proto])) {\r\n                rest = rest.slice(2);\r\n                this.slashes = true;\r\n            }\r\n        }\r\n\r\n        if (!hostlessProtocol[proto as any] && (slashes || (proto && !slashedProtocol[proto]))) {\r\n\r\n            // there's a hostname.\r\n            // the first instance of /, ?, ;, or # ends the host.\r\n            //\r\n            // If there is an @ in the hostname, then non-host chars *are* allowed\r\n            // to the left of the last @ sign, unless some host-ending character\r\n            // comes *before* the @-sign.\r\n            // URLs are obnoxious.\r\n            //\r\n            // ex:\r\n            // http://a@b@c/ => user:a@b host:c\r\n            // http://a@b?@c => user:a host:b path:/?@c\r\n\r\n            // v0.12 TODO(isaacs): This is not quite how Chrome does things.\r\n            // Review our test case against browsers more comprehensively.\r\n\r\n            let hostEnd = -1;\r\n            let atSign = -1;\r\n            let nonHost = -1;\r\n            for (i = 0; i < rest.length; ++i) {\r\n                switch (rest.charCodeAt(i)) {\r\n                    case 9:   // '\\t'\r\n                    case 10:  // '\\n'\r\n                    case 13:  // '\\r'\r\n                    case 32:  // ' '\r\n                    case 34:  // '\"'\r\n                    case 37:  // '%'\r\n                    case 39:  // '\\''\r\n                    case 59:  // ';'\r\n                    case 60:  // '<'\r\n                    case 62:  // '>'\r\n                    case 92:  // '\\\\'\r\n                    case 94:  // '^'\r\n                    case 96:  // '`'\r\n                    case 123: // '{'\r\n                    case 124: // '|'\r\n                    case 125: // '}'\r\n                        // Characters that are never ever allowed in a hostname from RFC 2396\r\n                        if (nonHost === -1)\r\n                            nonHost = i;\r\n                        break;\r\n                    case 35: // '#'\r\n                    case 47: // '/'\r\n                    case 63: // '?'\r\n                        // Find the first instance of any host-ending characters\r\n                        if (nonHost === -1)\r\n                            nonHost = i;\r\n                        hostEnd = i;\r\n                        break;\r\n                    case 64: // '@'\r\n                        // At this point, either we have an explicit point where the\r\n                        // auth portion cannot go past, or the last @ char is the decider.\r\n                        atSign = i;\r\n                        nonHost = -1;\r\n                        break;\r\n                }\r\n                if (hostEnd !== -1)\r\n                    break;\r\n            }\r\n            start = 0;\r\n            if (atSign !== -1) {\r\n                this.auth = decodeURIComponent(rest.slice(0, atSign));\r\n                start = atSign + 1;\r\n            }\r\n            if (nonHost === -1) {\r\n                this.host = rest.slice(start);\r\n                rest = \"\";\r\n            } else {\r\n                this.host = rest.slice(start, nonHost);\r\n                rest = rest.slice(nonHost);\r\n            }\r\n\r\n            // pull out port.\r\n            this.parseHost();\r\n\r\n            // we've indicated that there is a hostname,\r\n            // so even if it's empty, it has to be present.\r\n            if (typeof this.hostname !== \"string\")\r\n                this.hostname = \"\";\r\n\r\n            const hostname = this.hostname;\r\n\r\n            // if hostname begins with [ and ends with ]\r\n            // assume that it's an IPv6 address.\r\n            const ipv6Hostname = hostname.charCodeAt(0) === 91 /*[*/ &&\r\n                hostname.charCodeAt(hostname.length - 1) === 93 /*]*/;\r\n\r\n            // validate a little.\r\n            if (!ipv6Hostname) {\r\n                const result = validateHostname(this, rest, hostname);\r\n                if (result !== undefined)\r\n                    rest = result;\r\n            }\r\n\r\n            // 主机名最长 255\r\n            if (this.hostname.length > 255) {\r\n                this.hostname = \"\";\r\n            } else {\r\n                // hostnames are always lower case.\r\n                this.hostname = this.hostname.toLowerCase();\r\n            }\r\n\r\n            // Do Not Support.\r\n            // if (!ipv6Hostname) {\r\n            //    // IDNA Support: Returns a punycoded representation of \"domain\".\r\n            //    // It only converts parts of the domain name that\r\n            //    // have non-ASCII characters, i.e. it doesn't matter if\r\n            //    // you call it with a domain that already is ASCII-only.\r\n            //    this.hostname = punycode.toASCII(this.hostname);\r\n            // }\r\n\r\n            const p = this.port ? \":\" + this.port : \"\";\r\n            const h = this.hostname || \"\";\r\n            this.host = h + p;\r\n\r\n            // strip [ and ] from the hostname\r\n            // the host field still retains them, though\r\n            if (ipv6Hostname) {\r\n                this.hostname = this.hostname.slice(1, -1);\r\n                if (rest[0] !== \"/\") {\r\n                    rest = \"/\" + rest;\r\n                }\r\n            }\r\n        }\r\n\r\n        // protocols that can allow \"unsafe\" and \"unwise\" chars.\r\n        const unsafeProtocol: any = {\r\n            \"javascript\": true,\r\n            \"javascript:\": true\r\n        };\r\n\r\n        // now rest is set to the post-host stuff.\r\n        // chop off any delim chars.\r\n        if (!unsafeProtocol[lowerProto as any]) {\r\n            // First, make 100% sure that any \"autoEscape\" chars get\r\n            // escaped, even if encodeURIComponent doesn't think they\r\n            // need to be.\r\n            const result = autoEscapeStr(rest);\r\n            if (result !== undefined)\r\n                rest = result;\r\n        }\r\n\r\n        let questionIdx = -1;\r\n        let hashIdx = -1;\r\n        for (i = 0; i < rest.length; ++i) {\r\n            const code = rest.charCodeAt(i);\r\n            if (code === 35 /*#*/) {\r\n                this.hash = rest.slice(i);\r\n                hashIdx = i;\r\n                break;\r\n            } else if (code === 63 /*?*/ && questionIdx === -1) {\r\n                questionIdx = i;\r\n            }\r\n        }\r\n\r\n        if (questionIdx !== -1) {\r\n            if (hashIdx === -1) {\r\n                this.search = rest.slice(questionIdx);\r\n                this.query = rest.slice(questionIdx + 1);\r\n            } else {\r\n                this.search = rest.slice(questionIdx, hashIdx);\r\n                this.query = rest.slice(questionIdx + 1, hashIdx);\r\n            }\r\n            if (parseQueryString) {\r\n                this.query = parseQuery(this.query as string);\r\n            }\r\n        } else if (parseQueryString) {\r\n            // no query string, but parseQueryString still requested\r\n            this.search = \"\";\r\n            this.query = {};\r\n        }\r\n\r\n        const firstIdx = (questionIdx !== -1 &&\r\n            (hashIdx === -1 || questionIdx < hashIdx)\r\n            ? questionIdx\r\n            : hashIdx);\r\n        if (firstIdx === -1) {\r\n            if (rest.length > 0)\r\n                this.pathname = rest;\r\n        } else if (firstIdx > 0) {\r\n            this.pathname = rest.slice(0, firstIdx);\r\n        }\r\n        if (slashedProtocol[lowerProto as any] &&\r\n            this.hostname && !this.pathname) {\r\n            this.pathname = \"/\";\r\n        }\r\n\r\n        // to support http.request\r\n        if (this.pathname || this.search) {\r\n            const p = this.pathname || \"\";\r\n            const s = this.search || \"\";\r\n            this.path = p + s;\r\n        }\r\n\r\n        // finally, reconstruct the href based on what has been validated.\r\n        this.href = this.toString();\r\n        return this;\r\n\r\n\r\n        function autoEscapeStr(rest: any) {\r\n            let newRest = \"\";\r\n            let lastPos = 0;\r\n            for (let i = 0; i < rest.length; ++i) {\r\n                // Automatically escape all delimiters and unwise characters from RFC 2396\r\n                // Also escape single quotes in case of an XSS attack\r\n                switch (rest.charCodeAt(i)) {\r\n                    case 9:   // '\\t'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%09\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 10:  // '\\n'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%0A\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 13:  // '\\r'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%0D\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 32:  // ' '\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%20\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 34:  // '\"'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%22\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 39:  // '\\''\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%27\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 60:  // '<'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%3C\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 62:  // '>'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%3E\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 92:  // '\\\\'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%5C\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 94:  // '^'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%5E\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 96:  // '`'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%60\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 123: // '{'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%7B\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 124: // '|'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%7C\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                    case 125: // '}'\r\n                        if (i - lastPos > 0)\r\n                            newRest += rest.slice(lastPos, i);\r\n                        newRest += \"%7D\";\r\n                        lastPos = i + 1;\r\n                        break;\r\n                }\r\n            }\r\n            if (lastPos === 0)\r\n                return;\r\n            if (lastPos < rest.length)\r\n                return newRest + rest.slice(lastPos);\r\n            else\r\n                return newRest;\r\n        }\r\n\r\n        function validateHostname(self: Url, rest: string, hostname: string) {\r\n            for (let i = 0, lastPos: any; i <= hostname.length; ++i) {\r\n                let code: any;\r\n                if (i < hostname.length)\r\n                    code = hostname.charCodeAt(i);\r\n                if (code === 46 /*.*/ || i === hostname.length) {\r\n                    if (i - lastPos > 0) {\r\n                        if (i - lastPos > 63) {\r\n                            self.hostname = hostname.slice(0, lastPos + 63);\r\n                            return \"/\" + hostname.slice(lastPos + 63) + rest;\r\n                        }\r\n                    }\r\n                    lastPos = i + 1;\r\n                    continue;\r\n                } else if ((code >= 48 /*0*/ && code <= 57 /*9*/) ||\r\n                    (code >= 97 /*a*/ && code <= 122 /*z*/) ||\r\n                    code === 45 /*-*/ ||\r\n                    (code >= 65 /*A*/ && code <= 90 /*Z*/) ||\r\n                    code === 43 /*+*/ ||\r\n                    code === 95 /*_*/ ||\r\n                    code > 127) {\r\n                    continue;\r\n                }\r\n                // Invalid host character\r\n                self.hostname = hostname.slice(0, i);\r\n                if (i < hostname.length)\r\n                    return \"/\" + hostname.slice(i) + rest;\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 解析主机名部分。\r\n     */\r\n    private parseHost() {\r\n        let host = this.host;\r\n        const match = /:[0-9]*$/.exec(host);\r\n        if (match) {\r\n            const port = match[0];\r\n            if (port !== \":\") {\r\n                this.port = port.slice(1);\r\n            }\r\n            host = host.slice(0, host.length - port.length);\r\n        }\r\n        if (host) this.hostname = host;\r\n    }\r\n\r\n    /**\r\n     * 解析指定的地址并填充信息到当前地址。\r\n     * @param url 要解析的地址。\r\n     * @param parseQueryString 是否解析查询字符串。\r\n     * @param slashesDenoteHost 允许 \"/\" 作为主机名解析。\r\n     */\r\n    static parse(url: string | Url, parseQueryString?: boolean, slashesDenoteHost?: boolean) {\r\n        if (url instanceof Url) return url;\r\n\r\n        const u = new Url();\r\n        u.parse(url as string, parseQueryString, slashesDenoteHost);\r\n        return u;\r\n    }\r\n\r\n    /**\r\n     * 转换当前地址为字符串。\r\n     */\r\n    toString() {\r\n        let auth = this.auth || \"\";\r\n        if (auth) {\r\n            auth = encodeURIComponent(auth).replace(/%3A/g, \":\");\r\n            auth += \"@\";\r\n        }\r\n\r\n        let protocol = this.protocol || \"\";\r\n        let pathname = this.pathname || \"\";\r\n        let hash = this.hash || \"\";\r\n        let host: string | undefined;\r\n        let query = \"\";\r\n\r\n        if (this.host) {\r\n            host = auth + this.host;\r\n        } else if (this.hostname) {\r\n            host = auth + (this.hostname.indexOf(\":\") === -1 ?\r\n                this.hostname :\r\n                \"[\" + this.hostname + \"]\");\r\n            if (this.port) {\r\n                host += \":\" + this.port;\r\n            }\r\n        }\r\n\r\n        if (this.query !== null && typeof this.query === \"object\")\r\n            query = formatQuery(this.query);\r\n\r\n        let search = this.search || (query && (\"?\" + query)) || \"\";\r\n\r\n        if (protocol && protocol.charCodeAt(protocol.length - 1) !== 58/*:*/)\r\n            protocol += \":\";\r\n\r\n        let newPathname = \"\";\r\n        let lastPos = 0;\r\n        for (let i = 0; i < pathname.length; ++i) {\r\n            switch (pathname.charCodeAt(i)) {\r\n                case 35: // '#'\r\n                    if (i - lastPos > 0)\r\n                        newPathname += pathname.slice(lastPos, i);\r\n                    newPathname += \"%23\";\r\n                    lastPos = i + 1;\r\n                    break;\r\n                case 63: // '?'\r\n                    if (i - lastPos > 0)\r\n                        newPathname += pathname.slice(lastPos, i);\r\n                    newPathname += \"%3F\";\r\n                    lastPos = i + 1;\r\n                    break;\r\n            }\r\n        }\r\n        if (lastPos > 0) {\r\n            if (lastPos !== pathname.length)\r\n                pathname = newPathname + pathname.slice(lastPos);\r\n            else\r\n                pathname = newPathname;\r\n        }\r\n\r\n        // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\r\n        // unless they had them to begin with.\r\n        if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== undefined) {\r\n            host = \"//\" + (host || \"\");\r\n            if (pathname && pathname.charCodeAt(0) !== 47/*/*/)\r\n                pathname = \"/\" + pathname;\r\n        } else if (!host) {\r\n            host = \"\";\r\n        }\r\n\r\n        search = search.replace(\"#\", \"%23\");\r\n\r\n        if (hash && hash.charCodeAt(0) !== 35/*#*/) hash = \"#\" + hash;\r\n        if (search && search.charCodeAt(0) !== 63/*?*/) search = \"?\" + search;\r\n\r\n        return protocol + host + pathname + search + hash;\r\n    }\r\n\r\n    /**\r\n     * 格式化指定的对象为标准地址。\r\n     * @param obj 要格式化的对象。\r\n     */\r\n    static format(obj: any) {\r\n        // ensure it's an object, and not a string url.\r\n        // If it's an obj, this is a no-op.\r\n        // this way, you can call url_format() on strings\r\n        // to clean up potentially wonky urls.\r\n        if (typeof obj === \"string\") obj = Url.parse(obj);\r\n\r\n        else if (typeof obj !== \"object\" || obj === null)\r\n            throw new TypeError('Parameter \"urlObj\" must be an object, not ' + obj === null ? \"null\" : typeof obj);\r\n\r\n        else if (!(obj instanceof Url)) return Url.prototype.toString.call(obj) as string;\r\n\r\n        return obj.toString() as string;\r\n    }\r\n\r\n    /**\r\n     * 基于当前地址解析指定的相对地址，返回绝对地址。\r\n     * @param relative 要解析的相对地址。\r\n     */\r\n    resolve(relative: string) {\r\n        return this.resolveObject(relative).toString();\r\n    }\r\n\r\n    /**\r\n     * 基于指定地址解析指定的相对地址，返回绝对地址。\r\n     * @param source 要解析的基地址。\r\n     * @param relative 要解析的相对地址。\r\n     * @return 返回解析后的地址。\r\n     */\r\n    static resolve(source: string | Url, relative: string) {\r\n        return Url.parse(source, false, true).resolve(relative);\r\n    }\r\n\r\n    /**\r\n     * 基于当前地址解析指定的相对地址，返回绝对地址。\r\n     * @param relative 要解析的相对地址。\r\n     */\r\n    resolveObject(relative: string | Url) {\r\n\r\n        if (typeof relative === \"string\") {\r\n            const rel = new Url();\r\n            rel.parse(relative as string, false, true);\r\n            relative = rel;\r\n        }\r\n\r\n        const result = new Url();\r\n        for (const tkey in this as any) {\r\n            (result as any)[tkey] = (this as any)[tkey];\r\n        }\r\n\r\n        result.hash = (relative as Url).hash;\r\n\r\n        // if the relative url is empty, then there's nothing left to do here.\r\n        if ((relative as Url).href === \"\") {\r\n            result.href = (relative as Url).toString();\r\n            return result;\r\n        }\r\n\r\n        // hrefs like //foo/bar always cut to the protocol.\r\n        if ((relative as Url).slashes && !(relative as Url).protocol) {\r\n            // take everything except the protocol from relative\r\n            for (const k in result) {\r\n                if (k !== \"protocol\")\r\n                    (result as any)[k] = (relative as any)[k];\r\n            }\r\n\r\n            // urlParse appends trailing / to urls like http://www.example.com\r\n            if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\r\n                result.path = result.pathname = \"/\";\r\n            }\r\n\r\n            result.href = (result as Url).toString();\r\n            return result;\r\n        }\r\n\r\n        if ((relative as Url).protocol && (relative as Url).protocol !== result.protocol) {\r\n            // if it's a known url protocol, then changing\r\n            // the protocol does weird things\r\n            // first, if it's not file:, then we MUST have a host,\r\n            // and if there was a path\r\n            // to begin with, then we MUST have a path.\r\n            // if it is file:, then the host is dropped,\r\n            // because that's known to be hostless.\r\n            // anything else is assumed to be absolute.\r\n            if (!slashedProtocol[(relative as Url).protocol]) {\r\n                for (const k in result) {\r\n                    (result as any)[k] = (relative as any)[k];\r\n                }\r\n                return result;\r\n            }\r\n\r\n            result.protocol = (relative as Url).protocol;\r\n            if (!(relative as Url).host &&\r\n                !/^file:?$/.test((relative as Url).protocol) &&\r\n                !hostlessProtocol[(relative as Url).protocol]) {\r\n                const relPath = ((relative as Url).pathname || \"\").split(\"/\");\r\n                while (relPath.length && !((relative as Url).host = relPath.shift()!));\r\n                if (!(relative as Url).host) (relative as Url).host = \"\";\r\n                if (!(relative as Url).hostname) (relative as Url).hostname = \"\";\r\n                if (relPath[0] !== \"\") relPath.unshift(\"\");\r\n                if (relPath.length < 2) relPath.unshift(\"\");\r\n                result.pathname = relPath.join(\"/\");\r\n            } else {\r\n                result.pathname = (relative as Url).pathname;\r\n            }\r\n            result.search = (relative as Url).search;\r\n            result.query = (relative as Url).query;\r\n            result.host = (relative as Url).host || \"\";\r\n            result.auth = (relative as Url).auth;\r\n            result.hostname = (relative as Url).hostname || (relative as Url).host;\r\n            result.port = (relative as Url).port;\r\n            // to support http.request\r\n            if (result.pathname || result.search) {\r\n                const p = result.pathname || \"\";\r\n                const s = result.search || \"\";\r\n                result.path = p + s;\r\n            }\r\n            result.slashes = result.slashes || (relative as Url).slashes;\r\n            result.href = result.toString();\r\n            return result;\r\n        }\r\n\r\n        const isSourceAbs = (result.pathname && result.pathname.charAt(0) === \"/\");\r\n        const isRelAbs = (\r\n            (relative as Url).host ||\r\n            (relative as Url).pathname && (relative as Url).pathname.charAt(0) === \"/\"\r\n        );\r\n        let mustEndAbs: any = (isRelAbs || isSourceAbs ||\r\n            (result.host && (relative as Url).pathname));\r\n        const removeAllDots = mustEndAbs;\r\n        let srcPath = result.pathname && result.pathname.split(\"/\") || [];\r\n        const relPath = (relative as Url).pathname && (relative as Url).pathname.split(\"/\") || [];\r\n        const psychotic = result.protocol && !slashedProtocol[result.protocol];\r\n\r\n        // if the url is a non-slashed url, then relative\r\n        // links like ../.. should be able\r\n        // to crawl up to the hostname, as well.  This is strange.\r\n        // result.protocol has already been set by now.\r\n        // Later on, put the first path part into the host field.\r\n        if (psychotic) {\r\n            result.hostname = \"\";\r\n            result.port = null!;\r\n            if (result.host) {\r\n                if (srcPath[0] === \"\") srcPath[0] = result.host;\r\n                else srcPath.unshift(result.host);\r\n            }\r\n            result.host = \"\";\r\n            if ((relative as Url).protocol) {\r\n                (relative as Url).hostname = null!;\r\n                (relative as Url).port = null!;\r\n                (relative as Url).auth = null!;\r\n                if ((relative as Url).host) {\r\n                    if (relPath[0] === \"\") relPath[0] = (relative as Url).host;\r\n                    else relPath.unshift((relative as Url).host);\r\n                }\r\n                (relative as Url).host = null!;\r\n            }\r\n            mustEndAbs = mustEndAbs && (relPath[0] === \"\" || srcPath[0] === \"\");\r\n        }\r\n\r\n        if (isRelAbs) {\r\n            // it's absolute.\r\n            if ((relative as Url).host || (relative as Url).host === \"\") {\r\n                result.host = (relative as Url).host;\r\n                result.auth = null!;\r\n            }\r\n            if ((relative as Url).hostname || (relative as Url).hostname === \"\") {\r\n                result.hostname = (relative as Url).hostname;\r\n                result.auth = null!;\r\n            }\r\n            result.search = (relative as Url).search;\r\n            result.query = (relative as Url).query;\r\n            srcPath = relPath;\r\n            // fall through to the dot-handling below.\r\n        } else if (relPath.length) {\r\n            // it's relative\r\n            // throw away the existing file, and take the new path instead.\r\n            if (!srcPath) srcPath = [];\r\n            srcPath.pop();\r\n            srcPath = srcPath.concat(relPath);\r\n            result.search = (relative as Url).search;\r\n            result.query = (relative as Url).query;\r\n        } else if (relative.search !== null && relative.search !== undefined) {\r\n            // just pull out the search.\r\n            // like href='?foo'.\r\n            // Put this after the other two cases because it simplifies the booleans\r\n            if (psychotic) {\r\n                result.hostname = result.host = srcPath.shift()!;\r\n                // occasionally the auth can get stuck only in host\r\n                // this especially happens in cases like\r\n                // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n                const authInHost = result.host && result.host.indexOf(\"@\") > 0 &&\r\n                    result.host.split(\"@\");\r\n                if (authInHost) {\r\n                    result.auth = authInHost.shift()!;\r\n                    result.host = result.hostname = authInHost.shift()!;\r\n                }\r\n            }\r\n            result.search = (relative as Url).search;\r\n            result.query = (relative as Url).query;\r\n            // to support http.request\r\n            if (result.pathname !== null || result.search !== null) {\r\n                result.path = (result.pathname ? result.pathname : \"\") +\r\n                    (result.search ? result.search : \"\");\r\n            }\r\n            result.href = result.toString();\r\n            return result;\r\n        }\r\n\r\n        if (!srcPath.length) {\r\n            // no path at all.  easy.\r\n            // we've already handled the other stuff above.\r\n            result.pathname = null!;\r\n            // to support http.request\r\n            if (result.search) {\r\n                result.path = \"/\" + result.search;\r\n            } else {\r\n                result.path = null!;\r\n            }\r\n            result.href = result.toString();\r\n            return result;\r\n        }\r\n\r\n        // if a url ENDs in . or .., then it must get a trailing slash.\r\n        // however, if it ends in anything else non-slashy,\r\n        // then it must NOT get a trailing slash.\r\n        let last = srcPath.slice(-1)[0];\r\n        const hasTrailingSlash = (\r\n            (result.host || (relative as Url).host || srcPath.length > 1) &&\r\n            (last === \".\" || last === \"..\") || last === \"\");\r\n\r\n        // strip single dots, resolve double dots to parent dir\r\n        // if the path tries to go above the root, `up` ends up > 0\r\n        let up = 0;\r\n        for (let i = srcPath.length; i >= 0; i--) {\r\n            last = srcPath[i];\r\n            if (last === \".\") {\r\n                spliceOne(srcPath, i);\r\n            } else if (last === \"..\") {\r\n                spliceOne(srcPath, i);\r\n                up++;\r\n            } else if (up) {\r\n                spliceOne(srcPath, i);\r\n                up--;\r\n            }\r\n        }\r\n\r\n        // if the path is allowed to go above the root, restore leading ..s\r\n        if (!mustEndAbs && !removeAllDots) {\r\n            for (; up--; up) {\r\n                srcPath.unshift(\"..\");\r\n            }\r\n        }\r\n\r\n        if (mustEndAbs && srcPath[0] !== \"\" &&\r\n            (!srcPath[0] || srcPath[0].charAt(0) !== \"/\")) {\r\n            srcPath.unshift(\"\");\r\n        }\r\n\r\n        if (hasTrailingSlash && (srcPath.join(\"/\").substr(-1) !== \"/\")) {\r\n            srcPath.push(\"\");\r\n        }\r\n\r\n        const isAbsolute = srcPath[0] === \"\" ||\r\n            (srcPath[0] && srcPath[0].charAt(0) === \"/\");\r\n\r\n        // put the host back\r\n        if (psychotic) {\r\n            result.hostname = result.host = isAbsolute ? \"\" :\r\n                srcPath.length ? srcPath.shift()! : \"\";\r\n            // occasionally the auth can get stuck only in host\r\n            // this especially happens in cases like\r\n            // url.resolveObject('mailto:local1@domain1', 'local2@domain2')\r\n            const authInHost = result.host && result.host.indexOf(\"@\") > 0 &&\r\n                result.host.split(\"@\");\r\n            if (authInHost) {\r\n                result.auth = authInHost.shift()!;\r\n                result.host = result.hostname = authInHost.shift()!;\r\n            }\r\n        }\r\n\r\n        mustEndAbs = mustEndAbs || (result.host && srcPath.length);\r\n\r\n        if (mustEndAbs && !isAbsolute) {\r\n            srcPath.unshift(\"\");\r\n        }\r\n\r\n        if (!srcPath.length) {\r\n            result.pathname = null!;\r\n            result.path = null!;\r\n        } else {\r\n            result.pathname = srcPath.join(\"/\");\r\n        }\r\n\r\n        // to support request.http\r\n        if (result.pathname !== null || result.search !== null) {\r\n            result.path = (result.pathname ? result.pathname : \"\") +\r\n                (result.search ? result.search : \"\");\r\n        }\r\n        result.auth = (relative as Url).auth || result.auth;\r\n        result.slashes = result.slashes || (relative as Url).slashes;\r\n        result.href = result.toString();\r\n        return result;\r\n\r\n        // About 1.5x faster than the two-arg version of Array#splice().\r\n        function spliceOne(list: any[], index: number) {\r\n            for (let i = index, k = i + 1; k < list.length; i += 1, k += 1)\r\n                list[i] = list[k];\r\n            list.pop();\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * 基于指定地址解析指定的相对地址，返回绝对地址。\r\n     * @param source 要解析的基地址。\r\n     * @param relative 要解析的相对地址。\r\n     * @return 返回解析后的地址。\r\n     */\r\n    static resolveObject(source: string | Url, relative: string | Url) {\r\n        if (!source) return relative;\r\n        return Url.parse(source, false, true).resolveObject(relative);\r\n    }\r\n\r\n}\r\n"],"mappings":"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"}