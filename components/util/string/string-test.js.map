{"version":3,"file":"string-test.js","sourceRoot":"../../..","sources":["components/util/string/string-test.ts"],"sourcesContent":["import * as assert from \"assert\";\r\nimport * as string from \"./string\";\r\n\r\nexport function formatTest() {\r\n    assert.strictEqual(string.format(\"我是{0}，不是{1}\", \"小黑\", \"大白\"), \"我是小黑，不是大白\");\r\n    assert.strictEqual(string.format(\"我是{xiaohei}，不是{dabai}\", { xiaohei: \"小黑\", dabai: \"大白\" }), \"我是小黑，不是大白\");\r\n    assert.strictEqual(string.format(\"在字符串内使用两个{{和}}避免被转换\"), \"在字符串内使用两个{和}避免被转换\");\r\n\tassert.strictEqual(string.format(\"{0} {1}  {2}\", 1, 2 , 3), \"1 2  3\", \"格式化{序号}\" );\r\n\tassert.strictEqual(string.format(\"{a} {b}  {c}\", {a: 1, b: 2, c: 3} ), \"1 2  3\", \"格式化{字段}\");\r\n\tassert.strictEqual(string.format(\"{2} {2}  {2}\", 1, 2 , 3), \"3 3  3\", \"重复序号\");\r\n\tassert.strictEqual(string.format(\"{2}\" ), \"\", \"不存在的序号\");\r\n\tassert.strictEqual(string.format(\"{{}} {0}\", 1), \"{} 1\", \"格式化的字符串内有 { 和  }\");\r\n}\r\n\r\nexport function isStringTest() {\r\n    assert.strictEqual(string.isString(\"\"), true);\r\n}\r\n\r\nexport function ellipsisTest() {\r\n    assert.strictEqual(string.ellipsis(\"1234567\", 6), \"123...\");\r\n    assert.strictEqual(string.ellipsis(\"1234567\", 9), \"1234567\");\r\n}\r\n\r\nexport function ellipsisByWordTest() {\r\n    assert.strictEqual(string.ellipsisByWord(\"abc def\", 6), \"abc...\");\r\n}\r\n\r\nexport function containsWordTest() {\r\n    assert.strictEqual(string.containsWord(\"abc ab\", \"ab\"), true);\r\n}\r\n\r\nexport function removeLeadingWhiteSpacesTest() {\r\n    assert.strictEqual(string.removeLeadingWhiteSpaces(\"  a\"), \"a\");\r\n}\r\n\r\nexport function replaceAllTest() {\r\n    assert.strictEqual(string.replaceAll(\"1121\", \"1\", \"3\"), \"3323\");\r\n}\r\n\r\nexport function cleanTest() {\r\n    assert.strictEqual(string.clean(\" a b   \"), \"ab\");\r\n}\r\n\r\nexport function byteLengthTest() {\r\n    assert.strictEqual(string.byteLength(\"a中文\"), 5);\r\n}\r\n\r\nexport function uniqueTest() {\r\n    assert.strictEqual(string.unique(\"aabbdscc\"), \"abdsc\");\r\n}\r\n\r\nexport function capitalizeTest() {\r\n    assert.strictEqual(string.capitalize(\"qwert\"), \"Qwert\");\r\n}\r\n\r\nexport function uncapitalizeTest() {\r\n    assert.strictEqual(string.uncapitalize(\"Qwert\"), \"qwert\");\r\n}\r\n\r\nexport function toCamelCaseTest() {\r\n    assert.strictEqual(string.toCamelCase(\"font-size\"), \"fontSize\");\r\n    assert.strictEqual(string.toCamelCase(\"foo-bar\"), \"fooBar\");\r\n    assert.strictEqual(string.toCamelCase(\"foo-bar-baz\"), \"fooBarBaz\");\r\n    assert.strictEqual(string.toCamelCase(\"girl-u-want\"), \"girlUWant\");\r\n    assert.strictEqual(string.toCamelCase(\"the-4th-dimension\"), \"the4thDimension\");\r\n    assert.strictEqual(string.toCamelCase(\"-o-tannenbaum\"), \"OTannenbaum\");\r\n    assert.strictEqual(string.toCamelCase(\"-moz-illa\"), \"MozIlla\");\r\n}\r\n\r\nexport function leftTest() {\r\n    assert.strictEqual(string.left(\"abcde\", 3), \"abc\");\r\n}\r\n\r\nexport function rightTest() {\r\n    assert.strictEqual(string.right(\"abcde\", 3), \"cde\");\r\n}\r\n"],"mappings":"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"}