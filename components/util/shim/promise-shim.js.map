{"version":3,"file":"promise-shim.js","sourceRoot":"../../..","sources":["components/util/shim/promise-shim.js"],"sourcesContent":["/**\r\n * 表示一个确认对象。\r\n * @since ES6\r\n * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n */\r\nPromise = this.Promise2 || class {\r\n\r\n    /**\r\n     * 当前确认对象的状态。0：正在等待。1：已解析。2：已阻止。\r\n     */\r\n    _status;\r\n\r\n    /**\r\n     * 存储相关的数据。如果状态为正在等待则为回调函数列表。如果状态为已解析则为返回值，如果为已阻止则为错误原因。\r\n     */\r\n    _data;\r\n\r\n    /**\r\n     * 初始化新的确认对象。\r\n     * @param resolver 解析函数。\r\n     */\r\n    constructor(resolver) {\r\n        const resolve = value => {\r\n            Promise._fulfill(this, value, value => {\r\n                this._set(1, value);\r\n            }, reject);\r\n        };\r\n        const reject = reason => {\r\n            this._set(2, reason);\r\n        };\r\n        try {\r\n            resolver(resolve, reject);\r\n        } catch (e) {\r\n            reject(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 处理一个解析值。\r\n     * @param promise 当前确认对象。\r\n     * @param value 已解析的值。\r\n     * @param resolve 解析完成的回调函数。\r\n     * @param reject 解析失败的回调函数。\r\n     */\r\n    static _fulfill(promise, value, resolve, reject) {\r\n        let called = false;\r\n        try {\r\n            const then = value && (typeof value === \"object\" || typeof value === \"function\") && value.then;\r\n            if (typeof then === \"function\") {\r\n                if (promise === value) {\r\n                    reject(new TypeError(\"Chaining cycle detected for promise\"));\r\n                } else {\r\n                    then.call(value, value => {\r\n                        if (!called) {\r\n                            called = true;\r\n                            Promise._fulfill(promise, value, resolve, reject);\r\n                        }\r\n                    }, reason => {\r\n                        if (!called) {\r\n                            called = true;\r\n                            return reject(reason);\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                resolve(value);\r\n            }\r\n        } catch (e) {\r\n            if (!called) {\r\n                called = true;\r\n                reject(e);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 设置当前确认对象的状态和数据。\r\n     * @param status 解析的状态。可以是 1 或 2。\r\n     * @param data 解析的数据。\r\n     */\r\n    _set(status, data) {\r\n        if (!this._status) {\r\n            setTimeout(() => {\r\n                if (!this._status) {\r\n                    this._status = status;\r\n                    const callbacks = this._data;\r\n                    this._data = data;\r\n                    if (callbacks) {\r\n                        for (const callback of callbacks) {\r\n                            callback(status, data);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加当前确认对象已解析后的回掉函数。\r\n     * @param onFulfilled 对象已解析后执行。\r\n     * @param onRejected 对象已阻止后执行。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\r\n     */\r\n    then(onFulfilled, onRejected) {\r\n        const result = new Promise((resolve, reject) => {\r\n            const end = (status, data) => {\r\n                try {\r\n                    if (status === 2 && typeof onRejected !== \"function\") {\r\n                        reject(data);\r\n                    } else {\r\n                        Promise._fulfill(result, status === 2 ? onRejected(data) : typeof onFulfilled === \"function\" ? onFulfilled(data) : data, resolve, reject);\r\n                    }\r\n                } catch (e) {\r\n                    return reject(e);\r\n                }\r\n            };\r\n            if (this._status) {\r\n                setTimeout(end, 0, this._status, this._data);\r\n            } else {\r\n                this._data = this._data || [];\r\n                this._data.push(end);\r\n            }\r\n        });\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 添加当前确认对象已阻止后的回掉函数。\r\n     * @param onRejected 对象已阻止后执行。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\r\n     */\r\n    catch(onRejected) {\r\n        return this.then(null, onRejected);\r\n    }\r\n\r\n    /**\r\n     * 创建一个新确认对象，该对象等待所有确认对象都已确认。\r\n     * @param promises 要等待的所有确认对象。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\r\n     */\r\n    static all(promises) {\r\n        return new Promise((resolve, reject) => {\r\n            let counter = promises.length;\r\n            const resolvedValues = new Array(counter);\r\n            if (counter) {\r\n                for (let i = 0; i < counter; i++) {\r\n                    Promise.resolve(promises[i]).then(value => {\r\n                        resolvedValues[i] = value\r\n                        if (--counter === 0) {\r\n                            return resolve(resolvedValues);\r\n                        }\r\n                    }, reject);\r\n                }\r\n            } else {\r\n                resolve(resolvedValues);\r\n            }\r\n        })\r\n    }\r\n\r\n    /**\r\n     * 创建一个新确认对象，该对象等待所有确认对象任一个已确认。\r\n     * @param promises 要等待的所有确认对象。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\r\n     */\r\n    static race(promises) {\r\n        return new Promise((resolve, reject) => {\r\n            for (let i = 0; i < promises.length; i++) {\r\n                Promise.resolve(promises[i]).then(resolve, reject);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建一个已解析的确认对象。\r\n     * @param value 解析的值。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\r\n     */\r\n    static resolve(value) {\r\n        return new Promise(resolve => {\r\n            resolve(value)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 创建一个已阻止的确认对象。\r\n     * @param value 错误原因。\r\n     * @return 返回新确认对象。\r\n     * @since ES6\r\n     * @see https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\r\n     */\r\n    static reject(reason) {\r\n        return new Promise((resolve, reject) => {\r\n            reject(reason);\r\n        });\r\n    }\r\n\r\n}\r\n"],"mappings":"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"}