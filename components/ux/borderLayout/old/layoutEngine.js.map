{"version":3,"file":"layoutEngine.js","sourceRoot":"../../../..","sources":["components/ux/borderLayout/old/layoutEngine.ts"],"sourcesContent":["// #todo\r\n\r\n\r\ntypeof include === \"function\" && include(\"../utility/class\");\r\n\r\nvar LayoutEngine = Base.extend({\r\n\r\n    /**\r\n     * 初始化指定容器的布局。\r\n     */\r\n    initLayout: function(container) {\r\n\r\n    },\r\n\r\n    /**\r\n     * 取消初始化指定容器的布局。\r\n     */\r\n    uninitLayout: function(container) {\r\n\r\n    },\r\n\r\n    _layoutLockCount: 0,\r\n\r\n    /**\r\n     * 临时挂起当前布局引擎的逻辑。\r\n     */\r\n    suspendLayout: function() {\r\n        this._layoutLockCount++;\r\n    },\r\n\r\n    /**\r\n     * 恢复挂起当前布局引擎的逻辑。\r\n     */\r\n    resumeLayout: function(performLayout) {\r\n        if (--this._layoutLockCount === 0 && performLayout !== false) {\r\n            this.performLayout();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 当被子类重写时，负责执行当前布局引擎的逻辑。\r\n     */\r\n    performLayout: function() {\r\n        \r\n    }\r\n\r\n});\r\n"],"mappings":"AAAA,QAAQ;AAGR,OAAO,OAAO,KAAK,UAAU,IAAI,OAAO,CAAC,kBAAkB,CAAC,CAAC;AAE7D,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC;IAE3B;;OAEG;IACH,UAAU,EAAE,UAAS,SAAS;IAE9B,CAAC;IAED;;OAEG;IACH,YAAY,EAAE,UAAS,SAAS;IAEhC,CAAC;IAED,gBAAgB,EAAE,CAAC;IAEnB;;OAEG;IACH,aAAa,EAAE;QACX,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;IAED;;OAEG;IACH,YAAY,EAAE,UAAS,aAAa;QAChC,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,gBAAgB,KAAK,CAAC,IAAI,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,aAAa,EAAE,CAAC;QACzB,CAAC;IACL,CAAC;IAED;;OAEG;IACH,aAAa,EAAE;IAEf,CAAC;CAEJ,CAAC,CAAC"}