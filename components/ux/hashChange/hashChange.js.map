{"version":3,"file":"hashChange.js","sourceRoot":"../../..","sources":["components/ux/hashChange/hashChange.ts"],"sourcesContent":["/**\r\n * 设置哈希值改变事件的回调。\r\n * @param callback 哈希值改变的事件回调。\r\n * @example hashChange(function(){ alert(\"哈希值改变为：\" + hash()); });\r\n */\r\nexport default function hashChange(callback: () => void) {\r\n    window.addEventListener(\"hashchange\", callback);\r\n    callback.call(window);\r\n\r\n    // 并不是所有浏览器都支持 hashchange 事件，\r\n    // 当浏览器不支持的时候，使用自定义的监视器，每隔50ms监听当前hash是否被修改。\r\n    if (!(\"onhashchange\" in window) || (document as any).documentMode < 8) {\r\n        var currentHash = hash();\r\n        setInterval(function () {\r\n            const newHash = hash();\r\n            if (currentHash !== newHash) {\r\n                currentHash = newHash;\r\n                callback();\r\n            }\r\n        }, 50);\r\n    }\r\n}\r\n\r\n/**\r\n * 获取当前页面的哈希值（不含 # 号）。\r\n * @return 返回当前页面的哈希值。如果不存在则返回 null。\r\n * @example hash()\r\n */\r\nexport function hash() {\r\n    const href = location.href;\r\n    const index = href.indexOf(\"#\");\r\n    return index >= 0 ? href.substr(index + 1) : null;\r\n}\r\n"],"mappings":";;IAAA;;;;OAIG;IACH,oBAAmC,QAAoB;QACnD,MAAM,CAAC,gBAAgB,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;QAChD,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAEtB,6BAA6B;QAC7B,4CAA4C;QAC5C,EAAE,CAAC,CAAC,CAAC,CAAC,cAAc,IAAI,MAAM,CAAC,IAAK,QAAgB,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;YACpE,IAAI,WAAW,GAAG,IAAI,EAAE,CAAC;YACzB,WAAW,CAAC;gBACR,MAAM,OAAO,GAAG,IAAI,EAAE,CAAC;gBACvB,EAAE,CAAC,CAAC,WAAW,KAAK,OAAO,CAAC,CAAC,CAAC;oBAC1B,WAAW,GAAG,OAAO,CAAC;oBACtB,QAAQ,EAAE,CAAC;gBACf,CAAC;YACL,CAAC,EAAE,EAAE,CAAC,CAAC;QACX,CAAC;IACL,CAAC;IAhBD,6BAgBC;IAED;;;;OAIG;IACH;QACI,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;QAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACtD,CAAC;IAJD,oBAIC"}