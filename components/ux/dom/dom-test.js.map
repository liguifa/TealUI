{"version":3,"file":"dom-test.js","sourceRoot":"../../..","sources":["components/ux/dom/dom-test.ts"],"sourcesContent":["// import * as assert from \"assert\";\r\n// import * as dom from \"./dom\";\r\n\r\n// export function beforeEach() {\r\n//     document.getElementById(\"qunit-fixture\")!.innerHTML = `<p id=\"firstp\">See <a id=\"simon1\" href=\"http://simon.incutio.com/archive/2003/03/25/#getElementsBySelector\" rel=\"bookmark\">this blog entry</a> for more information.</p>\r\n// \t\t<p id=\"ap\">\r\n// \t\t\tHere are some links in a normal paragraph: <a id=\"google\" href=\"http://www.google.com/\" title=\"Google!\">Google</a>,\r\n// \t\t\t<a id=\"groups\" href=\"http://groups.google.com/\" class=\"GROUPS\">Google Groups (Link)</a>.\r\n// \t\t\tThis link has <code><a href=\"http://smin\" id=\"anchor1\">class=\"blog\"</a></code>:\r\n// \t\t\t<a href=\"http://diveintomark.org/\" class=\"blog\" hreflang=\"en\" id=\"mark\">diveintomark</a>\r\n\r\n// \t\t</p>\r\n// \t\t<div id=\"foo\">\r\n// \t\t\t<p id=\"sndp\">Everything inside the red border is inside a div with <code>id=\"foo\"</code>.</p>\r\n// \t\t\t<p lang=\"en\" id=\"en\">This is a normal link: <a id=\"yahoo\" href=\"http://www.yahoo.com/\" class=\"blogTest\">Yahoo</a></p>\r\n// \t\t\t<p id=\"sap\">This link has <code><a href=\"#2\" id=\"anchor2\">class=\"blog\"</a></code>: <a href=\"http://simon.incutio.com/\" class=\"blog link\" id=\"simon\">Simon Willison's Weblog</a></p>\r\n\r\n// \t\t</div>\r\n// \t\t<span id=\"name+value\"></span>\r\n// \t\t<p id=\"first\">Try them out:</p>\r\n// \t\t<ul id=\"firstUL\"></ul>\r\n// \t\t<ol id=\"empty\"></ol>\r\n// \t\t<form id=\"form\" action=\"formaction\">\r\n// \t\t\t<label for=\"action\" id=\"label-for\">Action:</label>\r\n// \t\t\t<input type=\"text\" name=\"action\" value=\"Test\" id=\"text1\" maxlength=\"30\"/>\r\n// \t\t\t<input type=\"text\" name=\"text2\" value=\"Test\" id=\"text2\" disabled=\"disabled\"/>\r\n// \t\t\t<input type=\"radio\" name=\"radio1\" id=\"radio1\" value=\"on\"/>\r\n\r\n// \t\t\t<input type=\"radio\" name=\"radio2\" id=\"radio2\" checked=\"checked\"/>\r\n// \t\t\t<input type=\"checkbox\" name=\"check\" id=\"check1\" checked=\"checked\"/>\r\n// \t\t\t<input type=\"checkbox\" id=\"check2\" value=\"on\"/>\r\n\r\n// \t\t\t<input type=\"hidden\" name=\"hidden\" id=\"hidden1\"/>\r\n// \t\t\t<input type=\"text\" style=\"display:none;\" name=\"foo[bar]\" id=\"hidden2\"/>\r\n\r\n// \t\t\t<input type=\"text\" id=\"name\" name=\"name\" value=\"name\" />\r\n// \t\t\t<input type=\"search\" id=\"search\" name=\"search\" value=\"search\" />\r\n\r\n// \t\t\t<button id=\"button\" name=\"button\" type=\"button\">Button</button>\r\n\r\n// \t\t\t<textarea id=\"area1\" maxlength=\"30\">foobar</textarea>\r\n\r\n// \t\t\t<select name=\"select1\" id=\"select1\">\r\n// \t\t\t\t<option id=\"option1a\" class=\"emptyopt\" value=\"\">Nothing</option>\r\n// \t\t\t\t<option id=\"option1b\" value=\"1\">1</option>\r\n// \t\t\t\t<option id=\"option1c\" value=\"2\">2</option>\r\n// \t\t\t\t<option id=\"option1d\" value=\"3\">3</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"select2\" id=\"select2\">\r\n// \t\t\t\t<option id=\"option2a\" class=\"emptyopt\" value=\"\">Nothing</option>\r\n// \t\t\t\t<option id=\"option2b\" value=\"1\">1</option>\r\n// \t\t\t\t<option id=\"option2c\" value=\"2\">2</option>\r\n// \t\t\t\t<option id=\"option2d\" selected=\"selected\" value=\"3\">3</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"select3\" id=\"select3\" multiple=\"multiple\">\r\n// \t\t\t\t<option id=\"option3a\" class=\"emptyopt\" value=\"\">Nothing</option>\r\n// \t\t\t\t<option id=\"option3b\" selected=\"selected\" value=\"1\">1</option>\r\n// \t\t\t\t<option id=\"option3c\" selected=\"selected\" value=\"2\">2</option>\r\n// \t\t\t\t<option id=\"option3d\" value=\"3\">3</option>\r\n// \t\t\t\t<option id=\"option3e\">no value</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"select4\" id=\"select4\" multiple=\"multiple\">\r\n// \t\t\t\t<optgroup disabled=\"disabled\">\r\n// \t\t\t\t\t<option id=\"option4a\" class=\"emptyopt\" value=\"\">Nothing</option>\r\n// \t\t\t\t\t<option id=\"option4b\" disabled=\"disabled\" selected=\"selected\" value=\"1\">1</option>\r\n// \t\t\t\t\t<option id=\"option4c\" selected=\"selected\" value=\"2\">2</option>\r\n// \t\t\t\t</optgroup>\r\n// \t\t\t\t<option selected=\"selected\" disabled=\"disabled\" id=\"option4d\" value=\"3\">3</option>\r\n// \t\t\t\t<option id=\"option4e\">no value</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"select5\" id=\"select5\">\r\n// \t\t\t\t<option id=\"option5a\" value=\"3\">1</option>\r\n// \t\t\t\t<option id=\"option5b\" value=\"2\">2</option>\r\n// \t\t\t\t<option id=\"option5c\" value=\"1\">3</option>\r\n// \t\t\t</select>\r\n\r\n// \t\t\t<object id=\"object1\" codebase=\"stupid\">\r\n// \t\t\t\t<param name=\"p1\" value=\"x1\" />\r\n// \t\t\t\t<param name=\"p2\" value=\"x2\" />\r\n// \t\t\t</object>\r\n\r\n// \t\t\t<span id=\"台北Táiběi\"></span>\r\n// \t\t\t<span id=\"台北\" lang=\"中文\"></span>\r\n// \t\t\t<span id=\"utf8class1\" class=\"台北Táiběi 台北\"></span>\r\n// \t\t\t<span id=\"utf8class2\" class=\"台北\"></span>\r\n// \t\t\t<span id=\"foo:bar\" class=\"foo:bar\"></span>\r\n// \t\t\t<span id=\"test.foo[5]bar\" class=\"test.foo[5]bar\"></span>\r\n\r\n// \t\t\t<foo_bar id=\"foobar\">test element</foo_bar>\r\n// \t\t</form>\r\n// \t\t<b id=\"floatTest\">Float test.</b>\r\n// \t\t<iframe id=\"iframe\" name=\"iframe\"></iframe>\r\n// \t\t<form id=\"lengthtest\">\r\n// \t\t\t<input type=\"text\" id=\"length\" name=\"test\"/>\r\n// \t\t\t<input type=\"text\" id=\"idTest\" name=\"id\"/>\r\n// \t\t</form>\r\n// \t\t<table id=\"table\"></table>\r\n\r\n// \t\t<form id=\"name-tests\">\r\n// \t\t\t<!-- Inputs with a grouped name attribute. -->\r\n// \t\t\t<input name=\"types[]\" id=\"types_all\" type=\"checkbox\" value=\"all\" />\r\n// \t\t\t<input name=\"types[]\" id=\"types_anime\" type=\"checkbox\" value=\"anime\" />\r\n// \t\t\t<input name=\"types[]\" id=\"types_movie\" type=\"checkbox\" value=\"movie\" />\r\n// \t\t</form>\r\n\r\n// \t\t<form id=\"testForm\" action=\"#\" method=\"get\">\r\n// \t\t\t<textarea name=\"T3\" rows=\"2\" cols=\"15\">?\\nZ</textarea>\r\n// \t\t\t<input type=\"hidden\" name=\"H1\" value=\"x\" />\r\n// \t\t\t<input type=\"hidden\" name=\"H2\" />\r\n// \t\t\t<input name=\"PWD\" type=\"password\" value=\"\" />\r\n// \t\t\t<input name=\"T1\" type=\"text\" />\r\n// \t\t\t<input name=\"T2\" type=\"text\" value=\"YES\" readonly=\"readonly\" />\r\n// \t\t\t<input type=\"checkbox\" name=\"C1\" value=\"1\" />\r\n// \t\t\t<input type=\"checkbox\" name=\"C2\" />\r\n// \t\t\t<input type=\"radio\" name=\"R1\" value=\"1\" />\r\n// \t\t\t<input type=\"radio\" name=\"R1\" value=\"2\" />\r\n// \t\t\t<input type=\"text\" name=\"My Name\" value=\"me\" />\r\n// \t\t\t<input type=\"reset\" name=\"reset\" value=\"NO\" />\r\n// \t\t\t<select name=\"S1\">\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"S2\" multiple=\"multiple\" size=\"3\">\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t\t<option value=\"abc\">ABC</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"S3\">\r\n// \t\t\t\t<option selected=\"selected\">YES</option>\r\n// \t\t\t</select>\r\n// \t\t\t<select name=\"S4\">\r\n// \t\t\t\t<option value=\"\" selected=\"selected\">NO</option>\r\n// \t\t\t</select>\r\n// \t\t\t<input type=\"submit\" name=\"sub1\" value=\"NO\" />\r\n// \t\t\t<input type=\"submit\" name=\"sub2\" value=\"NO\" />\r\n// \t\t\t<input type=\"image\" name=\"sub3\" value=\"NO\" />\r\n// \t\t\t<button name=\"sub4\" type=\"submit\" value=\"NO\">NO</button>\r\n// \t\t\t<input name=\"D1\" type=\"text\" value=\"NO\" disabled=\"disabled\" />\r\n// \t\t\t<input type=\"checkbox\" checked=\"checked\" disabled=\"disabled\" name=\"D2\" value=\"NO\" />\r\n// \t\t\t<input type=\"radio\" name=\"D3\" value=\"NO\" checked=\"checked\" disabled=\"disabled\" />\r\n// \t\t\t<select name=\"D4\" disabled=\"disabled\">\r\n// \t\t\t\t<option selected=\"selected\" value=\"NO\">NO</option>\r\n// \t\t\t</select>\r\n// \t\t\t<input id=\"list-test\" type=\"text\" />\r\n// \t\t\t<datalist id=\"datalist\">\r\n// \t\t\t\t<option value=\"option\"></option>\r\n// \t\t\t</datalist>\r\n// \t\t</form>\r\n// \t\t<div id=\"moretests\">\r\n// \t\t\t<form>\r\n// \t\t\t\t<div id=\"checkedtest\" style=\"display:none;\">\r\n// \t\t\t\t\t<input type=\"radio\" name=\"checkedtestradios\" checked=\"checked\"/>\r\n// \t\t\t\t\t<input type=\"radio\" name=\"checkedtestradios\" value=\"on\"/>\r\n// \t\t\t\t\t<input type=\"checkbox\" name=\"checkedtestcheckboxes\" checked=\"checked\"/>\r\n// \t\t\t\t\t<input type=\"checkbox\" name=\"checkedtestcheckboxes\" />\r\n// \t\t\t\t</div>\r\n// \t\t\t</form>\r\n// \t\t\t<div id=\"nonnodes\"><span>hi</span> there <!-- mon ami --></div>\r\n// \t\t\t<div id=\"t2037\">\r\n// \t\t\t\t<div><div class=\"hidden\">hidden</div></div>\r\n// \t\t\t</div>\r\n// \t\t\t<div id=\"t6652\">\r\n// \t\t\t\t<div></div>\r\n// \t\t\t</div>\r\n// \t\t\t<div id=\"no-clone-exception\"><object><embed></embed></object></div>\r\n// \t\t</div>\r\n\r\n// \t\t<div id=\"tabindex-tests\">\r\n// \t\t\t<ol id=\"listWithTabIndex\" tabindex=\"5\">\r\n// \t\t\t\t<li id=\"foodWithNegativeTabIndex\" tabindex=\"-1\">Rice</li>\r\n// \t\t\t\t<li id=\"foodNoTabIndex\">Beans</li>\r\n// \t\t\t\t<li>Blinis</li>\r\n// \t\t\t\t<li>Tofu</li>\r\n// \t\t\t</ol>\r\n\r\n// \t\t\t<div id=\"divWithNoTabIndex\">I'm hungry. I should...</div>\r\n// \t\t\t<span>...</span><a href=\"#\" id=\"linkWithNoTabIndex\">Eat lots of food</a><span>...</span> |\r\n// \t\t\t<span>...</span><a href=\"#\" id=\"linkWithTabIndex\" tabindex=\"2\">Eat a little food</a><span>...</span> |\r\n// \t\t\t<span>...</span><a href=\"#\" id=\"linkWithNegativeTabIndex\" tabindex=\"-1\">Eat no food</a><span>...</span>\r\n// \t\t\t<span>...</span><a id=\"linkWithNoHrefWithNoTabIndex\">Eat a burger</a><span>...</span>\r\n// \t\t\t<span>...</span><a id=\"linkWithNoHrefWithTabIndex\" tabindex=\"1\">Eat some funyuns</a><span>...</span>\r\n// \t\t\t<span>...</span><a id=\"linkWithNoHrefWithNegativeTabIndex\" tabindex=\"-1\">Eat some funyuns</a><span>...</span>\r\n// \t\t</div>\r\n\r\n// \t\t<div id=\"liveHandlerOrder\">\r\n// \t\t\t<span id=\"liveSpan1\"><a href=\"#\" id=\"liveLink1\"></a></span>\r\n// \t\t\t<span id=\"liveSpan2\"><a href=\"#\" id=\"liveLink2\"></a></span>\r\n// \t\t</div>\r\n\r\n// \t\t<div id=\"siblingTest\">\r\n// \t\t\t<em id=\"siblingfirst\">1</em>\r\n// \t\t\t<em id=\"siblingnext\">2</em>\r\n// \t\t</div>\r\n//         </div>\r\n//         </dl>\r\n//         <div id=\"fx-test-group\" style=\"position:absolute;width:1px;height:1px;overflow:hidden;\">\r\n// \t\t<div id=\"fx-queue\" name=\"test\">\r\n// \t\t\t<div id=\"fadein\" class='chain test' name='div'>fadeIn<div>fadeIn</div></div>\r\n// \t\t\t<div id=\"fadeout\" class='chain test out'>fadeOut<div>fadeOut</div></div>\r\n\r\n// \t\t\t<div id=\"show\" class='chain test'>show<div>show</div></div>\r\n// \t\t\t<div id=\"hide\" class='chain test out'>hide<div>hide</div></div>\r\n\r\n// \t\t\t<div id=\"togglein\" class='chain test'>togglein<div>togglein</div></div>\r\n// \t\t\t<div id=\"toggleout\" class='chain test out'>toggleout<div>toggleout</div></div>\r\n\r\n\r\n// \t\t\t<div id=\"slideup\" class='chain test'>slideUp<div>slideUp</div></div>\r\n// \t\t\t<div id=\"slidedown\" class='chain test out'>slideDown<div>slideDown</div></div>\r\n\r\n// \t\t\t<div id=\"slidetogglein\" class='chain test'>slideToggleIn<div>slideToggleIn</div></div>\r\n// \t\t\t<div id=\"slidetoggleout\" class='chain test out'>slideToggleOut<div>slideToggleOut</div></div>\r\n\r\n// \t\t\t<div id=\"fadetogglein\" class='chain test'>fadeToggleIn<div>fadeToggleIn</div></div>\r\n// \t\t\t<div id=\"fadetoggleout\" class='chain test out'>fadeToggleOut<div>fadeToggleOut</div></div>\r\n\r\n// \t\t\t<div id=\"fadeto\" class='chain test'>fadeTo<div>fadeTo</div></div>\r\n// \t\t</div>\r\n\r\n// \t\t<div id=\"fx-tests\"></div>`\r\n// }\r\n\r\n// export function afterEach() {\r\n//     document.getElementById(\"qunit-fixture\")!.innerHTML = \"\";\r\n// }\r\n\r\n// export function parseTest() {\r\n//     assert.strictEqual(dom.parse(\"<span><div></div><hr/><code></code><b></b></span>\").childNodes.length, 4, \"节点个数\");\r\n//     assert.strictEqual(dom.parse(\"<input type='text' value='TEST' />\").value, \"TEST\", \"默认值\");\r\n//     assert.strictEqual(dom.parse(\"<div/>\").tagName, 'DIV', \"确保空白被删除\");\r\n//     assert.strictEqual(dom.parse(\"<span>a<div></div>b</span>\").childNodes.length, 3, \"确保空白被删除\");\r\n//     assert.strictEqual(dom.parse(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\").nodeName.toUpperCase(), \"DIV\", \"Make sure we're getting a div.\");\r\n//     assert.strictEqual(dom.parse(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\").firstChild!.nodeType, 3, \"Text node.\");\r\n//     assert.strictEqual(dom.parse(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\").lastChild!.nodeType, 3, \"Text node.\");\r\n//     assert.strictEqual(dom.parse(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\").childNodes[1].nodeType, 1, \"Paragraph.\");\r\n//     assert.strictEqual(dom.parse(\"<div>\\r\\nsome text\\n<p>some p</p>\\nmore text\\r\\n</div>\").childNodes[1].firstChild!.nodeType, 3, \"Paragraph text.\");\r\n\r\n//     assert.ok(dom.parse(\"<link rel='stylesheet'/>\"), \"Creating a link\");\r\n//     assert.ok(dom.parse(\"<input/>\"), \"Create an input and set the type.\");\r\n\r\n//     assert.ok(dom.parse(\"<div><span>hi</span> there <!-- mon ami --></div>\").childNodes.length >= 2, \"Check node,textnode,comment creation (some browsers delete comments)\");\r\n\r\n//     assert.ok(!(dom.parse(\"<option>test</option>\") as HTMLOptionElement).selected, \"Make sure that options are auto-selected\");\r\n\r\n//     assert.ok(dom.parse(\"<div></div>\"), \"Create a div with closing tag.\");\r\n//     assert.ok(dom.parse(\"<table></table>\"), \"Create a table with closing tag.\");\r\n\r\n//     assert.strictEqual(dom.parse(\"<ul></ul>\").nodeName.toUpperCase(), \"UL\");\r\n//     assert.strictEqual(dom.parse(\"<ul><li></li></ul>\").firstChild!.nodeName.toUpperCase(), \"LI\");\r\n//     let large = \"\";\r\n//     for (let i = 0; i < 50000; i++) {\r\n//         large += `<li>${i}</li>`;\r\n//     }\r\n//     assert.strictEqual(dom.parse(`<ul>${large}</ul>`).childNodes.length, 50000);\r\n\r\n//     assert.strictEqual(dom.parse(\"<span/>\", dom.parse(\"<div/>\").ownerDocument).tagName, 'SPAN', \"Verify a span created with a div context works\");\r\n\r\n// }\r\n\r\n// export function queryTest() {\r\n//     assert.strictEqual(dom.query(\"#foo .blogTest\")[0].innerHTML, \"Yahoo\", \"Check for find\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[0], document.getElementById(\"foo\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[1], document.getElementById(\"moretests\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[2], document.getElementById(\"tabindex-tests\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[3], document.getElementById(\"liveHandlerOrder\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[4], document.getElementById(\"siblingTest\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\")[5], document.getElementById(\"fx-test-group\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > div\").length, 6, \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > #foo > p\").length, 3, \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > #foo > p\")[0], document.getElementById(\"sndp\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > #foo > p\")[1], document.getElementById(\"en\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"#qunit-fixture > #foo > p\")[2], document.getElementById(\"sap\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"> #foo > p\", document.getElementById(\"qunit-fixture\")!)[0], document.getElementById(\"sndp\"), \"find child elements\");\r\n//     assert.deepEqual(dom.query(\"> #foo > p\", document.getElementById(\"qunit-fixture\")!)[2], document.getElementById(\"sap\"), \"find child elements\");\r\n// }\r\n\r\n// export function findTest() {\r\n//     assert.strictEqual(dom.find(\"#foo .blogTest\")!.innerHTML, \"Yahoo\", \"Check for find\");\r\n//     assert.deepEqual(dom.find(\"#qunit-fixture > div\"), document.getElementById(\"foo\"), \"find child elements\");\r\n//     assert.deepEqual(dom.find(\"#qunit-fixture > #foo > p\"), document.getElementById(\"sndp\"), \"find child elements\");\r\n//     assert.deepEqual(dom.find(\"> #foo > p\", document.getElementById(\"qunit-fixture\")!), document.getElementById(\"sndp\"), \"find child elements\");\r\n// }\r\n\r\n// export function matchTest() {\r\n//     assert.ok(dom.match(document.getElementById(\"form\")!, \"form\"), \"Check for element: A form must be a form\");\r\n//     assert.ok(!dom.match(document.getElementById(\"form\")!, \"div\"), \"Check for element: A form is not a div\");\r\n//     assert.ok(dom.match(document.getElementById(\"mark\")!, \".blog\"), \"Check for class: Expected class 'blog'\");\r\n//     assert.ok(!dom.match(document.getElementById(\"mark\")!, \".link\"), \"Check for class: Did not expect class 'link'\");\r\n//     assert.ok(dom.match(document.getElementById(\"simon\")!, \".blog.link\"), \"Check for multiple classes: Expected classes 'blog' and 'link'\");\r\n//     assert.ok(!dom.match(document.getElementById(\"simon\")!, \".blogTest\"), \"Check for multiple classes: Expected classes 'blog' and 'link', but not 'blogTest'\");\r\n//     assert.ok(dom.match(document.getElementById(\"en\")!, \"[lang=\\\"en\\\"]\"), \"Check for attribute: Expected attribute lang to be 'en'\");\r\n//     assert.ok(!dom.match(document.getElementById(\"en\")!, \"[lang=\\\"de\\\"]\"), \"Check for attribute: Expected attribute lang to be 'en', not 'de'\");\r\n//     assert.ok(dom.match(document.getElementById(\"text1\")!, \"[type=\\\"text\\\"]\"), \"Check for attribute: Expected attribute type to be 'text'\");\r\n//     assert.ok(!dom.match(document.getElementById(\"text1\")!, \"[type=\\\"radio\\\"]\"), \"Check for attribute: Expected attribute type to be 'text', not 'radio'\");\r\n//     assert.ok(dom.match(document.getElementById(\"text2\")!, \":disabled\"), \"Check for pseudoclass: Expected to be disabled\");\r\n//     assert.ok(!dom.match(document.getElementById(\"text1\")!, \":disabled\"), \"Check for pseudoclass: Expected not disabled\");\r\n//     assert.ok(dom.match(document.getElementById(\"radio2\")!, \":checked\"), \"Check for pseudoclass: Expected to be checked\");\r\n//     assert.ok(!dom.match(document.getElementById(\"radio1\")!, \":checked\"), \"Check for pseudoclass: Expected not checked\");\r\n\r\n//     // test is() with comma-seperated expressions\r\n//     assert.ok(dom.match(document.getElementById(\"en\")!, \"[lang=\\\"en\\\"],[lang=\\\"de\\\"]\"), \"Comma-seperated; Check for lang attribute: Expect en or de\");\r\n//     assert.ok(dom.match(document.getElementById(\"en\")!, \"[lang=\\\"de\\\"],[lang=\\\"en\\\"]\"), \"Comma-seperated; Check for lang attribute: Expect en or de\");\r\n//     assert.ok(dom.match(document.getElementById(\"en\")!, \"[lang=\\\"en\\\"] , [lang=\\\"de\\\"]\"), \"Comma-seperated; Check for lang attribute: Expect en or de\");\r\n//     assert.ok(dom.match(document.getElementById(\"en\")!, \"[lang=\\\"de\\\"] , [lang=\\\"en\\\"]\"), \"Comma-seperated; Check for lang attribute: Expect en or de\");\r\n\r\n//     assert.ok(dom.match(document.getElementById(\"option1b\")!, \"#select1 option:not(:first-child)\"), \"POS inside of :not() (#10970)\");\r\n// }\r\n\r\n// export function firstTest() {\r\n//     assert.strictEqual(dom.first(document.getElementById(\"qunit-fixture\")!)!.id, \"firstp\");\r\n//     assert.strictEqual(dom.first(document.getElementById(\"qunit-fixture\")!, \"#ap\")!.id, \"ap\");\r\n// }\r\n\r\n// export function lastTest() {\r\n//     assert.strictEqual(dom.last(document.getElementById(\"qunit-fixture\")!)!.id, \"fx-test-group\");\r\n//     assert.strictEqual(dom.last(document.getElementById(\"qunit-fixture\")!, \"#fx-test-group\")!.id, \"fx-test-group\");\r\n// }\r\n\r\n// export function nextTest() {\r\n//     assert.strictEqual(dom.next(document.getElementById(\"ap\")!)!.id, \"foo\", \"Simple next check\");\r\n//     assert.strictEqual(dom.next(document.getElementById(\"ap\")!, \"div\")!.id, \"foo\", \"Simple next check\");\r\n//     assert.strictEqual(dom.next(document.getElementById(\"ap\")!, \"aside\"), null, \"Filtered next check, no match\");\r\n//     assert.strictEqual(dom.next(document.getElementById(\"ap\")!, \"div, p\")!.id, \"foo\", \"Multiple filters\");\r\n// }\r\n\r\n// export function prevTest() {\r\n//     assert.strictEqual(dom.prev(document.getElementById(\"foo\")!)!.id, \"ap\", \"Simple prev check\");\r\n//     assert.strictEqual(dom.prev(document.getElementById(\"foo\")!, \"p\")!.id, \"ap\", \"Simple prev check\");\r\n//     assert.strictEqual(dom.prev(document.getElementById(\"foo\")!, \"aside\"), null, \"Filtered prev check, no match\");\r\n//     assert.strictEqual(dom.prev(document.getElementById(\"foo\")!, \"p, div\")!.id, \"ap\", \"Multiple filters\");\r\n// }\r\n\r\n// export function parentTest() {\r\n//     assert.strictEqual(dom.parent(document.getElementById(\"groups\")!)!.id, \"ap\", \"Simple parent check\");\r\n//     assert.strictEqual(dom.parent(document.getElementById(\"groups\")!, \"p\")!.id, \"ap\", \"Filtered parent check\");\r\n//     assert.strictEqual(dom.parent(document.getElementById(\"groups\")!, \"div2\"), null, \"Filtered parent check, no match\");\r\n//     assert.strictEqual(dom.parent(document.getElementById(\"groups\")!, \"div, p\")!.id, \"ap\", \"Check for multiple filters\");\r\n// }\r\n\r\n// export function closestTest() {\r\n//     assert.deepEqual(dom.closest(document.body, \"body\"), document.body, \"closest(body)\");\r\n//     assert.deepEqual(dom.closest(document.body, \"html\"), document.documentElement, \"closest(html)\");\r\n//     assert.deepEqual(dom.closest(document.body, \"div\"), null, \"closest(div)\");\r\n//     assert.deepEqual(dom.closest(document.getElementById(\"qunit-fixture\")!, \"span,html\"), document.documentElement, \"closest(span,html)\");\r\n\r\n//     assert.deepEqual(dom.closest(dom.find(\"#qunit-fixture div:nth-child(2)\")!, \"div:first-child\"), null, \"closest(div:first-child)\");\r\n//     assert.deepEqual(dom.closest(dom.find(\"div\")!, \"body:first-child div:last-child\"), dom.find(\"fx-tests\"), \"closest(body:first-child div:last-child)\");\r\n\r\n//     // Test .closest() limited by the context\r\n//     assert.deepEqual(dom.closest(document.getElementById(\"#nothiddendivchild\")!, \"html\", document.body), null, \"Context limited.\");\r\n//     assert.deepEqual(dom.closest(document.getElementById(\"#nothiddendivchild\")!, \"body\", document.body), null, \"Context limited.\");\r\n//     assert.deepEqual(dom.closest(document.getElementById(\"#nothiddendivchild\")!, \"#nothiddendiv\", document.body), document.getElementById(\"nothiddendiv\"), \"Context not reached.\");\r\n\r\n//     //Test that .closest() returns unique'd set\r\n//     assert.deepEqual(dom.closest(dom.find(\"#qunit-fixture p\")!, \"#qunit-fixture\"), document.getElementById('qunit-fixture'), \"Closest should return a unique set\");\r\n\r\n//     // Test on disconnected node\r\n//     assert.strictEqual(dom.closest(dom.find(\"p\", dom.parse(\"<div><p></p></div>\"))!, \"table\"), null, \"Make sure disconnected closest work.\");\r\n\r\n//     // Bug #7369\r\n//     assert.strictEqual(!dom.parse(\"<div foo='bar'></div>\").closest(\"[foo]\"), false, \"Disconnected nodes with attribute selector\");\r\n//     assert.strictEqual(dom.parse(\"<div>text</div>\").closest(\"[lang]\"), null, \"Disconnected nodes with text and non-existent attribute selector\");\r\n// }\r\n\r\n// export function childrenTest() {\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!).length, 3, \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!)[0].id, \"sndp\", \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!)[1].id, \"en\", \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!)[2].id, \"sap\", \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!, \"#en, #sap\").length, 2, \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!, \"#en, #sap\")[0].id, \"en\", \"Check for children\");\r\n//     assert.deepEqual(dom.children(document.getElementById(\"foo\")!, \"#en, #sap\")[1].id, \"sap\", \"Check for children\");\r\n// }\r\n\r\n// export function indexTest() {\r\n//     assert.strictEqual(dom.index(document.getElementById(\"text2\")!), 2, \"Returns the index of a child amongst its siblings\");\r\n//     assert.strictEqual(dom.index(dom.parse(\"<div/>\")), 0, \"Node without parent returns 0\");\r\n// }\r\n\r\n// export function containsTest() {\r\n//     assert.strictEqual(dom.contains(document.body, document.body), true);\r\n//     assert.strictEqual(dom.contains(document.body, document.getElementById(\"qunit-fixture\")!), true);\r\n//     assert.strictEqual(dom.contains(document.getElementById(\"qunit-fixture\")!, document.body), false);\r\n// }\r\n\r\n// export function appendTest() {\r\n//     dom.append(document.getElementById(\"yahoo\")!, \"<b>buga</b>\");\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), \"This is a normal link: Yahoobuga\", \"Insert String after\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"yahoo\")!, document.getElementById(\"first\")!);\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), \"This is a normal link: YahooTry them out:\", \"Insert element after\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"yahoo\")!, document.getElementById(\"mark\")!);\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), \"This is a normal link: Yahoodiveintomark\", \"Insert dom after\");\r\n\r\n//     const div = dom.parse(\"<div/>\");\r\n//     dom.append(div, \"<span></span><span>test</span>\");\r\n//     assert.strictEqual(div.lastChild!.nodeName.toLowerCase(), \"span\", \"Insert the element after the disconnected node.\");\r\n\r\n//     assert.strictEqual((dom.append(document.getElementById(\"select3\")!, \"<option value='appendTest'>Append Test</option>\") as HTMLSelectElement).value, \"appendTest\", \"Appending html options to select element\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"sap\")!, document.getElementById(\"first\")!);\r\n//     assert.strictEqual(document.getElementById(\"sap\")!.textContent!.replace(/[\\r\\n]/g, '').replace(\"hasclass\", \"has class\"), \"This link has class=\\\"blog\\\": Simon Willison's WeblogTry them out:\", \"Check for appending of element\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"sap\")!, \" text with spaces \");\r\n//     assert.ok(document.getElementById(\"sap\")!.innerHTML.match(/ text with spaces $/), \"Check for appending text with spaces\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     assert.ok(dom.append(document.getElementById(\"sap\")!, \"\"), \"Check for appending an empty string.\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"form\")!, \"<input name='radiotest' type='radio' checked='checked' />\");\r\n//     assert.ok((dom.find(\"input[name=radiotest]\", document.getElementById(\"form\")!) as HTMLInputElement).checked, \"Append checked radio\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"form\")!, \"<input name='radiotest' type='radio' checked    =   'checked' />\");\r\n//     assert.ok((dom.find(\"input[name=radiotest]\", document.getElementById(\"form\")!) as HTMLInputElement).checked, \"Append checked radio\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"form\")!, \"<input name='radiotest' type='radio' checked />\");\r\n//     assert.ok((dom.find(\"input[name=radiotest]\", document.getElementById(\"form\")!) as HTMLInputElement).checked, \"Append HTML5-formated checked radio\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"sap\")!, document.getElementById(\"form\")!);\r\n//     assert.strictEqual(!dom.find('form', document.getElementById(\"sap\")!), false, \"Check for appending a form\"); // Bug #910\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     let pass = true;\r\n//     try {\r\n//         const body = (document.getElementById(\"iframe\") as HTMLIFrameElement).contentWindow.document.body;\r\n//         if (body !== null) {\r\n//             pass = false;\r\n//             dom.append(body, \"<div>test</div>\");\r\n//         }\r\n//         pass = true;\r\n//     } catch (e) { }\r\n\r\n//     assert.ok(pass, \"Test for appending a DOM node to the contents of an IFrame\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"select1\")!, \"<OPTION>Test</OPTION>\");\r\n//     assert.strictEqual(dom.last(document.getElementById(\"select1\")!, 'option')!.textContent, \"Test\", \"Appending <OPTION> (all caps)\");\r\n\r\n//     var colgroup = dom.append(document.getElementById(\"table\")!, \"<colgroup></colgroup>\");\r\n//     assert.strictEqual((document.getElementById(\"table\")!.lastChild as HTMLElement).tagName.toLowerCase(), \"colgroup\", \"Append colgroup\");\r\n\r\n//     dom.append(colgroup, \"<col/>\");\r\n//     assert.strictEqual(dom.last(colgroup)!.tagName, \"COL\", \"Append col\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     dom.append(document.getElementById(\"table\")!, \"<caption></caption>\");\r\n//     assert.strictEqual(dom.first(document.getElementById(\"table\")!)!.tagName.toLowerCase(), \"caption\", \"Append caption\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     const prev = dom.children(document.getElementById(\"sap\")!).length;\r\n//     dom.append(document.getElementById(\"sap\")!, \"<span></span><span></span><span></span>\");\r\n//     assert.strictEqual(dom.children(document.getElementById(\"sap\")!).length, prev + 3, \"Make sure that multiple arguments works.\");\r\n// }\r\n\r\n// export function prependTest() {\r\n//     dom.prepend(document.getElementById(\"first\")!, \"<b>buga</b>\");\r\n//     assert.strictEqual(document.getElementById(\"first\")!.textContent, \"bugaTry them out:\", \"Check if text prepending works\");\r\n//     assert.strictEqual((dom.prepend(document.getElementById(\"select3\")!, \"<option value='prependTest'>Prepend Test</option>\") as HTMLOptionElement).value, \"prependTest\", \"Prepending html options to select element\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     var expected = \"Try them out:This link has class=\\\"blog\\\": Simon Willison's Weblog\";\r\n//     dom.prepend(document.getElementById(\"sap\")!, document.getElementById(\"first\")!);\r\n//     assert.strictEqual(document.getElementById(\"sap\")!.textContent!.replace(/[\\r\\n]/g, \"\").replace(\"hasclass\", \"has class\"), expected, \"Check for prepending of element\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     expected = \"YahooThis link has class=\\\"blog\\\": Simon Willison's Weblog\";\r\n//     dom.prepend(document.getElementById(\"sap\")!, document.getElementById(\"yahoo\")!);\r\n//     assert.strictEqual(document.getElementById(\"sap\")!.textContent!.replace(/[\\r\\n]/g, \"\").replace(\"hasclass\", \"has class\"), expected, \"Check for prepending of dom.parse object\");\r\n// }\r\n\r\n// export function beforeTest() {\r\n//     var expected = \"This is a normal link: bugaYahoo\";\r\n//     dom.before(document.getElementById(\"yahoo\")!, \"<b>buga</b>\");\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), expected, \"Insert String before\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     expected = \"This is a normal link: Try them out:Yahoo\";\r\n//     dom.before(document.getElementById(\"yahoo\")!, document.getElementById(\"first\")!);\r\n\r\n//     // !Safari\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\").replace(\"link:T\", \"link: T\"), expected, \"Insert element before\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     expected = \"This is a normal link: diveintomarkYahoo\";\r\n//     dom.before(document.getElementById(\"yahoo\")!, document.getElementById(\"mark\")!);\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), expected, \"Insert dom.parse before\");\r\n// }\r\n\r\n// export function afterTest() {\r\n//     var expected = \"This is a normal link: Yahoobuga\";\r\n//     dom.after(document.getElementById(\"yahoo\")!, \"<b>buga</b>\");\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), expected, \"Insert String after\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     expected = \"This is a normal link: YahooTry them out:\";\r\n//     dom.after(document.getElementById(\"yahoo\")!, document.getElementById(\"first\")!);\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), expected, \"Insert element after\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n//     expected = \"This is a normal link: Yahoodiveintomark\";\r\n//     dom.after(document.getElementById(\"yahoo\")!, document.getElementById(\"mark\")!);\r\n//     assert.strictEqual(document.getElementById(\"en\")!.textContent!.replace(/[\\r\\n]/g, \"\"), expected, \"Insert dom.parse after\");\r\n// }\r\n\r\n// export function removeTest() {\r\n//     dom.remove(document.getElementById(\"ap\"));\r\n//     assert.ok(!document.getElementById(\"ap\"));\r\n// }\r\n\r\n// export function cloneTest() {\r\n//     assert.strictEqual(dom.clone(document.getElementById(\"qunit-fixture\")!).childNodes.length, document.getElementById(\"qunit-fixture\")!.childNodes.length, \"Simple child length to ensure a large dom tree copies correctly\");\r\n// }\r\n\r\n// export function getAttrTest() {\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"type\"), \"text\", \"Check for type attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"radio1\")!, \"type\"), \"radio\", \"Check for type attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"check1\")!, \"type\"), \"checkbox\", \"Check for type attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"simon1\")!, \"rel\"), \"bookmark\", \"Check for rel attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"google\")!, \"title\"), \"Google!\", \"Check for title attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"mark\")!, \"hreflang\"), \"en\", \"Check for hreflang attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"en\")!, \"lang\"), \"en\", \"Check for lang attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"simon\")!, \"class\"), \"blog link\", \"Check for class attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"name\")!, \"name\"), \"name\", \"Check for name attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"name\"), \"action\", \"Check for name attribute\");\r\n//     assert.ok(dom.getAttr(document.getElementById(\"form\")!, \"action\")!.indexOf(\"formaction\") >= 0, \"Check for action attribute\");\r\n//     dom.setAttr(document.getElementById(\"text1\")!, \"value\", \"t\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"value\"), \"t\", \"Check setting the value attribute\");\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<div value='t'></div>\")!, \"value\"), \"t\", \"Check setting custom attr named 'value' on a div\");\r\n//     dom.setAttr(document.getElementById(\"form\")!, \"blah\", \"blah\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"form\")!, \"blah\"), \"blah\", \"Set non-existant attribute on a form\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"foo\")!, \"height\"), undefined, \"Non existent height attribute should return undefined\");\r\n\r\n//     // [7472] & [3113] (form contains an input with name=\"action\" or name=\"id\")\r\n//     var extras = document.getElementById(\"testForm\")!.appendChild(dom.parse(\"<input name='id' name='name' /><input id='target' name='target' />\"));\r\n//     dom.setAttr(document.getElementById(\"form\")!, \"action\", \"newformaction\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"form\")!, \"action\"), \"newformaction\", \"Check that action attribute was changed\");\r\n//     // assert.strictEqual(dom.getAttr(document.getElementById(\"testForm\")!, \"target\", 1), null, \"Retrieving target does not equal the input with name=target\");\r\n\r\n//     dom.setAttr(document.getElementById(\"testForm\")!, \"target\", \"newTarget\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"testForm\")!, \"target\"), \"newTarget\", \"Set target successfully on a form\");\r\n//     dom.setAttr(document.getElementById(\"testForm\")!, \"id\", null);\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"testForm\")!, \"id\"), null, \"Retrieving id does not equal the input with name=id after id is removed [#7472]\");\r\n//     // Bug #3685 (form contains input with name=\"name\")\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"testForm\")!, \"name\"), null, \"Retrieving name does not retrieve input with name=name\");\r\n//     (extras as any).remove();\r\n\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"maxlength\"), \"30\", \"Check for maxlength attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"maxLength\"), \"30\", \"Check for maxLength attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"area1\")!, \"maxLength\"), \"30\", \"Check for maxLength attribute\");\r\n\r\n//     // using innerHTML in IE causes href attribute to be serialized to the full path\r\n//     document.getElementById(\"qunit-fixture\")!.appendChild(dom.parse(\"<a id='tAnchor5' href='#5'/>\"));\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"tAnchor5\")!, \"href\"), \"#5\", \"Check for non-absolute href (an anchor)\");\r\n\r\n//     // list attribute is readonly by default in browsers that support it\r\n//     dom.setAttr(document.getElementById(\"list-test\")!, \"list\", \"datalist\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"list-test\")!, \"list\"), \"datalist\", \"Check setting list attribute\");\r\n\r\n//     // Related to [5574] and [5683]\r\n//     assert.strictEqual(dom.getAttr(document.body, \"foo2\"), null, \"Make sure that a non existent attribute returns null\");\r\n\r\n//     document.body.setAttribute(\"foo\", \"baz\");\r\n//     assert.strictEqual(dom.getAttr(document.body, \"foo\"), \"baz\", \"Make sure the dom attribute is retrieved when no expando is found\");\r\n\r\n//     dom.setAttr(document.body, \"foo\", \"cool\");\r\n//     assert.strictEqual(dom.getAttr(document.body, \"foo\"), \"cool\", \"Make sure that setting works well when both expando and dom attribute are available\");\r\n\r\n//     document.body.removeAttribute(\"foo\"); // Cleanup\r\n\r\n//     var select = document.createElement(\"select\"), optgroup = document.createElement(\"optgroup\"), option = document.createElement(\"option\");\r\n//     optgroup.appendChild(option);\r\n//     select.appendChild(optgroup);\r\n\r\n//     assert.strictEqual(dom.getAttr(option, \"selected\"), \"selected\", \"Make sure that a single option is selected, even when in an optgroup.\");\r\n\r\n//     var $img = document.appendChild(dom.parse(\"<img style='display:none' width='215' height='53' src='../../assets/resources/userface.png'/>\")) as HTMLElement;\r\n//     assert.strictEqual(dom.getAttr($img, \"width\"), \"215\", \"Retrieve width attribute an an element with display:none.\");\r\n//     assert.strictEqual(dom.getAttr($img, \"height\"), \"53\", \"Retrieve height attribute an an element with display:none.\");\r\n\r\n//     // Check for style support\r\n//     assert.ok(!!~dom.getAttr(document.getElementById(\"dl\")!, \"style\")!.indexOf(\"position\"), \"Check style attribute getter, also normalize css props to lowercase\");\r\n//     dom.setAttr(document.getElementById(\"foo\")!, \"style\", \"position:absolute;\");\r\n//     assert.ok(!!~dom.getAttr(document.getElementById(\"foo\")!, \"style\")!.indexOf(\"position\"), \"Check style setter\");\r\n\r\n//     // Check value on button element (#1954)\r\n//     const $button = dom.after(document.getElementById(\"button\")!, \"<button value='foobar'>text</button>\") as HTMLElement;\r\n//     assert.strictEqual(dom.getAttr($button, \"value\"), \"foobar\", \"Value retrieval on a button does not return innerHTML\");\r\n//     dom.setAttr($button, \"value\", \"baz\");\r\n//     assert.strictEqual($button.innerHTML, \"text\", \"Setting the value does not change innerHTML\");\r\n\r\n//     // Attributes with a colon on a table element (#1591)\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"table\")!, \"test:attrib\"), undefined, \"Retrieving a non-existent attribute on a table with a colon does not throw an error.\");\r\n//     dom.setAttr(document.getElementById(\"table\")!, \"test:attrib\", \"foobar\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"table\")!, \"test:attrib\"), \"foobar\", \"Setting an attribute on a table with a colon does not throw an error.\");\r\n\r\n//     var $form = document.getElementById(\"qunit-fixture\")!.appendChild(dom.parse(\"<form class='something'></form>\")) as HTMLElement;\r\n//     assert.strictEqual(dom.getAttr($form, \"class\"), \"something\", \"Retrieve the class attribute on a form.\");\r\n\r\n//     var $a = document.getElementById(\"qunit-fixture\")!.appendChild(dom.parse(\"<a href='#' onclick='something()'>Click</a>\")) as HTMLElement;\r\n//     assert.strictEqual(dom.getAttr($a, \"onclick\"), \"something()\", \"Retrieve ^on attribute without anonymous function wrapper.\");\r\n\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<div/>\"), \"doesntexist\"), null, \"Make sure null is returned when no attribute is found.\");\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<div/>\"), \"title\"), null, \"Make sure null is returned when no attribute is found.\");\r\n//     const div = dom.parse(\"<div/>\");\r\n//     dom.setAttr(div, \"title\", \"something\");\r\n//     assert.strictEqual(dom.getAttr(div, \"title\"), \"something\", \"Set the title attribute.\");\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<div/>\"), \"value\"), null, \"An unset value on a div returns undefined.\");\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<input/>\"), \"value\"), \"\", \"An unset value on an input returns current value.\");\r\n\r\n//     dom.setAttr(document.getElementById(\"form\")!, \"enctype\", \"multipart/form-data\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"form\")!, \"enctype\"), \"multipart/form-data\", \"Set the enctype of a form (encoding in IE6/7 #6743)\");\r\n// }\r\n\r\n// export function setAttrTest() {\r\n\r\n//     const div = document.getElementById(\"div\")!;\r\n//     dom.setAttr(div, \"foo\", \"bar\");\r\n//     assert.strictEqual(div.getAttribute(\"foo\"), \"bar\", \"Set Attribute\");\r\n\r\n//     assert.ok(dom.setAttr(document.getElementById(\"foo\")!, \"width\", null), \"Try to set an attribute to nothing\");\r\n\r\n//     dom.setAttr(document.getElementById(\"name\")!, \"name\", \"something\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"name\")!, \"name\"), \"something\", \"Set name attribute\");\r\n//     dom.setAttr(document.getElementById(\"name\")!, \"name\", null);\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"name\")!, \"name\"), null, \"Remove name attribute\");\r\n//     assert.strictEqual(dom.getAttr(dom.parse(\"<input name=something>\"), \"name\"), \"something\", \"Check element creation gets/sets the name attribute.\");\r\n\r\n\r\n//     dom.setAttr(document.getElementById(\"check2\")!, \"checked\", null);\r\n//     assert.strictEqual((document.getElementById(\"check2\") as HTMLInputElement).checked, false, \"Set checked attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"check2\")!, \"checked\"), null, \"Set checked attribute\");\r\n//     dom.setAttr(document.getElementById(\"text1\")!, \"readonly\", \"readonly\");\r\n//     assert.strictEqual((document.getElementById(\"text1\") as HTMLInputElement).readOnly, true, \"Set readonly attribute\");\r\n//     assert.strictEqual(dom.getAttr(document.getElementById(\"text1\")!, \"readonly\"), true, \"Set readonly attribute\");\r\n//     // document.getElementById(\"text1\").setAttr(\"readonly\", false);\r\n//     // assert.strictEqual(document.getElementById(\"text1\").readOnly, false, \"Set readonly attribute\");\r\n//     // assert.strictEqual(document.getElementById(\"text1\").getAttr(\"readonly\"), false, \"Set readonly attribute\");\r\n\r\n//     // document.getElementById(\"check2\").dom.checked = true;\r\n//     // assert.strictEqual(document.getElementById(\"check2\").checked, true, \"Set checked attribute\");\r\n//     // assert.strictEqual(document.getElementById(\"check2\").getAttr(\"checked\"), true, \"Set checked attribute\");\r\n//     // document.getElementById(\"check2\").dom.checked = false;\r\n//     // assert.strictEqual(document.getElementById(\"check2\").checked, false, \"Set checked attribute\");\r\n//     // assert.strictEqual(document.getElementById(\"check2\").getAttr(\"checked\"), false, \"Set checked attribute\");\r\n\r\n//     // document.getElementById(\"check2\").setAttr(\"checked\", \"checked\");\r\n//     // assert.strictEqual(document.getElementById(\"check2\").checked, true, \"Set checked attribute with 'checked'\");\r\n//     // assert.strictEqual(document.getElementById(\"check2\").getAttr(\"checked\"), true, \"Set checked attribute\");\r\n\r\n//     // document.getElementById(\"text1\").dom.readOnly = true;\r\n//     // assert.strictEqual(document.getElementById(\"text1\").readOnly, true, \"Set readonly attribute\");\r\n//     // assert.strictEqual(document.getElementById(\"text1\").getAttr(\"readOnly\"), true, \"Set readonly attribute\");\r\n\r\n//     // document.getElementById(\"text1\").dom.readOnly = false;\r\n//     // assert.strictEqual(document.getElementById(\"text1\").readOnly, false, \"Set readonly attribute\");\r\n//     // assert.strictEqual(document.getElementById(\"text1\").getAttr(\"readOnly\"), false, \"Set readonly attribute\");\r\n\r\n//     // document.getElementById(\"name\").setAttr(\"maxlength\", \"5\");\r\n//     // assert.strictEqual(document.getElementById(\"name\").maxLength, 5, \"Set maxlength attribute\");\r\n//     // document.getElementById(\"name\").setAttr(\"maxLength\", \"10\");\r\n//     // assert.strictEqual(document.getElementById(\"name\").maxLength, 10, \"Set maxlength attribute\");\r\n\r\n//     // // HTML5 boolean attributes\r\n//     // var $text = document.getElementById(\"text1\").setAttr(\"autofocus\", true).setAttr(\"required\", true);\r\n//     // assert.strictEqual($text.getAttr(\"autofocus\"), true, \"Set boolean attributes to the same name\");\r\n//     // assert.strictEqual($text.setAttr(\"autofocus\", false).getAttr(\"autofocus\"), false, \"Setting autofocus attribute to false removes it\");\r\n//     // assert.strictEqual($text.getAttr(\"required\"), true, \"Set boolean attributes to the same name\");\r\n//     // assert.strictEqual($text.setAttr(\"required\", false).getAttr(\"required\"), false, \"Setting required attribute to false removes it\");\r\n\r\n//     // var $details = dom.parse(\"<details open></details>\");\r\n\r\n//     // $details = $details.first() || $details;\r\n//     // $details.appendTo(\"qunit-fixture\");\r\n//     // //assert.strictEqual( !$details.getAttr(\"open\"), true, \"open attribute presense indicates true\" );\r\n//     // assert.strictEqual($details.setAttr(\"open\", false).getAttr(\"open\"), false, \"Setting open attribute to false removes it\");\r\n\r\n//     // $text.setAttr(\"data-something\", true);\r\n//     // assert.strictEqual($text.getAttr(\"data-something\"), \"true\", \"Set data attributes\");\r\n//     // assert.strictEqual($text.getAttr(\"something\"), null, \"Setting data attributes are not affected by boolean settings\");\r\n//     // $text.setAttr(\"data-another\", false);\r\n//     // assert.strictEqual($text.getAttr(\"data-another\"), \"false\", \"Set data attributes\");\r\n//     // //assert.strictEqual( $text.data(\"another\"), false, \"Setting data attributes are not affected by boolean settings\" );\r\n//     // assert.strictEqual($text.setAttr(\"aria-disabled\", false).getAttr(\"aria-disabled\"), \"false\", \"Setting aria attributes are not affected by boolean settings\");\r\n\r\n//     // document.getElementById(\"foo\").setAttr(\"contenteditable\", true);\r\n//     // assert.strictEqual(document.getElementById(\"foo\").getAttr(\"contenteditable\"), \"true\", \"Enumerated attributes are set properly\");\r\n\r\n//     // assert.strictEqual(dom.document.getAttr(\"nonexisting\"), null, \"attr works correctly for non existing attributes.\");\r\n//     // assert.strictEqual(dom.document.setAttr(\"something\", \"foo\").getAttr(\"something\"), \"foo\", \"attr falls back to prop on unsupported arguments\");\r\n\r\n//     // var table = document.getElementById(\"table\");\r\n\r\n//     // table.append(\"<tr><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr><tr><td>cell</td><td>cell</td></tr>\");\r\n\r\n\r\n//     // var td = table.find(\"td\");\r\n//     // td.setAttr(\"rowspan\", \"2\");\r\n\r\n//     // // FIXME:  why  ?\r\n//     // // assert.strictEqual( td.rowSpan, 2, \"Check rowspan is correctly set\" );\r\n//     // //    td.setAttr(\"colspan\", \"2\");\r\n//     // //    assert.strictEqual( td.colSpan, 2, \"Check colspan is correctly set\" );\r\n//     // table.setAttr(\"cellspacing\", \"2\");\r\n//     // assert.strictEqual(table.dom.cellSpacing, \"2\", \"Check cellspacing is correctly set\");\r\n//     // assert.strictEqual(document.getElementById(\"area1\").getAttr(\"value\"), \"foobar\", \"Value attribute retrieves the property for backwards compatibility.\");\r\n\r\n//     // // for #1070\r\n//     // document.getElementById(\"name\").setAttr(\"someAttr\", \"0\");\r\n//     // assert.strictEqual(document.getElementById(\"name\").getAttr(\"someAttr\"), \"0\", \"Set attribute to a string of \\\"0\\\"\");\r\n//     // document.getElementById(\"name\").setAttr(\"someAttr\", 0);\r\n//     // assert.strictEqual(document.getElementById(\"name\").getAttr(\"someAttr\"), \"0\", \"Set attribute to the number 0\");\r\n//     // document.getElementById(\"name\").setAttr(\"someAttr\", 1);\r\n//     // assert.strictEqual(document.getElementById(\"name\").getAttr(\"someAttr\"), \"1\", \"Set attribute to the number 1\");\r\n\r\n//     // afterEach(); beforeEach();\r\n\r\n//     // // Type\r\n//     // var type = document.getElementById(\"check2\").getAttr(\"type\");\r\n//     // try {\r\n//     //     document.getElementById(\"check2\").setAttr(\"type\", \"hidden\");\r\n//     // } catch (e) {\r\n\r\n//     // }\r\n//     // assert.ok(true, \"Exception thrown when trying to change type property\");\r\n//     // // assert.strictEqual( type, document.getElementById(\"check2\").getAttr(\"type\"), \"Verify that you can't change the type of an input element\" );\r\n\r\n//     // var check = dom.create(\"input\");\r\n//     // //var thrown = true;\r\n//     // try {\r\n//     //     check.setAttr(\"type\", \"checkbox\");\r\n//     // } catch (e) {\r\n//     //     //thrown = false;\r\n//     // }\r\n//     // assert.ok(true, \"Exception thrown when trying to change type property\");\r\n//     // //assert.strictEqual( \"checkbox\", check.getAttr(\"type\"), \"Verify that you can change the type of an input element that isn't in the DOM\" );\r\n\r\n//     // var check = dom.parse(\"<input />\");\r\n//     // //var thrown = true;\r\n//     // try {\r\n//     //     check.setAttr(\"type\", \"checkbox\");\r\n//     // } catch (e) {\r\n//     //     //thrown = false;\r\n//     // }\r\n//     // assert.ok(true, \"Exception thrown when trying to change type property\");\r\n//     // //assert.strictEqual( \"checkbox\", check.getAttr(\"type\"), \"Verify that you can change the type of an input element that isn't in the DOM\" );\r\n\r\n//     // var button = document.getElementById(\"button\");\r\n//     // //var thrown = false;\r\n//     // try {\r\n//     //     button.setAttr(\"type\", \"submit\");\r\n//     // } catch (e) {\r\n//     //     //thrown = true;\r\n//     // }\r\n//     // assert.ok(true, \"Exception thrown when trying to change type property\");\r\n//     // //assert.strictEqual( \"button\", button.getAttr(\"type\"), \"Verify that you can't change the type of a button element\" );\r\n\r\n//     // var $radio = dom.parse(\"<input value='sup' type='radio'>\").appendTo(\"testForm\");\r\n\r\n//     // assert.strictEqual($radio!.textContent!, \"sup\", \"Value is not reset when type is set after value on a radio\");\r\n//     // // Setting attributes on svg element\r\n//     // var $svg = dom.parse(\"<svg xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' version='1.1' baseProfile='full' width='200' height='200'>\"\r\n//     //     + \"<circle cx='200' cy='200' r='150' />\"\r\n//     //     + \"</svg>\");\r\n\r\n//     // if ($svg.first().dom.tagName == \"SVG\") {\r\n//     //     $svg = $svg.first();\r\n//     // }\r\n\r\n\r\n\r\n\r\n//     // $svg.appendTo();\r\n//     // assert.strictEqual($svg.setAttr(\"cx\", 100).getAttr(\"cx\"), \"100\", \"Set attribute on svg element\");\r\n//     // $svg.remove();\r\n// }\r\n\r\n// // var bareObj = function (value) { return value; };\r\n// // var functionReturningObj = function (value) { return (function () { return value; }); };\r\n\r\n// export function getTextTest() {\r\n\r\n//     var expected = \"This link has class=\\\"blog\\\": Simon Willison's Weblog\";\r\n//     assert.strictEqual(document.getElementById(\"sap\")!.textContent!.replace(/[\\r\\n]/g, \"\").replace(\"hasclass\", \"has class\"), expected, \"Check for merged text of more then one element.\");\r\n\r\n//     // Check serialization of text values\r\n//     assert.strictEqual(document.createTextNode(\"foo\")!.textContent!, \"foo\", \"Text node was retreived from !.textContent!.\");\r\n\r\n//     var val = \"<div><b>Hello</b> cruel world!</div>\";\r\n//     dom.setText(document.getElementById(\"foo\")!, val);\r\n//     assert.strictEqual(document.getElementById(\"foo\")!.innerHTML.replace(/>/g, \"&gt;\"), \"&lt;div&gt;&lt;b&gt;Hello&lt;/b&gt; cruel world!&lt;/div&gt;\", \"Check escaped text\");\r\n\r\n//     (document.getElementById(\"text1\") as HTMLInputElement).value = \"bla\";\r\n//     assert.strictEqual(document.getElementById(\"text1\")!.textContent!, \"bla\", \"Check for modified value of input element\");\r\n\r\n//     afterEach();\r\n//     beforeEach();\r\n\r\n//     assert.strictEqual(document.getElementById(\"text1\")!.textContent!, \"Test\", \"Check for value of input element\");\r\n//     // ticket #1714 this caused a JS error in IE\r\n//     assert.strictEqual(document.getElementById(\"first\")!.textContent!, \"Try them out:\", \"Check a paragraph element to see if it has a value\");\r\n\r\n//     assert.strictEqual(document.getElementById(\"select2\")!.textContent!, \"3\", \"Call getText() on a single=\\\"single\\\" select\");\r\n\r\n//     //assert.deepEqual( document.getElementById(\"select3\")!.textContent!, \"1,2\", \"Call getText() on a multiple=\\\"multiple\\\" select\" );\r\n\r\n//     assert.strictEqual(document.getElementById(\"option3c\")!.textContent!, \"2\", \"Call getText() on a option element with value\");\r\n\r\n//     //assert.strictEqual( document.getElementById(\"option3a\")!.textContent!, \"Nothing\", \"Call getText() on a option element with empty value\" );\r\n\r\n//     assert.strictEqual(document.getElementById(\"option3e\")!.textContent!, \"no value\", \"Call getText() on a option element with no value attribute\");\r\n\r\n//     //assert.strictEqual( document.getElementById(\"option3a\")!.textContent!, \"Nothing\", \"Call getText() on a option element with no value attribute\" );\r\n\r\n//     // IE6 fails in this case. Just ignore it.\r\n//     dom.setText(document.getElementById(\"select3\")!, \"\");\r\n//     assert.deepEqual(document.getElementById(\"select3\")!.textContent!, \"\", \"Call getText() on a multiple=\\\"multiple\\\" select\");\r\n//     //assert.deepEqual( document.getElementById(\"select4\")!.textContent!, \"1,2,3\", \"Call getText() on multiple=\\\"multiple\\\" select with all disabled options\" );\r\n\r\n//     dom.setAttr(document.getElementById(\"select4\")!, \"disabled\", \"disabled\");\r\n//     //assert.deepEqual( document.getElementById(\"select4\")!.textContent!, \"1,2,3\", \"Call getText() on disabled multiple=\\\"multiple\\\" select\" );\r\n\r\n//     assert.strictEqual(document.getElementById(\"select5\")!.textContent!, \"3\", \"Check value on ambiguous select.\");\r\n\r\n//     dom.setText(document.getElementById(\"select5\")!, \"1\");\r\n//     assert.strictEqual(document.getElementById(\"select5\")!.textContent!, \"1\", \"Check value on ambiguous select.\");\r\n\r\n//     dom.setText(document.getElementById(\"select5\")!, \"3\");\r\n//     assert.strictEqual(document.getElementById(\"select5\")!.textContent!, \"3\", \"Check value on ambiguous select.\");\r\n\r\n//     // var checks = dom.parse(\"<input type='checkbox' name='test' value='1'/><input type='checkbox' name='test' value='2'/><input type='checkbox' name='test' value=''/><input type='checkbox' name='test'/>\").appendTo(\"#form\");\r\n//     // \r\n//     // assert.deepEqual( checks!.textContent!, \"\", \"Get unchecked values.\" );\r\n//     // \r\n//     // assert.strictEqual( checks.eq(3)!.textContent!, \"on\", \"Make sure a value of 'on' is provided if none is specified.\" );\r\n//     // \r\n//     // checks.setText(\"2\");\r\n//     // assert.deepEqual( checks.serialize(), \"test=2\", \"Get a single checked value.\" );\r\n//     // \r\n//     // checks.setText(\",1\");\r\n//     // assert.deepEqual( checks.serialize(), \"test=1&test=\", \"Get multiple checked values.\" );\r\n//     // \r\n//     // checks.setText(\",2\");\r\n//     // assert.deepEqual( checks.serialize(), \"test=2&test=\", \"Get multiple checked values.\" );\r\n//     // \r\n//     // checks.setText(\"1,on\");\r\n//     // assert.deepEqual( checks.serialize(), \"test=1&test=on\", \"Get multiple checked values.\" );\r\n\r\n//     //   checks.remove();\r\n\r\n//     var button = dom.after(document.getElementById(\"button\")!, \"<button value='foobar'>text</button>\");\r\n//     assert.strictEqual(button!.textContent!, \"text\", \"Value retrieval on a button does not return innerHTML\");\r\n//     assert.strictEqual(button.setText(\"baz\").getHtml(), \"baz\", \"Setting the value does not change innerHTML\");\r\n\r\n//     //   assert.strictEqual( dom.parse(\"<option/>\").setText(\"test\").getAttr(\"value\"), \"test\", \"Setting value sets the value attribute\" );\r\n// }\r\n\r\n// // export function cloneTest() {\r\n// //     assert.strictEqual(\"This is a normal link: Yahoo\", document.getElementById(\"en\")!.textContent!, \"Assert text for #en\");\r\n// //     var clone = document.getElementById(\"yahoo\").clone();\r\n// //     document.getElementById(\"first\").append(clone);\r\n// //     assert.strictEqual(\"Try them out:Yahoo\", document.getElementById(\"first\")!.textContent!, \"Check for clone\");\r\n// //     assert.strictEqual(\"This is a normal link: Yahoo\", document.getElementById(\"en\")!.textContent!, \"Reassert text for #en\");\r\n\r\n// //     var cloneTags = [\r\n// //         \"<table/>\", \"<tr/>\", \"<td/>\", \"<div/>\",\r\n// //         \"<button/>\", \"<ul/>\", \"<ol/>\", \"<li/>\",\r\n// //         \"<input type='checkbox' />\", \"<select/>\", \"<option/>\", \"<textarea/>\",\r\n// //         \"<tbody/>\", \"<thead/>\", \"<tfoot/>\", \"<iframe/>\"\r\n// //     ];\r\n// //     for (var i = 0; i < cloneTags.length; i++) {\r\n// //         var j = dom.parse(cloneTags[i]);\r\n// //         assert.strictEqual(j.dom.tagName, j.clone().dom.tagName, \"Clone a \" + cloneTags[i]);\r\n// //     }\r\n\r\n// //     var div = dom.parse(\"<div><ul><li>test</li></ul></div>\").on('click', function () {\r\n// //         assert.ok(true, \"Bound event still exists.\");\r\n// //     });\r\n\r\n// //     clone = div.clone(true);\r\n\r\n// //     // manually clean up detached elements\r\n// //     div.remove();\r\n\r\n// //     div = clone.clone(true);\r\n\r\n// //     // manually clean up detached elements\r\n// //     clone.remove();\r\n\r\n// //     assert.strictEqual(div.dom.nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\r\n// //     div.trigger(\"click\");\r\n\r\n// //     // manually clean up detached elements\r\n// //     div.remove();\r\n\r\n// //     div = dom.parse(\"<div/>\");\r\n// //     div.append(document.createElement(\"table\"));\r\n// //     div.find(\"table\").on('click', function () {\r\n// //         assert.ok(true, \"Bound event still exists.\");\r\n// //     });\r\n\r\n// //     clone = div.clone(true);\r\n// //     assert.strictEqual(clone.dom.nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\r\n// //     clone.find(\"table\").trigger(\"click\");\r\n\r\n// //     // manually clean up detached elements\r\n// //     div.remove();\r\n// //     clone.remove();\r\n\r\n// //     var divEvt = dom.parse(\"<div><ul><li>test</li></ul></div>\").on('click', function () {\r\n// //         assert.ok(false, \"Bound event still exists after .clone().\");\r\n// //     }),\r\n// //         cloneEvt = divEvt.clone(true, false);\r\n\r\n// //     // Make sure that doing .clone() doesn't clone events\r\n// //     cloneEvt.trigger(\"click\");\r\n\r\n// //     cloneEvt.remove();\r\n// //     divEvt.remove();\r\n\r\n// //     // this is technically an invalid object, but because of the special\r\n// //     // classid instantiation it is the only kind that IE has trouble with,\r\n// //     // so let's test with it too.\r\n// //     div = dom.parse(\"<div/>\").setHtml(\"<object height='355' width='425' classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\");\r\n\r\n// //     // !IE9\r\n// //     //clone = div.clone(true);\r\n// //     //assert.strictEqual( clone.getHtml(), div.getHtml(), \"Element contents cloned\" );\r\n// //     //assert.strictEqual( clone.nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\" );\r\n\r\n// //     // and here's a valid one.\r\n// //     div = dom.parse(\"<div/>\").setHtml(\"<object height='355' width='425' type='application/x-shockwave-flash' data='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='movie' value='http://www.youtube.com/v/3KANI2dpXLw&amp;hl=en'>  <param name='wmode' value='transparent'> </object>\");\r\n\r\n// //     clone = div.clone(true);\r\n// //     assert.strictEqual(clone.getHtml(), div.getHtml(), \"Element contents cloned\");\r\n// //     assert.strictEqual(clone.dom.nodeName.toUpperCase(), \"DIV\", \"DIV element cloned\");\r\n\r\n// //     // manually clean up detached elements\r\n// //     div.remove();\r\n// //     clone.remove();\r\n\r\n// //     var form = document.createElement(\"form\");\r\n// //     form.action = \"/test/\";\r\n// //     var div = document.createElement(\"div\");\r\n// //     div.appendChild(document.createTextNode(\"test\"));\r\n// //     form.appendChild(div);\r\n\r\n// //     assert.strictEqual(document.getElementById(form).clone().children().length, 1, \"Make sure we just get the form back.\");\r\n\r\n// //     //assert.strictEqual( document.find(\"body\").clone().tagName, \"BODY\", \"Make sure cloning body works\" );\r\n// // }\r\n\r\n// // test(\"clone(form element) (Bug #3879, #6655)Test() {\r\n// //     var element = dom.parse(\"<select><option>Foo</option><option selected>Bar</option></select>\");\r\n\r\n// //     assert.strictEqual(element.clone().find(\":selected\")!.textContent!, element.find(\":selected\")!.textContent!, \"Selected option cloned correctly\");\r\n\r\n// //     element = dom.parse(\"<input type='checkbox' value='foo'>\").setAttr(\"checked\", \"checked\");\r\n// //     clone = element.clone();\r\n\r\n// //     assert.strictEqual(clone.dom.defaultValue, \"foo\", \"Checked input defaultValue cloned correctly\");\r\n\r\n// //     // defaultChecked also gets set now due to setAttribute in attr, is this check still valid?\r\n// //     // assert.strictEqual( clone[0].defaultChecked, !dom.parse.support.noCloneChecked, \"Checked input defaultChecked cloned correctly\" );\r\n\r\n// //     // element = dom.parse(\"<input type='text' value='foo'>\");\r\n// //     // clone = element.clone();\r\n// //     // assert.strictEqual( clone.defaultValue, \"foo\", \"Text input defaultValue cloned correctly\" );\r\n\r\n// //     // element = dom.parse(\"<textarea>foo</textarea>\");\r\n// //     // clone = element.clone();\r\n// //     // assert.strictEqual( clone.defaultValue, \"foo\", \"Textarea defaultValue cloned correctly\" );\r\n// // });\r\n\r\n// // test(\"clone(multiple selected options)Test() {\r\n// //     expect(1);\r\n// //     var element = dom.parse(\"<select><option>Foo</option><option selected>Bar</option><option selected>Baz</option></select>\");\r\n\r\n// //     assert.strictEqual(element.clone().query(\":selected\").length, element.query(\":selected\").length, \"Multiple selected options cloned correctly\");\r\n\r\n// // });\r\n\r\n// export function setHtmlTest() {\r\n\r\n//     dom.parse.scriptorder = 0;\r\n\r\n//     var div = document.query(\"#qunit-fixture > div\");\r\n//     div.setHtml(\"<b>test</b>\");\r\n//     var pass = true;\r\n//     for (var i = 0; i < div.length; i++) {\r\n//         if (div[i].childNodes.length != 1) pass = false;\r\n//     }\r\n//     assert.ok(pass, \"Set HTML\");\r\n\r\n//     div = dom.parse(\"<div/>\").setHtml(\"<div id='parent_1'><div id='child_1'/></div><div id='parent_2'/>\");\r\n\r\n//     assert.strictEqual(div.children().length, 2, \"Make sure two child nodes exist.\");\r\n//     assert.strictEqual(div.children().children().length, 1, \"Make sure that a grandchild exists.\");\r\n\r\n//     var space = dom.parse(\"<div/>\").setHtml(\"&#160;\").dom.innerHTML;\r\n//     assert.ok(/^\\xA0$|^&nbsp;$/.test(space), \"Make sure entities are passed through correctly.\");\r\n//     assert.strictEqual(dom.parse(\"<div/>\").setHtml(\"&amp;\").dom.innerHTML, \"&amp;\", \"Make sure entities are passed through correctly.\");\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<style>.foobar{color:green;}</style>\");\r\n\r\n//     assert.strictEqual(document.getElementById(\"qunit-fixture\").children().length, 1, \"Make sure there is a child element.\");\r\n//     assert.strictEqual(document.getElementById(\"qunit-fixture\").children()[0].nodeName.toUpperCase(), \"STYLE\", \"And that a style element was inserted.\");\r\n\r\n//     //afterEach();beforeEach();\r\n//     //document.getElementById(\"qunit-fixture\").setHtml( \"<select/>\" );\r\n//     //document.find(\"#qunit-fixture select\").setHtml( \"<option>O1</option><option selected='selected'>O2</option><option>O3</option>\" );\r\n//     //assert.strictEqual( document.find(\"#qunit-fixture select\")!.textContent!, \"O2\", \"Selected option correct\" );\r\n\r\n//     var div = dom.parse(\"<div />\");\r\n//     assert.strictEqual(div.setHtml(5).getHtml(), \"5\", \"Setting a number as html\");\r\n//     assert.strictEqual(div.setHtml(0).getHtml(), \"0\", \"Setting a zero as html\");\r\n\r\n//     var div2 = dom.parse(\"<div/>\"), insert = \"&lt;div&gt;hello1&lt;/div&gt;\";\r\n//     assert.strictEqual(div2.setHtml(insert).getHtml().replace(/>/g, \"&gt;\"), insert, \"Verify escaped insertion.\");\r\n//     assert.strictEqual(div2.setHtml(\"x\" + insert).getHtml().replace(/>/g, \"&gt;\"), \"x\" + insert, \"Verify escaped insertion.\");\r\n//     // assert.strictEqual( div2.setHtml(\" \" + insert).getHtml().replace(/>/g, \"&gt;\"), \" \" + insert, \"Verify escaped insertion.\" );\r\n\r\n//     var map = dom.parse(\"<map/>\").setHtml(\"<area id='map01' shape='rect' coords='50,50,150,150' href='http://www.jquery.com/' alt='dom.parse'>\");\r\n\r\n//     assert.strictEqual(map.dom.childNodes.length, 1, \"The area was inserted.\");\r\n//     assert.strictEqual(map.dom.firstChild.nodeName.toLowerCase(), \"area\", \"The area was inserted.\");\r\n\r\n//     afterEach(); beforeEach();\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script type='something/else'>assert.ok( false, 'Non-script evaluated.' );</script><script type='text/javascript'>assert.ok( true, 'text/javascript is evaluated.' );</script><script>assert.ok( true, 'No type is evaluated.' );</script><div><script type='text/javascript'>assert.ok( true, 'Inner text/javascript is evaluated.' );</script><script>assert.ok( true, 'Inner No type is evaluated.' );</script><script type='something/else'>assert.ok( false, 'Non-script evaluated.' );</script></div>\");\r\n\r\n//     var child = document.getElementById(\"qunit-fixture\").query(\"script\");\r\n\r\n//     assert.strictEqual(child.length, 6, \"Make sure that two non-JavaScript script tags are left.\");\r\n//     assert.strictEqual(child.item(0).dom.type, \"something/else\", \"Verify type of script tag.\");\r\n//     assert.strictEqual(child.item(-1).dom.type, \"something/else\", \"Verify type of script tag.\");\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script>assert.ok( true, 'Test repeated injection of script.' );</script>\");\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script>assert.ok( true, 'Test repeated injection of script.' );</script>\");\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script>assert.ok( true, 'Test repeated injection of script.' );</script>\");\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script type='text/javascript'>assert.ok( true, 'dom.parse().getHtml().evalScripts() Evals Scripts Twice in Firefox, see #975 (1)' );</script>\");\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"foo <form><script type='text/javascript'>assert.ok( true, 'dom.parse().getHtml().evalScripts() Evals Scripts Twice in Firefox, see #975 (2)' );</script></form>\");\r\n\r\n//     document.getElementById(\"qunit-fixture\").setHtml(\"<script>assert.strictEqual(dom.parse.scriptorder++, 0, 'Script is executed in order');assert.strictEqual(dom.query('#scriptorder').length, 1,'Execute after html (even though appears before)')<\\/script><span id='scriptorder'><script>assert.strictEqual(dom.parse.scriptorder++, 1, 'Script (nested) is executed in order');assert.strictEqual(dom.query('#scriptorder').length, 1,'Execute after html')<\\/script></span><script>assert.strictEqual(dom.parse.scriptorder++, 2, 'Script (unnested) is executed in order');assert.strictEqual(dom.query('#scriptorder').length, 1,'Execute after html')<\\/script>\");\r\n// }\r\n\r\n// //export function emptyTest() {\r\n// //     assert.strictEqual(document.getElementById(\"ap\").children().empty()!.textContent!.length, 0, \"Check text is removed\");\r\n// //     assert.strictEqual(document.getElementById(\"ap\").children().length, 4, \"Check elements are not removed\");\r\n\r\n// // });\r\n\r\n// // test(\"clone - no exceptions for object elements #9587Test() {\r\n// //     expect(1);\r\n\r\n// //     try {\r\n// //         document.getElementById(\"no-clone-exception\").clone();\r\n// //         assert.ok(true, \"cloned with no exceptions\");\r\n// //     } catch (e) {\r\n// //         assert.ok(false, e.message);\r\n// //     }\r\n// // });\r\n// // module(\"Attributes\");\r\n\r\n// // var bareObj = function (value) { return value; };\r\n// // var functionReturningObj = function (value) { return (function () { return value; }); };\r\n\r\n// //export function getAttr('tabindex')Test() {\r\n// //     expect(8);\r\n\r\n// //     // elements not natively tabbable\r\n// //     assert.strictEqual(document.getElementById(\"listWithTabIndex\").getAttr(\"tabindex\"), \"5\", \"not natively tabbable, with tabindex set to 0\");\r\n// //     assert.strictEqual(document.getElementById(\"divWithNoTabIndex\").getAttr(\"tabindex\", 1), undefined, \"not natively tabbable, no tabindex set\");\r\n\r\n// //     // anchor with href\r\n// //     assert.strictEqual(document.getElementById(\"linkWithNoTabIndex\").getAttr(\"tabindex\", 1), undefined, \"anchor with href, no tabindex set\");\r\n// //     assert.strictEqual(document.getElementById(\"linkWithTabIndex\").getAttr(\"tabindex\", 1), \"2\", \"anchor with href, tabindex set to 2\");\r\n// //     assert.strictEqual(document.getElementById(\"linkWithNegativeTabIndex\").getAttr(\"tabindex\", 1), \"-1\", \"anchor with href, tabindex set to -1\");\r\n\r\n// //     // anchor without href\r\n// //     assert.strictEqual(document.getElementById(\"linkWithNoHrefWithNoTabIndex\").getAttr(\"tabindex\", 1), undefined, \"anchor without href, no tabindex set\");\r\n// //     assert.strictEqual(document.getElementById(\"linkWithNoHrefWithTabIndex\").getAttr(\"tabindex\", 1), \"1\", \"anchor without href, tabindex set to 2\");\r\n// //     assert.strictEqual(document.getElementById(\"linkWithNoHrefWithNegativeTabIndex\").getAttr(\"tabindex\", 1), \"-1\", \"anchor without href, no tabindex set\");\r\n// // });\r\n\r\n// //export function setAttr('tabindex', value)Test() {\r\n// //     expect(9);\r\n\r\n// //     var element = document.getElementById(\"divWithNoTabIndex\");\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\", 1), undefined, \"start with no tabindex\");\r\n\r\n// //     // set a positive string\r\n// //     element.setAttr(\"tabindex\", \"1\");\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"1\", \"set tabindex to 1 (string)\");\r\n\r\n// //     // set a zero string\r\n// //     element.setAttr(\"tabindex\", \"0\");\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"0\", \"set tabindex to 0 (string)\");\r\n\r\n// //     // set a negative string\r\n// //     element.setAttr(\"tabindex\", \"-1\");\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"-1\", \"set tabindex to -1 (string)\");\r\n\r\n// //     // set a positive number\r\n// //     element.setAttr(\"tabindex\", 1);\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"1\", \"set tabindex to 1 (number)\");\r\n\r\n// //     // set a zero number\r\n// //     element.setAttr(\"tabindex\", 0);\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"0\", \"set tabindex to 0 (number)\");\r\n\r\n// //     // set a negative number\r\n// //     element.setAttr(\"tabindex\", -1);\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"-1\", \"set tabindex to -1 (number)\");\r\n\r\n// //     element = document.getElementById(\"linkWithTabIndex\");\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"2\", \"start with tabindex 2\");\r\n\r\n// //     element.setAttr(\"tabindex\", -1);\r\n// //     assert.strictEqual(element.getAttr(\"tabindex\"), \"-1\", \"set negative tabindex\");\r\n// // });\r\n\r\n// //export function setAttr(String, null)Test() {\r\n// //     expect(12);\r\n// //     var $first;\r\n\r\n// //     assert.strictEqual(document.getElementById(\"mark\").setAttr(\"class\", null).getAttr(\"class\"), undefined, \"remove class\");\r\n// //     assert.strictEqual(document.getElementById(\"form\").setAttr(\"id\", null).getAttr(\"id\"), undefined, \"Remove id\");\r\n// //     assert.strictEqual(document.getElementById(\"foo\").setAttr(\"style\", \"position:absolute;\").setAttr(\"style\", null).getAttr(\"style\"), undefined, \"Check removing style attribute\");\r\n// //     assert.strictEqual(document.getElementById(\"form\").setAttr(\"style\", \"position:absolute;\").setAttr(\"style\", null).getAttr(\"style\"), undefined, \"Check removing style attribute on a form\");\r\n// //     assert.strictEqual(dom.parse(\"<div style='position: absolute'></div>\").appendTo(\"foo\").setAttr(\"style\", null).node.style.cssText, \"\", \"Check removing style attribute (#9699 Webkit)\");\r\n// //     assert.strictEqual(dom.find(\"#fx-test-group\").setAttr(\"height\", \"3px\").setAttr(\"height\", null).dom.style.height, \"1px\", \"Removing height attribute has no effect on height set with style attribute\");\r\n\r\n// //     document.getElementById(\"check1\").setAttr(\"checked\", null).setAttr(\"checked\", true).setAttr(\"checked\", null);\r\n// //     assert.strictEqual(document.getElementById(\"check1\").checked, false, \"removeAttr sets boolean properties to false\");\r\n// //     document.getElementById(\"text1\").setAttr(\"readOnly\", true).setAttr(\"readonly\", null);\r\n// //     assert.strictEqual(document.getElementById(\"text1\").readOnly, false, \"removeAttr sets boolean properties to false\");\r\n\r\n// //     document.getElementById(\"option2c\").setAttr(\"selected\", null);\r\n// //     assert.strictEqual(document.getElementById(\"option2d\").getAttr(\"selected\", 1), \"selected\", \"Removing `selected` from an option that is not selected does not remove selected from the currently selected option (#10870)\");\r\n\r\n// //     try {\r\n// //         $first = document.getElementById(\"first\").setAttr(\"contenteditable\", \"true\").setAttr(\"contenteditable\", null);\r\n// //         assert.strictEqual($first.getAttr('contenteditable'), undefined, \"Remove the contenteditable attribute\");\r\n// //     } catch (e) {\r\n// //         assert.ok(false, \"Removing contenteditable threw an error (#10429)\");\r\n// //     }\r\n\r\n// //     $first = dom.parse(\"<div Case='mixed'></div>\");\r\n// //     assert.strictEqual($first.getAttr(\"Case\"), \"mixed\", \"case of attribute doesn't matter\");\r\n// //     $first.setAttr(\"Case\", null);\r\n// //     // IE 6/7 return empty string here, not undefined\r\n// //     assert.ok(!$first.getAttr(\"Case\"), \"mixed-case attribute was removed\");\r\n// // });\r\n\r\n// // if (\"value\" in document.createElement(\"meter\") &&\r\n// //     \"value\" in document.createElement(\"progress\")) {\r\n\r\n// //     test(\"getText() respects numbers without exception (Bug #9319)Test() {\r\n\r\n// //         var $meter = dom.parse(\"<meter min='0' max='10' value='5.6'></meter>\"),\r\n// //             $progress = dom.parse(\"<progress max='10' value='1.5'></progress>\");\r\n\r\n// //         //try {\r\n// //         assert.strictEqual(typeof $meter!.textContent!, \"string\", \"meter, returns a number and does not throw exception\");\r\n// //         // assert.strictEqual( $meter!.textContent!, $meter.value, \"meter, api matches host and does not throw exception\" );\r\n\r\n// //         assert.strictEqual(typeof $progress!.textContent!, \"string\", \"progress, returns a number and does not throw exception\");\r\n// //         //  assert.strictEqual( $progress!.textContent!, $progress.value, \"progress, api matches host and does not throw exception\" );\r\n\r\n// //         //} catch(e) {}\r\n\r\n// //         $meter.remove();\r\n// //         $progress.remove();\r\n// //     });\r\n// // }\r\n\r\n// // // testing if a form.reset() breaks a subsequent call to a select element's !.textContent! (in IE only)\r\n// // test(\"setText(select) after form.reset()Test() {\r\n\r\n// //     dom.parse(\"<form id='kk' name='kk'><select id='kkk'><option value='cf'>cf</option><option \tvalue='gf'>gf</option></select></form>\").appendTo(\"qunit-fixture\");\r\n\r\n// //     document.getElementById(\"kkk\").setText(\"gf\");\r\n\r\n// //     document.kk.reset();\r\n\r\n// //     assert.strictEqual(document.getElementById(\"kkk\").dom.value, \"cf\", \"Check value of select after form reset.\");\r\n// //     assert.strictEqual(document.getElementById(\"kkk\")!.textContent!, \"cf\", \"Check value of select after form reset.\");\r\n\r\n// //     // re-verify the multi-select is not broken (after form.reset) by our fix for single-select\r\n// //     //assert.deepEqual( document.getElementById(\"select3\")!.textContent!.split(','), [\"1\", \"2\"], \"Call getText() on a multiple=\\\"multiple\\\" select\" );\r\n\r\n// //     document.getElementById(\"kk\").remove();\r\n// // });\r\n\r\n// export function addClassTest() {\r\n\r\n//     var div = document.query(\"div\");\r\n//     div.addClass(\"test\");\r\n//     var pass = true;\r\n//     for (var i = 0; i < div.length; i++) {\r\n//         if (!~div[i].className.indexOf(\"test\")) {\r\n//             pass = false;\r\n//         }\r\n//     }\r\n//     assert.ok(pass, \"Add Class\");\r\n\r\n//     div = dom.parse(\"<div/>\");\r\n\r\n//     div.addClass(\"test\");\r\n//     assert.strictEqual(div.getAttr(\"class\"), \"test\", \"Make sure there's no extra whitespace.\");\r\n\r\n//     // div.setAttr(\"class\", \" foo\");\r\n//     // div.addClass( \"test\" );\r\n//     // assert.strictEqual( div.getAttr(\"class\"), \"foo test\", \"Make sure there's no extra whitespace.\" );\r\n\r\n//     div.setAttr(\"class\", \"foo\");\r\n//     div.addClass(\"bar baz\");\r\n//     assert.strictEqual(div.getAttr(\"class\"), \"foo bar baz\", \"Make sure there isn't too much trimming.\");\r\n\r\n//     div.removeClass();\r\n//     div.addClass(\"foo\").addClass(\"foo\")\r\n//     assert.strictEqual(div.getAttr(\"class\"), \"foo\", \"Do not add the same class twice in separate calls.\");\r\n\r\n//     div.addClass(\"fo\");\r\n//     assert.strictEqual(div.getAttr(\"class\"), \"foo fo\", \"Adding a similar class does not get interrupted.\");\r\n//     div.removeClass().addClass(\"wrap2\");\r\n//     assert.ok(div.addClass(\"wrap\").hasClass(\"wrap\"), \"Can add similarly named classes\");\r\n\r\n//     div.removeClass();\r\n//     div.addClass(\"bar bar\");\r\n//     assert.strictEqual(div.getAttr(\"class\"), \"bar\", \"Do not add the same class twice in the same call.\");\r\n\r\n// });\r\n\r\n// export function removeClassTest() {\r\n\r\n//     var $divs = document.query(\"div\");\r\n\r\n//     $divs.addClass(\"test\").removeClass(\"test\");\r\n\r\n//     assert.ok(!$divs.item(0).hasClass(\"test\"), \"Remove Class\");\r\n\r\n//     afterEach(); beforeEach();\r\n//     $divs = document.query(\"div\");\r\n\r\n//     $divs.addClass(\"test\").addClass(\"foo\").addClass(\"bar\");\r\n//     $divs.removeClass(\"test\").removeClass(\"bar\").removeClass(\"foo\");\r\n\r\n//     assert.ok(!$divs.item(0).hasClass(\"bar\"), \"Remove multiple classes\");\r\n\r\n//     afterEach(); beforeEach();\r\n//     $divs = document.query(\"div\");\r\n\r\n//     // Make sure that a null value doesn't cause problems\r\n//     // $divs[0].addClass(\"test\").removeClass( null );\r\n//     // assert.ok( $divs[0].hasClass(\"test\"), \"Null value passed to removeClass\" );\r\n\r\n//     //$divs[0].addClass(\"test\").removeClass( \"\" );\r\n//     //assert.ok( $divs[0].hasClass(\"test\"), \"Empty string passed to removeClass\" );\r\n\r\n//     var div = document.createElement(\"div\");\r\n//     div.className = \" test foo \";\r\n\r\n//     document.getElementById(div).removeClass(\"foo\");\r\n//     assert.strictEqual(div.className, \"test\", \"Make sure remaining className is trimmed.\");\r\n\r\n//     div.className = \" test \";\r\n\r\n//     document.getElementById(div).removeClass(\"test\");\r\n//     assert.strictEqual(div.className, \"\", \"Make sure there is nothing left after everything is removed.\");\r\n// }\r\n\r\n// export function toggleClassTest() {\r\n\r\n//     var e = document.getElementById(\"firstp\")!;\r\n//     assert.ok(!dom.hasClass(e, \"test\"), \"Assert class not present\");\r\n//     dom.toggleClass(e, \"test\");\r\n//     assert.ok(dom.hasClass(e, \"test\"), \"Assert class present\");\r\n//     dom.toggleClass(e, \"test\");\r\n//     assert.ok(!dom.hasClass(e, \"test\"), \"Assert class not present\");\r\n\r\n//     // class name with a boolean\r\n//     dom.toggleClass(e, \"test\", false);\r\n//     assert.ok(!dom.hasClass(e, \"test\"), \"Assert class not present\");\r\n//     dom.toggleClass(e, \"test\", true);\r\n//     assert.ok(dom.hasClass(e, \"test\"), \"Assert class present\");\r\n//     dom.toggleClass(e, \"test\", false);\r\n//     assert.ok(!dom.hasClass(e, \"test\"), \"Assert class not present\");\r\n\r\n//     // // multiple class names\r\n//     // dom.addClass(e, \"testA testB\");\r\n//     // assert.ok((dom.hasClass(e, \"testA\")), \"Assert 2 different classes present\");\r\n//     // // e.toggleClass( \"testB testC\" );\r\n//     // // assert.ok( (e.hasClass(\"testA\") && !e.is(\".testB\")), \"Assert 1 class added, 1 class removed, and 1 class kept\" );\r\n//     // // e.toggleClass( \"testA testC\" );\r\n//     // // assert.ok( (!e.hasClass(\"testA\") && !e.hasClass(\"testB\") && !e.hasClass(\"testC\")), \"Assert no class present\" );\r\n\r\n//     // // toggleClass storage\r\n//     // // e.toggleClass(true);\r\n//     // // assert.ok( e.dom.className === \"\", \"Assert class is empty (data was empty)\" );\r\n//     // dom.addClass(e, \"testD testE\");\r\n//     // assert.ok(dom.hasClass(e, \"testD\") && dom.hasClass(e, \"testE\"), \"Assert class present\");\r\n//     //e.toggleClass(e.dom.className);\r\n//     //assert.ok( !e.hasClass(\"testD\") || !e.hasClass(\"testE\"), \"Assert class not present\" );\r\n//     //e.toggleClass(e.dom.className);\r\n//     //assert.ok( e.hasClass(\"testD\") && e.hasClass(\"testE\"), \"Assert class present (restored from data)\" );\r\n//     //e.toggleClass(e.dom.className, false);\r\n//     //assert.ok( !e.hasClass(\"testD\") || !e.hasClass(\"testE\"), \"Assert class not present\" );\r\n//     //e.toggleClass(e.dom.className, true);\r\n//     //assert.ok( e.hasClass(\"testD\") && e.hasClass(\"testE\"), \"Assert class present (restored from data)\" );\r\n//     //e.toggleClass(e.dom.className);\r\n//     //e.toggleClass(e.dom.className, false);\r\n//     //e.toggleClass(e.dom.className);\r\n//     //assert.ok( e.hasClass(\"testD\") && e.hasClass(\"testE\"), \"Assert class present (restored from data)\" );\r\n\r\n//     // Cleanup\r\n//     dom.removeClass(e, \"testD\");\r\n// }\r\n\r\n// // test(\"addClass, removeClass, hasClassTest() {\r\n\r\n// //     var x = dom.parse(\"<p>Hi</p>\");\r\n\r\n// //     x.addClass(\"hi\");\r\n// //     assert.strictEqual(x.dom.className, \"hi\", \"Check single added class\");\r\n\r\n// //     x.addClass(\"foo bar\");\r\n// //     assert.strictEqual(x.dom.className, \"hi foo bar\", \"Check more added classes\");\r\n\r\n// //     x.removeClass();\r\n// //     assert.strictEqual(x.dom.className, \"\", \"Remove all classes\");\r\n\r\n// //     x.addClass(\"hi foo bar\");\r\n// //     x.removeClass(\"foo\");\r\n// //     assert.strictEqual(x.dom.className, \"hi bar\", \"Check removal of one class\");\r\n\r\n// //     assert.ok(x.hasClass(\"hi\"), \"Check has1\");\r\n// //     assert.ok(x.hasClass(\"bar\"), \"Check has2\");\r\n\r\n// //     // var x = dom.parse(\"<p class='class1\\nclass2\\tcla.ss3\\n\\rclass4'></p>\");\r\n// //     // assert.ok( x.hasClass(\"class1\"), \"Check hasClass with line feed\" );\r\n// //     // assert.ok( x.hasClass(\"class2\"), \"Check hasClass with tab\" );\r\n// //     // assert.ok( x.hasClass(\"cla\"), \"Check hasClass with dot\" );\r\n// //     // assert.ok( x.hasClass(\"class4\"), \"Check hasClass with carriage return\" );\r\n\r\n// //     x.removeClass(\"class2\");\r\n// //     assert.ok(x.hasClass(\"class2\") == false, \"Check the class has been properly removed\");\r\n// //     x.removeClass(\"cla\");\r\n// //     assert.ok(!x.hasClass(\"cla\"), \"Check the dotted class has not been removed\");\r\n// //     x.removeClass(\"cla\");\r\n// //     assert.ok(x.hasClass(\"cla\") == false, \"Check the dotted class has been removed\");\r\n// //     x.removeClass(\"class4\");\r\n// //     assert.ok(x.hasClass(\"class4\") == false, \"Check the class has been properly removed\");\r\n// // });\r\n\r\n\r\n// // module(\"Dimensions\");\r\n\r\n// //export function getWidthTest() {\r\n// //     expect(6);\r\n\r\n// //     var $div = document.getElementById(\"nothiddendiv\");\r\n// //     $div.setWidth(30);\r\n// //     assert.strictEqual($div.getWidth(), 30, \"Test set to 30 correctly\");\r\n// //     $div.hide();\r\n// //     assert.strictEqual($div.getWidth(), 30, \"Test hidden div\");\r\n// //     $div.show();\r\n// //     $div.setWidth(-1); // handle negative numbers by ignoring #1599\r\n// //     assert.strictEqual($div.getWidth(), 0, \"负值 转为 0\");\r\n// //     $div.setWidth(30);\r\n// //     $div.setStyle(\"padding\", \"20px\");\r\n// //     assert.strictEqual($div.getWidth(), 30, \"Test padding specified with pixels\");\r\n// //     $div.setStyle(\"border\", \"2px solid #fff\");\r\n// //     assert.strictEqual($div.getWidth(), 30, \"Test border specified with pixels\");\r\n\r\n// //     Object.extend($div.dom.style, { display: \"\", border: \"\", padding: \"\" });\r\n\r\n// //     Object.extend(document.getElementById(\"nothiddendivchild\").dom.style, { width: '20px', padding: \"3px\", border: \"2px solid #fff\" });\r\n// //     assert.strictEqual(document.getElementById(\"nothiddendivchild\").getWidth(), 20, \"Test child width with border and padding\");\r\n// //     Object.extend(document.getElementById(\"nothiddendiv\").dom.style, { border: \"\", padding: \"\", width: \"\" });\r\n// //     Object.extend(document.getElementById(\"nothiddendivchild\").dom.style, { border: \"\", padding: \"\", width: \"\" });\r\n\r\n// //     $div.dom.style.$display = null;\r\n// // });\r\n\r\n// //export function getHeightTest() {\r\n// //     expect(6);\r\n\r\n// //     var $div = document.getElementById(\"nothiddendiv\");\r\n// //     $div.setHeight(30);\r\n// //     assert.strictEqual($div.getHeight(), 30, \"Test set to 30 correctly\");\r\n// //     $div.hide();\r\n// //     assert.strictEqual($div.getHeight(), 30, \"Test hidden div\");\r\n// //     $div.show();\r\n// //     $div.setHeight(-1); // handle negative numbers by ignoring #1599\r\n// //     assert.strictEqual($div.getHeight(), 0, \"负值 转为 0\");\r\n\r\n// //     $div.setHeight(30);\r\n// //     $div.setStyle(\"padding\", \"20px\");\r\n// //     assert.strictEqual($div.getHeight(), 30, \"Test padding specified with pixels\");\r\n// //     $div.setStyle(\"border\", \"2px solid #fff\");\r\n// //     assert.strictEqual($div.getHeight(), 30, \"Test border specified with pixels\");\r\n\r\n// //     Object.extend($div.dom.style, { display: \"\", border: \"\", padding: \"\", height: \"1px\" });\r\n\r\n// //     Object.extend(document.getElementById(\"nothiddendivchild\").dom.style, { height: '20px', padding: \"3px\", border: \"2px solid #fff\" });\r\n// //     assert.strictEqual(document.getElementById(\"nothiddendivchild\").getHeight(), 20, \"Test child height with border and padding\");\r\n// //     Object.extend(document.getElementById(\"nothiddendiv\").dom.style, { border: \"\", padding: \"\", height: \"\" });\r\n// //     Object.extend(document.getElementById(\"nothiddendivchild\").dom.style, { border: \"\", padding: \"\", height: \"\" });\r\n\r\n// //     $div.dom.style.$display = null;\r\n// // });\r\n\r\n// // test(\"child of a hidden elem has accurate getWidth()/getHeight()  see #9441 #9300Test() {\r\n\r\n// //     // setup html\r\n// //     var $divNormal = dom.parse(\"<div>\").set({ width: \"100px\", height: \"100px\", border: \"10px solid white\", padding: \"2px\", margin: \"3px\" }),\r\n// //         $divChild = $divNormal.clone(),\r\n// //         $divHiddenParent = dom.parse(\"<div>\").set(\"display\", \"none\").append($divChild).appendTo();\r\n// //     $divNormal.appendTo();\r\n\r\n// //     // tests that child div of a hidden div works the same as a normal div\r\n// //     assert.strictEqual($divChild.getWidth(), $divNormal.getWidth(), \"child of a hidden element getWidth() is wrong see #9441\");\r\n\r\n// //     assert.strictEqual($divChild.getHeight(), $divNormal.getHeight(), \"child of a hidden element getHeight() is wrong see #9441\");\r\n\r\n// //     // teardown html\r\n// //     $divHiddenParent.remove();\r\n// //     $divNormal.remove();\r\n// // });\r\n\r\n// //export function getSizeTest() {\r\n\r\n// //     assert.strictEqual(document.getSize().y > 0, true, \"Test on document without margin option\");\r\n\r\n// //     var $div = document.getElementById(\"nothiddendiv\");\r\n// //     $div.set(\"height\", 30);\r\n\r\n// //     assert.strictEqual($div.getSize().y, 30, \"Test with only width set\");\r\n// //     $div.set(\"padding\", \"20px\");\r\n// //     assert.strictEqual($div.getSize().y, 70, \"Test with padding\");\r\n// //     $div.set(\"border\", \"2px solid #fff\");\r\n// //     assert.strictEqual($div.getSize().y, 74, \"Test with padding and border\");\r\n// //     $div.set(\"margin\", \"10px\");\r\n// //     assert.strictEqual($div.getSize().y, 74, \"Test with padding, border and margin without margin option\");\r\n// //     $div.hide();\r\n// //     assert.strictEqual($div.getSize().y, 0, \"Test hidden div with padding, border and margin with margin option\");\r\n\r\n// //     // reset styles\r\n// //     $div.set({ display: \"\", border: \"\", padding: \"\", width: \"\", height: \"\" });\r\n\r\n// //     var div = dom.parse(\"<div>\");\r\n\r\n// //     // Temporarily require 0 for backwards compat - should be auto\r\n// //     assert.strictEqual(div.getSize().y, 0, \"Make sure that disconnected nodes are handled.\");\r\n\r\n// //     div.remove();\r\n// // });\r\n// // module(\"Offset\");\r\n\r\n// // test(\"disconnected nodeTest() {\r\n// //     expect(2);\r\n\r\n// //     var result = dom.create(\"div\").getOffset();\r\n\r\n// //     assert.strictEqual(result.x, 0, \"Check top\");\r\n// //     assert.strictEqual(result.y, 0, \"Check left\");\r\n// // });\r\n\r\n// // var supportsScroll = false;\r\n\r\n// // testoffset(\"absolute\", function (iframe) {\r\n// //     expect(4);\r\n\r\n// //     var document = iframe.document, tests;\r\n\r\n// //     // force a scroll value on the main window\r\n// //     // this insures that the results will be wrong\r\n// //     // if the offset method is using the scroll offset\r\n// //     // of the parent window\r\n// //     var forceScroll = dom.parse(\"<div style='width: 2000px, height: 2000px'>\", iframe).appendTo();\r\n// //     iframe.scrollTo(200, 200);\r\n\r\n// //     if (document.documentElement.scrollTop || document.body.scrollTop) {\r\n// //         supportsScroll = true;\r\n// //     }\r\n\r\n// //     iframe.scrollTo(1, 1);\r\n\r\n\r\n// //     assert.strictEqual(getDom(document, \"absolute-1\").getPosition().x, 1, \"getDom(document, 'absolute-1').getPosition().x\");\r\n// //     assert.strictEqual(getDom(document, \"absolute-1\").getPosition().y, 1, \"getDom(document, 'absolute-1').getPosition().y\");\r\n\r\n\r\n// //     assert.strictEqual(getDom(document, \"absolute-1\").getOffset().x, 0, \"getDom(document, 'absolute-1').getOffset().x\");\r\n// //     assert.strictEqual(getDom(document, \"absolute-1\").getOffset().y, 0, \"getDom(document, 'absolute-1').getOffset().y\");\r\n\r\n// //     forceScroll.remove();\r\n// // });\r\n\r\n// // testoffset(\"absolute\", function (iframe) {\r\n\r\n// //     var document = iframe.document;\r\n\r\n// //     // get offset tests\r\n// //     var tests = [\r\n// //         { id: \"absolute-1\", x: 1, y: 1 },\r\n// //         { id: \"absolute-1-1\", x: 5, y: 5 },\r\n// //         { id: \"absolute-1-1-1\", x: 9, y: 9 },\r\n// //         { id: \"absolute-2\", x: 20, y: 20 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x, \"getDom(document, '\" + test.id + \"').getPosition().x\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.y, \"getDom(document, '\" + test.id + \"').getPosition().y\");\r\n// //     });\r\n\r\n\r\n// //     // get position\r\n// //     tests = [\r\n// //         { id: \"absolute-1\", y: 0, x: 0 },\r\n// //         { id: \"absolute-1-1\", y: 1, x: 1 },\r\n// //         { id: \"absolute-1-1-1\", y: 1, x: 1 },\r\n// //         { id: \"absolute-2\", y: 19, x: 19 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().y, test.y, \"getDom(document, '\" + test.id + \"').getOffset().y\");\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().x, test.x, \"getDom(document, '\" + test.id + \"').getOffset().x\");\r\n// //     });\r\n\r\n// //     // test #5781\r\n// //     var offset = getDom(document, \"positionTest\").setOffset({ y: 10, x: 10 }).getPosition();\r\n// //     assert.strictEqual(offset.y, 10, \"Setting offset on element with position absolute but 'auto' values.\")\r\n// //     assert.strictEqual(offset.x, 10, \"Setting offset on element with position absolute but 'auto' values.\")\r\n\r\n\r\n// //     // set offset\r\n// //     tests = [\r\n// //         { id: \"absolute-2\", y: 30, x: 30 },\r\n// //         { id: \"absolute-2\", y: 10, x: 10 },\r\n// //         { id: \"absolute-2\", y: -1, x: -1 },\r\n// //         { id: \"absolute-2\", y: 19, x: 19 },\r\n// //         { id: \"absolute-1-1-1\", y: 15, x: 15 },\r\n// //         { id: \"absolute-1-1-1\", y: 5, x: 5 },\r\n// //         { id: \"absolute-1-1-1\", y: -1, x: -1 },\r\n// //         { id: \"absolute-1-1-1\", y: 9, x: 9 },\r\n// //         { id: \"absolute-1-1\", y: 10, x: 10 },\r\n// //         { id: \"absolute-1-1\", y: 0, x: 0 },\r\n// //         { id: \"absolute-1-1\", y: -1, x: -1 },\r\n// //         { id: \"absolute-1-1\", y: 5, x: 5 },\r\n// //         { id: \"absolute-1\", y: 2, x: 2 },\r\n// //         { id: \"absolute-1\", y: 0, x: 0 },\r\n// //         { id: \"absolute-1\", y: -1, x: -1 },\r\n// //         { id: \"absolute-1\", y: 1, x: 1 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         getDom(document, test.id).setPosition({ y: test.y, x: test.x });\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().y, test.y, \"getDom(document, '\" + test.id + \"').setOffset({ y: \" + test.y + \" })\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x, \"getDom(document, '\" + test.id + \"').setOffset({ x: \" + test.x + \" })\");\r\n\r\n// //         getDom(document, test.id).setPosition({ x: test.x + 2, y: test.y + 2 })\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().y, test.y + 2, \"Setting one property at a time.\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x + 2, \"Setting one property at a time.\");\r\n\r\n\r\n// //     });\r\n\r\n\r\n// //     var offsets = getDom(document, 'positionTest').getOffset();\r\n// //     getDom(document, 'positionTest').setOffset(offsets);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().y, offsets.y, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().x, offsets.x, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n\r\n// //     var position = getDom(document, 'positionTest').getPosition();\r\n// //     getDom(document, 'positionTest').setPosition(position);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().y, position.y, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().x, position.x, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// // });\r\n\r\n// // testoffset(\"relative\", function (iframe) {\r\n\r\n// //     var document = iframe.document;\r\n\r\n// //     // IE is collapsing the top margin of 1px\r\n// //     var ie = navigator.isQuirks;\r\n\r\n// //     // get offset\r\n// //     var tests = [\r\n// //         { id: \"relative-1\", y: ie ? 6 : 7, x: 7 },\r\n// //         { id: \"relative-1-1\", y: ie ? 13 : 15, x: 15 },\r\n// //         { id: \"relative-2\", y: ie ? 141 : 142, x: 27 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().y, test.y, \"getDom(document, '\" + test.id + \"').getPosition().y\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x, \"getDom(document, '\" + test.id + \"').getPosition().x\");\r\n// //     });\r\n\r\n\r\n// //     // get position\r\n// //     tests = [\r\n// //         //{ id: \"relative-1\",   y: ie ?   5 :   6, x:  6 },\r\n// //         //{ id: \"relative-1-1\", y: ie ?   4 :   5, x:  5 },\r\n// //         //{ id: \"relative-2\",   y: ie ? 140 : 141, x: 26 }\r\n// //         { id: \"relative-1\", y: 0, x: 0 },\r\n// //         { id: \"relative-1-1\", y: 0, x: 0 },\r\n// //         { id: \"relative-2\", y: 20, x: 20 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().y, test.y, \"getDom(document, '\" + test.id + \"').getOffset().y\");\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().x, test.x, \"getDom(document, '\" + test.id + \"').getOffset().x\");\r\n// //     });\r\n\r\n\r\n// //     // set offset\r\n// //     tests = [\r\n// //         { id: \"relative-2\", y: 200, x: 50 },\r\n// //         { id: \"relative-2\", y: 100, x: 10 },\r\n// //         { id: \"relative-2\", y: -5, x: -5 },\r\n// //         { id: \"relative-2\", y: 142, x: 27 },\r\n// //         { id: \"relative-1-1\", y: 100, x: 100 },\r\n// //         { id: \"relative-1-1\", y: 5, x: 5 },\r\n// //         { id: \"relative-1-1\", y: -1, x: -1 },\r\n// //         { id: \"relative-1-1\", y: 15, x: 15 },\r\n// //         { id: \"relative-1\", y: 100, x: 100 },\r\n// //         { id: \"relative-1\", y: 0, x: 0 },\r\n// //         { id: \"relative-1\", y: -1, x: -1 },\r\n// //         { id: \"relative-1\", y: 7, x: 7 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         getDom(document, test.id).setOffset({ y: test.y, x: test.x });\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().y, test.y, \"getDom(document, '\" + test.id + \"').setOffset({ y: \" + test.y + \" })\");\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().x, test.x, \"getDom(document, '\" + test.id + \"').setOffset({ x: \" + test.x + \" })\");\r\n// //     });\r\n\r\n\r\n// //     var offsets = getDom(document, 'positionTest').getOffset();\r\n// //     getDom(document, 'positionTest').setOffset(offsets);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().y, offsets.y, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().x, offsets.x, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n\r\n// //     var position = getDom(document, 'positionTest').getPosition();\r\n// //     getDom(document, 'positionTest').setPosition(position);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().y, position.y, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().x, position.x, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// // });\r\n\r\n// // testoffset(\"static\", function (iframe) {\r\n\r\n// //     var document = iframe.document;\r\n\r\n// //     // IE is collapsing the top margin of 1px\r\n// //     var ie = navigator.isQuirks;\r\n\r\n// //     // get offset\r\n// //     var tests = [\r\n// //         { id: \"static-1\", y: ie ? 6 : 7, x: 7 },\r\n// //         { id: \"static-1-1\", y: ie ? 13 : 15, x: 15 },\r\n// //         { id: \"static-1-1-1\", y: ie ? 20 : 23, x: 23 },\r\n// //         { id: \"static-2\", y: ie ? 121 : 122, x: 7 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().y, test.y, \"getDom(document, '\" + test.id + \"').getPosition().y\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x, \"getDom(document, '\" + test.id + \"').getPosition().x\");\r\n// //     });\r\n\r\n\r\n// //     // get position\r\n// //     tests = [\r\n// //         //{ id: \"static-1\",     y: ie ?   5 :   6, x:  6 },\r\n// //         //{ id: \"static-1-1\",   y: ie ?  12 :  14, x: 14 },\r\n// //         //{ id: \"static-1-1-1\", y: ie ?  19 :  22, x: 22 },\r\n// //         //{ id: \"static-2\",     y: ie ? 120 : 121, x:  6 }\r\n// //         { id: \"static-1\", y: 0, x: 0 },\r\n// //         { id: \"static-1-1\", y: 0, x: 0 },\r\n// //         { id: \"static-1-1-1\", y: 0, x: 0 },\r\n// //         { id: \"static-2\", y: 20, x: 20 }\r\n// //     ];\r\n\r\n// //     // !Opera\r\n\r\n// //     //Object.each( tests, function(test) {\r\n// //     //\tassert.strictEqual( getDom(document,  test.id ).getOffset().y,  test.y,  \"getDom(document, '\" + test.id  + \"').getOffset().y\" );\r\n// //     //\tassert.strictEqual( getDom(document,  test.id ).getOffset().x, test.x, \"getDom(document, '\" + test.id +\"').getOffset().x\" );\r\n// //     //});\r\n\r\n\r\n// //     // set offset\r\n// //     tests = [\r\n// //         { id: \"static-2\", y: 200, x: 200 },\r\n// //         { id: \"static-2\", y: 100, x: 100 },\r\n// //         { id: \"static-2\", y: -2, x: -2 },\r\n// //         { id: \"static-2\", y: 121, x: 6 },\r\n// //         { id: \"static-1-1-1\", y: 50, x: 50 },\r\n// //         { id: \"static-1-1-1\", y: 10, x: 10 },\r\n// //         { id: \"static-1-1-1\", y: -1, x: -1 },\r\n// //         { id: \"static-1-1-1\", y: 22, x: 22 },\r\n// //         { id: \"static-1-1\", y: 25, x: 25 },\r\n// //         { id: \"static-1-1\", y: 10, x: 10 },\r\n// //         { id: \"static-1-1\", y: -3, x: -3 },\r\n// //         { id: \"static-1-1\", y: 14, x: 14 },\r\n// //         { id: \"static-1\", y: 30, x: 30 },\r\n// //         { id: \"static-1\", y: 2, x: 2 },\r\n// //         { id: \"static-1\", y: -2, x: -2 },\r\n// //         { id: \"static-1\", y: 7, x: 7 }\r\n// //     ];\r\n// //     Object.each(tests, function (test) {\r\n// //         getDom(document, test.id).setOffset({ y: test.y, x: test.x });\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().y, test.y, \"getDom(document, '\" + test.id + \"').setOffset({ y: \" + test.y + \" })\");\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().x, test.x, \"getDom(document, '\" + test.id + \"').setOffset({ x: \" + test.x + \" })\");\r\n// //     });\r\n\r\n\r\n// //     var offsets = getDom(document, 'positionTest').getOffset();\r\n// //     getDom(document, 'positionTest').setOffset(offsets);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().y, offsets.y, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().x, offsets.x, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n\r\n// //     var position = getDom(document, 'positionTest').getPosition();\r\n// //     getDom(document, 'positionTest').setPosition(position);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().y, position.y, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().x, position.x, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// // });\r\n\r\n// // testoffset(\"fixed\", function (iframe) {\r\n\r\n\r\n// //     if (navigator.isIE6) {\r\n\r\n\r\n// //         expect(0);\r\n\r\n\r\n// //         return\r\n\r\n// //     }\r\n\r\n// //     var document = iframe.document;\r\n\r\n// //     var tests = [\r\n// //         { id: \"fixed-1\", y: 1001, x: 1001 },\r\n// //         { id: \"fixed-2\", y: 1021, x: 1021 }\r\n// //     ];\r\n\r\n// //     Object.each(tests, function (test) {\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().y, test.y, \"getDom(document, '\" + test.id + \"').getPosition().y\");\r\n// //         assert.strictEqual(getDom(document, test.id).getPosition().x, test.x, \"getDom(document, '\" + test.id + \"').getPosition().x\");\r\n// //     });\r\n\r\n// //     tests = [\r\n// //         { id: \"fixed-1\", y: 100, x: 100 },\r\n// //         { id: \"fixed-1\", y: 0, x: 0 },\r\n// //         { id: \"fixed-1\", y: -4, x: -4 },\r\n// //         { id: \"fixed-2\", y: 200, x: 200 },\r\n// //         { id: \"fixed-2\", y: 0, x: 0 },\r\n// //         { id: \"fixed-2\", y: -5, x: -5 }\r\n// //     ];\r\n\r\n// //     Object.each(tests, function (test) {\r\n// //         getDom(document, test.id).setOffset({ y: test.y, x: test.x });\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().y, test.y, \"getDom(document, '\" + test.id + \"').setOffset({ y: \" + test.y + \" })\");\r\n// //         assert.strictEqual(getDom(document, test.id).getOffset().x, test.x, \"getDom(document, '\" + test.id + \"').setOffset({ x: \" + test.x + \" })\");\r\n// //     });\r\n\r\n// //     // Bug 8316\r\n// //     var noTopLeft = getDom(document, \"fixed-no-top-left\");\r\n// //     assert.strictEqual(noTopLeft.getPosition().y, 1007, \"Check offset top for fixed element with no top set\");\r\n// //     assert.strictEqual(noTopLeft.getPosition().x, 1007, \"Check offset left for fixed element with no left set\");\r\n\r\n\r\n// //     var offsets = getDom(document, 'positionTest').getOffset();\r\n// //     getDom(document, 'positionTest').setOffset(offsets);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().y, offsets.y, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getOffset().x, offsets.x, \"getDom(document, 'positionTest').setOffset().getOffset()\");\r\n\r\n// //     var position = getDom(document, 'positionTest').getPosition();\r\n// //     getDom(document, 'positionTest').setPosition(position);\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().y, position.y, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// //     assert.strictEqual(getDom(document, 'positionTest').getPosition().x, position.x, \"getDom(document, 'positionTest').setPosition().getPosition()\");\r\n// // });\r\n\r\n// // testoffset(\"table\", function (iframe) {\r\n\r\n// //     var document = iframe.document;\r\n// //     expect(4);\r\n\r\n// //     assert.strictEqual(getDom(document, \"table-1\").getPosition().y, 6, \"getDom(document, 'table-1').getPosition().y\");\r\n// //     assert.strictEqual(getDom(document, \"table-1\").getPosition().x, 6, \"getDom(document, 'table-1').getPosition().x\");\r\n\r\n// //     assert.strictEqual(getDom(document, \"th-1\").getPosition().y, 10, \"getDom(document, 'th-1').getPosition().y\");\r\n// //     assert.strictEqual(getDom(document, \"th-1\").getPosition().x, 10, \"getDom(document, 'th-1').getPosition().x\");\r\n// // });\r\n\r\n// // testoffset(\"scroll\", function (iframe) {\r\n\r\n// //     var document = iframe.document;\r\n\r\n// //     var ie = navigator.isQuirks;\r\n\r\n// //     // IE is collapsing the top margin of 1px\r\n// //     assert.strictEqual(new Dom(document.getElementById(\"scroll-1\")).getPosition().y, ie ? 6 : 7, \"getDom(document, 'scroll-1').getPosition().y\");\r\n// //     assert.strictEqual(new Dom(document.getElementById(\"scroll-1\")).getPosition().x, 7, \"getDom(document, 'scroll-1').getPosition().x\");\r\n\r\n// //     // IE is collapsing the top margin of 1px\r\n// //     assert.strictEqual(getDom(document, \"scroll-1-1\").getPosition().y, ie ? 9 : 11, \"getDom(document, 'scroll-1-1').getPosition().y\");\r\n// //     assert.strictEqual(getDom(document, \"scroll-1-1\").getPosition().x, 11, \"getDom(document, 'scroll-1-1').getPosition().x\");\r\n\r\n\r\n// //     // scroll offset tests .scrollTop/Left\r\n// //     assert.strictEqual(getDom(document, \"scroll-1\").getScroll().y, 5, \"getDom(document, 'scroll-1').getScroll().y\");\r\n// //     assert.strictEqual(getDom(document, \"scroll-1\").getScroll().x, 5, \"getDom(document, 'scroll-1').getScroll().x\");\r\n\r\n// //     assert.strictEqual(getDom(document, \"scroll-1-1\").getScroll().y, 0, \"getDom(document, 'scroll-1-1').getScroll().y\");\r\n// //     assert.strictEqual(getDom(document, \"scroll-1-1\").getScroll().x, 0, \"getDom(document, 'scroll-1-1').getScroll().x\");\r\n\r\n// //     // assert.strictEqual( document.getElementById(document.body).getScroll().y, 0, \"document.getElementById(document.body).getScroll().y\" );\r\n// //     // assert.strictEqual( document.getElementById(document.body).getScroll().x, 0, \"document.getElementById(document.body).getScroll().y\" );\r\n\r\n// //     iframe.name = \"test\";\r\n\r\n// //     assert.strictEqual(document.getScroll().y, 1000, \"getDom(document, document).getScroll().y\");\r\n// //     assert.strictEqual(document.getScroll().x, 1000, \"getDom(document, document).getScroll().x\");\r\n\r\n// //     document.setScroll(0, 0);\r\n// //     assert.strictEqual(document.getScroll().y, 0, \"document.getScroll().y other document\");\r\n// //     assert.strictEqual(document.getScroll().x, 0, \"document.getScroll().x other document\");\r\n\r\n// //     assert.strictEqual(document.setScroll(null, 100), document, \"getDom(document, ).scrollTop(100) testing setter on empty jquery object\");\r\n// //     assert.strictEqual(document.setScroll(100, null), document, \"getDom(document, ).scrollLeft(100) testing setter on empty jquery object\");\r\n// //     assert.strictEqual(document.setScroll(null, null), document, \"getDom(document, ).setScroll(null, null) testing setter on empty jquery object\");\r\n// //     assert.strictEqual(document.getScroll().y, 100, \"getDom(document, ).scrollTop(100) testing setter on empty jquery object\");\r\n// //     assert.strictEqual(document.getScroll().x, 100, \"getDom(document, ).scrollLeft(100) testing setter on empty jquery object\");\r\n// // });\r\n\r\n// // testoffset(\"body\", function (iframe) {\r\n// //     expect(2);\r\n// //     assert.strictEqual(document.getElementById(iframe.document.body).getPosition().y, 1, \"document.body.getPosition().y\");\r\n// //     assert.strictEqual(document.getElementById(iframe.document.body).getPosition().x, 1, \"document.body.getPosition().x\");\r\n// // });\r\n\r\n// // test(\"offsetParentTest() {\r\n\r\n// //     var body = document.getElementById(document.body).offsetParent();\r\n// //     assert.strictEqual(body.dom, document.body, \"The body is its own offsetParent.\");\r\n\r\n// //     var header = getDom(document, \"qunit-header\").offsetParent();\r\n// //     assert.strictEqual(header.dom, document.body, \"The body is the offsetParent.\");\r\n\r\n// //     var div = getDom(document, \"nothiddendivchild\").offsetParent();\r\n// //     assert.strictEqual(div.dom, document.body, \"The body is the offsetParent.\");\r\n\r\n// //     getDom(document, \"nothiddendiv\").setStyle(\"position\", \"relative\");\r\n\r\n// //     div = getDom(document, \"nothiddendivchild\").offsetParent();\r\n// //     assert.strictEqual(div.dom, getDom(document, \"nothiddendiv\").dom, \"The div is the offsetParent.\");\r\n\r\n// //     div = document.getElementById(document.body).offsetParent();\r\n// //     assert.strictEqual(div.dom, document.body, \"The body is the offsetParent.\");\r\n// // });\r\n\r\n// // test(\"fractions (see #7730 and #7885)Test() {\r\n// //     expect(2);\r\n\r\n// //     document.getElementById(document.body).append('<div id=\"fractions\"/>');\r\n\r\n// //     var expected = { y: 1000, x: 1000 };\r\n// //     var div = getDom(document, 'fractions');\r\n\r\n// //     div.setStyle('position', 'absolute');\r\n// //     div.setStyle('left', '1000.7432222px');\r\n// //     div.setStyle('top', '1000.532325px');\r\n// //     div.setStyle('width', 100);\r\n// //     div.setStyle('height', 100);\r\n\r\n// //     div.setOffset(expected);\r\n\r\n// //     var result = div.getPosition();\r\n\r\n// //     assert.strictEqual(result.y, expected.y, \"Check top\");\r\n// //     assert.strictEqual(result.x, expected.x, \"Check left\");\r\n\r\n// //     div.remove();\r\n// // });\r\n\r\n// // function testoffset(name, fn) {\r\n\r\n// //     test(name, function () {\r\n// //         // pause execution for now\r\n// //         stop();\r\n\r\n// //         // load fixture in iframe\r\n// //         var iframe = loadFixture(),\r\n// //             win = iframe.contentWindow,\r\n// //             interval = setInterval(function () {\r\n// //                 if (win && win.Dom && win.dom.isReady) {\r\n// //                     clearInterval(interval);\r\n// //                     // continue\r\n// //                     start();\r\n// //                     // call actual tests passing the correct jQuery isntance to use\r\n// //                     fn.call(this, win);\r\n// //                     document.body.removeChild(iframe);\r\n// //                     iframe = null;\r\n// //                 }\r\n// //             }, 15);\r\n// //     });\r\n\r\n// //     function loadFixture() {\r\n// //         var src = \"./data/offset/\" + name + \".html?\" + parseInt(Math.random() * 1000, 10),\r\n// //             iframe = dom.parse(\"<iframe />\").set({\r\n// //                 width: 500, height: 500, position: \"absolute\", top: -600, left: -600, visibility: \"hidden\"\r\n// //             }).appendTo().dom;\r\n// //         iframe.contentWindow.location = src;\r\n// //         return iframe;\r\n// //     }\r\n// // }\r\n\r\n\r\n\r\n// // function getDom(document, id) {\r\n// //     return document.getElementById(document.getElementById(id));\r\n// // }\r\n// // module(\"Styles\");\r\n\r\n// //export function getStyleTest() {\r\n\r\n// //     assert.strictEqual(document.getElementById(\"qunit-fixture\").getStyle(\"display\"), \"block\", \"Check for css property \\\"display\\\"\");\r\n\r\n// //     assert.ok(!dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modifying CSS display: Assert element is visible\");\r\n// //     document.getElementById(\"nothiddendiv\").setStyle('display', \"none\");\r\n// //     assert.ok(dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modified CSS display: Assert element is hidden\");\r\n// //     document.getElementById(\"nothiddendiv\").setStyle('display', \"block\");\r\n// //     assert.ok(!dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modified CSS display: Assert element is visible\");\r\n\r\n// //     var div = dom.parse(\"<div>\");\r\n\r\n// //     // These should be \"auto\" (or some better value)\r\n// //     // temporarily provide \"0px\" for backwards compat\r\n// //     assert.strictEqual(div.getWidth(), 0, \"Width on disconnected node.\");\r\n// //     assert.strictEqual(div.getHeight(), 0, \"Height on disconnected node.\");\r\n\r\n// //     div.setStyle('width', 4).setStyle('height', 4);\r\n\r\n// //     assert.strictEqual(div.getStyle(\"width\"), \"4px\", \"Width on disconnected node.\");\r\n// //     assert.strictEqual(div.getStyle(\"height\"), \"4px\", \"Height on disconnected node.\");\r\n\r\n// //     var div2 = dom.parse(\"<div style='display:none;'><input type='text' style='height:20px;'/><textarea style='height:20px;'/><div style='height:20px;'></div></div>\").appendTo();\r\n\r\n// //     assert.strictEqual(div2.find(\"input\").getStyle(\"height\"), \"20px\", \"Height on hidden input.\");\r\n// //     assert.strictEqual(div2.find(\"textarea\").getStyle(\"height\"), \"20px\", \"Height on hidden textarea.\");\r\n// //     assert.strictEqual(div2.find(\"div\").getStyle(\"height\"), \"20px\", \"Height on hidden textarea.\");\r\n\r\n// //     div2.remove();\r\n\r\n// //     // handle negative numbers by ignoring #1599, #4216\r\n// //     document.getElementById(\"nothiddendiv\").setStyle('width', 1).setStyle('height', 1);\r\n\r\n// //     var width = parseFloat(document.getElementById(\"nothiddendiv\").getStyle(\"width\")), height = parseFloat(document.getElementById(\"nothiddendiv\").getStyle(\"height\"));\r\n// //     document.getElementById(\"nothiddendiv\").setStyle('width', -1).setStyle('height', -1);\r\n\r\n// //     assert.strictEqual(dom.parse(\"<div style='display: none;'>\").getStyle(\"display\"), \"none\", \"Styles on disconnected nodes\");\r\n\r\n// //     document.getElementById(\"floatTest\").setStyle(\"float\", \"right\");\r\n// //     assert.strictEqual(document.getElementById(\"floatTest\").getStyle(\"float\"), \"right\", \"Modified CSS float using \\\"float\\\": Assert float is right\");\r\n// //     document.getElementById(\"floatTest\").setStyle(\"font-size\", \"30px\");\r\n// //     assert.strictEqual(document.getElementById(\"floatTest\").getStyle(\"font-size\"), \"30px\", \"Modified CSS font-size: Assert font-size is 30px\");\r\n// //     Object.map(\"0 0.25 0.5 0.75 1\", function (n, i) {\r\n// //         document.getElementById(\"foo\").setStyle('opacity', n);\r\n\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), n, \"Assert opacity is \" + n + \" as a String\");\r\n// //         document.getElementById(\"foo\").setStyle('opacity', parseFloat(n));\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), n, \"Assert opacity is \" + parseFloat(n) + \" as a Number\");\r\n// //     });\r\n// //     document.getElementById(\"foo\").setStyle('opacity', \"\");\r\n// //     assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), \"1\", \"Assert opacity is 1 when set to an empty String\");\r\n\r\n// //     document.getElementById(\"empty\").setStyle('opacity', \"1\");\r\n// //     assert.strictEqual(document.getElementById(\"empty\").getStyle(\"opacity\"), \"1\", \"Assert opacity is taken from style attribute when set vs stylesheet in IE with filters\");\r\n// //     eval(\"-[1,]\") ?\r\n// //         assert.ok(true, \"Requires the same number of tests\") :\r\n// //         assert.ok(~document.getElementById(\"empty\").dom.currentStyle.filter.indexOf(\"gradient\"), \"Assert setting opacity doesn't overwrite other filters of the stylesheet in IE\");\r\n\r\n// //     var div = document.getElementById(\"nothiddendiv\"), child = document.getElementById(\"nothiddendivchild\");\r\n\r\n// //     assert.strictEqual(parseInt(div.getStyle(\"fontSize\")), 16, \"Verify fontSize px set.\");\r\n// //     assert.strictEqual(parseInt(div.getStyle(\"font-size\")), 16, \"Verify fontSize px set.\");\r\n// //     assert.strictEqual(parseInt(child.getStyle(\"fontSize\")), 16, \"Verify fontSize px set.\");\r\n// //     assert.strictEqual(parseInt(child.getStyle(\"font-size\")), 16, \"Verify fontSize px set.\");\r\n\r\n// //     child.setStyle(\"height\", \"100%\");\r\n// //     assert.strictEqual(child.dom.style.height, \"100%\", \"Make sure the height is being set correctly.\");\r\n\r\n// //     child.setAttr(\"class\", \"em\");\r\n// //     assert.strictEqual(parseInt(child.getStyle(\"fontSize\")), 32, \"Verify fontSize em set.\");\r\n\r\n// //     // Have to verify this as the result depends upon the browser's CSS\r\n// //     // support for font-size percentages\r\n// //     child.setAttr(\"class\", \"prct\");\r\n// //     var prctval = parseInt(child.getStyle(\"fontSize\")), checkval = 0;\r\n// //     if (prctval === 16 || prctval === 24) {\r\n// //         checkval = prctval;\r\n// //     }\r\n\r\n// //     assert.strictEqual(prctval, checkval, \"Verify fontSize % set.\");\r\n\r\n// //     assert.strictEqual(typeof child.getStyle(\"width\"), \"string\", \"Make sure that a string width is returned from css('width').\");\r\n\r\n// //     var old = child.dom.style.height;\r\n\r\n// //     // Test NaN\r\n// //     //child.setStyle(\"height\", parseFloat(\"zoo\"));\r\n// //     //assert.strictEqual( child.style.height, old, \"Make sure height isn't changed on NaN.\" );\r\n\r\n// //     // Test null\r\n// //     //child.setStyle(\"height\", null);\r\n// //     //assert.strictEqual( child.style.height, old, \"Make sure height isn't changed on null.\" );\r\n\r\n// //     old = child.dom.style.fontSize;\r\n\r\n// //     // Test NaN\r\n// //     //child.setStyle(\"font-size\", parseFloat(\"zoo\"));\r\n// //     //assert.strictEqual( child.style.fontSize, old, \"Make sure font-size isn't changed on NaN.\" );\r\n\r\n// //     // Test null\r\n// //     child.setStyle(\"font-size\", null);\r\n// //     assert.strictEqual(child.dom.style.fontSize, old, \"Make sure font-size isn't changed on null.\");\r\n// // });\r\n\r\n// //export function setStyleTest() {\r\n\r\n// //     assert.ok(!dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modifying CSS display: Assert element is visible\");\r\n// //     document.getElementById(\"nothiddendiv\").setStyle(\"display\", \"none\");\r\n// //     assert.ok(dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modified CSS display: Assert element is hidden\");\r\n// //     document.getElementById(\"nothiddendiv\").setStyle(\"display\", \"block\");\r\n// //     assert.ok(!dom.isHidden(document.getElementById(\"nothiddendiv\").dom), \"Modified CSS display: Assert element is visible\");\r\n\r\n// //     document.getElementById(\"nothiddendiv\").setStyle(\"top\", \"-1em\");\r\n// //     assert.ok(document.getElementById(\"nothiddendiv\").getStyle(\"top\"), -16, \"Check negative number in EMs.\");\r\n\r\n// //     document.getElementById(\"floatTest\").setStyle(\"float\", \"left\");\r\n// //     assert.strictEqual(document.getElementById(\"floatTest\").getStyle(\"float\"), \"left\", \"Modified CSS float using \\\"float\\\": Assert float is left\");\r\n// //     document.getElementById(\"floatTest\").setStyle(\"font-size\", \"20px\");\r\n// //     assert.strictEqual(document.getElementById(\"floatTest\").getStyle(\"font-size\"), \"20px\", \"Modified CSS font-size: Assert font-size is 20px\");\r\n\r\n// //     Object.map(\"0 0.25 0.5 0.75 1\", function (n, i) {\r\n// //         document.getElementById(\"foo\").setStyle(\"opacity\", n);\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a String\");\r\n// //         document.getElementById(\"foo\").setStyle(\"opacity\", parseFloat(n));\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), parseFloat(n), \"Assert opacity is \" + parseFloat(n) + \" as a Number\");\r\n// //     });\r\n// //     document.getElementById(\"foo\").setStyle(\"opacity\", \"\");\r\n// //     assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), \"1\", \"Assert opacity is 1 when set to an empty String\");\r\n\r\n// //     // using contents will get comments regular, text, and comment nodes\r\n// //     var j = document.getElementById(\"nonnodes\");\r\n// //     j.setStyle(\"overflow\", \"visible\");\r\n// //     assert.strictEqual(j.getStyle(\"overflow\"), \"visible\", \"Check node,textnode,comment css works\");\r\n// //     // opera sometimes doesn't update 'display' correctly, see #2037\r\n\r\n// //     document.getElementById(\"t2037\").innerHTML = document.getElementById(\"t2037\").innerHTML;\r\n// //     assert.strictEqual(document.getElementById(\"t2037\").find(\".hidden\").getStyle(\"display\"), \"none\", \"Make sure browser thinks it is hidden\");\r\n\r\n// //     var div = document.getElementById(\"nothiddendiv\"),\r\n// //         display = div.getStyle(\"display\"),\r\n// //         ret = div.setStyle(\"display\", '');\r\n\r\n// //     assert.strictEqual(ret, div, \"Make sure setting undefined returns the original set.\");\r\n// //     assert.strictEqual(div.getStyle(\"display\"), display, \"Make sure that the display wasn't changed.\");\r\n\r\n// //     // Test for Bug #5509\r\n// //     //var success = true;\r\n// //     //try {\r\n// //     //\tdocument.getElementById(\"foo\").setStyle(\"backgroundColor\", \"rgba(0, 0, 0, 0.1)\");\r\n// //     //}\r\n// //     //catch (e) {\r\n// //     //\tsuccess = false;\r\n// //     //}\r\n// //     //assert.ok( success, \"Setting RGBA values does not throw Error\" );\r\n\r\n\r\n// //     var div = dom.parse(\"<div>\").appendTo(\"qunit-fixture\");\r\n\r\n// //     div.setStyle(\"fill-opacity\", 0).setStyle(\"fill-opacity\", 1.0);\r\n\r\n// //     assert.strictEqual(div.getStyle(\"fill-opacity\"), 1, \"Do not append px to 'fill-opacity'\");\r\n\r\n// // });\r\n\r\n// // if (eval(\"!-[1,]\")) {\r\n// //     test(\"setOpacity(String, Object) for MSIE\", function () {\r\n// //         // for #1438, IE throws JS error when filter exists but doesn't have opacity in it\r\n// //         document.getElementById(\"foo\").setStyle(\"filter\", \"progid:DXImageTransform.Microsoft.Chroma(color='red');\");\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), \"1\", \"Assert opacity is 1 when a different filter is set in IE, #1438\");\r\n\r\n// //         var filterVal = \"progid:DXImageTransform.Microsoft.Alpha(opacity=30) progid:DXImageTransform.Microsoft.Blur(pixelradius=5)\";\r\n// //         var filterVal2 = \"progid:DXImageTransform.Microsoft.Alpha(opacity=100) progid:DXImageTransform.Microsoft.Blur(pixelradius=5)\";\r\n// //         var filterVal3 = \"progid:DXImageTransform.Microsoft.Blur(pixelradius=5)\";\r\n// //         document.getElementById(\"foo\").setStyle(\"filter\", filterVal);\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"filter\"), filterVal, \"filter works\");\r\n// //         document.getElementById(\"foo\").setStyle(\"opacity\", 1);\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"filter\"), filterVal2, \"Setting opacity in IE doesn't duplicate opacity filter\");\r\n// //         assert.strictEqual(document.getElementById(\"foo\").getStyle(\"opacity\"), \"1\", \"Setting opacity in IE with other filters works\");\r\n// //         document.getElementById(\"foo\").setStyle(\"filter\", filterVal3).setStyle(\"opacity\", 1);\r\n// //         assert.ok(document.getElementById(\"foo\").getStyle(\"filter\").indexOf(filterVal3) !== -1, \"Setting opacity in IE doesn't clobber other filters\");\r\n// //     });\r\n\r\n// //     test(\"Setting opacity to 1 properly removes filter: style\", function () {\r\n// //         var rfilter = /filter:[^;]*/i,\r\n// //             test = document.getElementById(\"t6652\").setStyle(\"opacity\", 1),\r\n// //             test2 = test.find(\"div\").setStyle(\"opacity\", 1);\r\n\r\n// //         function hasFilter(elem) {\r\n// //             var match = rfilter.exec(elem.dom.style.cssText);\r\n// //             if (match) {\r\n// //                 return true;\r\n// //             }\r\n// //             return false;\r\n// //         }\r\n// //         //   assert.ok( !hasFilter( test ), \"Removed filter attribute on element without filter in stylesheet\" );\r\n// //         assert.ok(hasFilter(test2), \"Filter attribute remains on element that had filter in stylesheet\");\r\n// //     });\r\n// // }\r\n\r\n// // test(\"getStyle('height') doesn't clear radio buttons\", function () {\r\n// //     expect(4);\r\n\r\n// //     var checkedtest = document.getElementById(\"checkedtest\");\r\n// //     // IE6 was clearing \"checked\" in getStyle(\"height\");\r\n// //     checkedtest.getStyle(\"height\");\r\n// //     assert.ok(checkedtest.find(\"[type='radio']\").dom.checked, \"Check first radio still checked.\");\r\n// //     assert.ok(!checkedtest.query(\"[type='radio']\").item(-1).dom.checked, \"Check last radio still NOT checked.\");\r\n// //     assert.ok(checkedtest.find(\"[type='checkbox']\").dom.checked, \"Check first checkbox still checked.\");\r\n// //     assert.ok(!checkedtest.query(\"[type='checkbox']\").item(-1).dom.checked, \"Check last checkbox still NOT checked.\");\r\n// // });\r\n\r\n// // /*\r\n// // test(\":visible selector works properly on table elements (bug #4512)\", function () {\r\n// // \texpect(1);\r\n\r\n// // \tvar table = dom.parse(\"<table/>\").setHtml(\"<tr><td style='display:none'>cell</td><td>cell</td></tr>\");\r\n// // \tassert.strictEqual(table.find('td').isHidden(), true, \"hidden cell is not perceived as visible\");\r\n// // });\r\n\r\n\r\n// // */\r\n\r\n// // /*\r\n\r\n// // test(\":visible selector works properly on children with a hidden parent\", function () {\r\n// // \texpect(1);\r\n// // \tvar table = dom.parse(\"<table/>\").setStyle(\"display\", \"none\").setHtml(\"<tr><td>cell</td><td>cell</td></tr>\");\r\n// // \tassert.strictEqual(table.find('td').isHidden(), true, \"hidden cell children not perceived as visible\");\r\n// // });\r\n\r\n\r\n// // */\r\n\r\n// // test(\"internal ref to elem.runtimeStyle\", function () {\r\n// //     expect(1);\r\n// //     var result = true;\r\n\r\n// //     try {\r\n// //         document.getElementById(\"foo\").setStyle('width', \"0%\").getStyle(\"width\");\r\n// //     } catch (e) {\r\n// //         result = false;\r\n// //     }\r\n\r\n// //     assert.ok(result, \"elem.runtimeStyle does not throw exception\");\r\n// // });\r\n\r\n// // test(\"marginRight computed style\", function () {\r\n// //     expect(1);\r\n\r\n// //     var div = document.getElementById(\"foo\");\r\n// //     div\r\n// //         .setStyle('width', '1px')\r\n// //         .setStyle('marginRight', 0);\r\n\r\n// //     assert.strictEqual(div.getStyle(\"marginRight\"), \"0px\", \"marginRight correctly calculated with a width and display block\");\r\n// // });\r\n\r\n\r\n// // /*\r\n\r\n// // test(\"Element.styles behavior\", function() {\r\n// // \tvar div = dom.parse( \"<div>\" ).appendTo(document.body).set({\r\n// // \t\tposition: \"absolute\",\r\n// // \t\ttop: 0,\r\n// // \t\tleft: 10\r\n// // \t});\r\n// // \tElement.styles.top = \"left\";\r\n// // \tassert.strictEqual( div.getStyle(\"top\"), \"10px\", \"the fixed property is used when accessing the computed style\");\r\n// // \tdiv.setStyle(\"top\", \"100px\");\r\n// // \tassert.strictEqual( div.style.left, \"100px\", \"the fixed property is used when setting the style\");\r\n// // \tElement.styles.top = undefined;\r\n// // });\r\n\r\n\r\n// // */\r\n\r\n// // test(\"widows & orphans\", function () {\r\n\r\n// //     var p = dom.parse(\"<p>\").appendTo(\"qunit-fixture\");\r\n\r\n// //     if (\"widows\" in p.dom.style) {\r\n// //         expect(4);\r\n// //         p.setStyle('widows', 0).setStyle('orphans', 0);\r\n\r\n// //         assert.strictEqual(p.getStyle(\"widows\"), 0, \"widows correctly start with value 0\");\r\n// //         assert.strictEqual(p.getStyle(\"orphans\"), 0, \"orphans correctly start with value 0\");\r\n\r\n// //         p.setStyle('widows', 3).setStyle('orphans', 3);\r\n\r\n// //         assert.strictEqual(p.getStyle(\"widows\"), 3, \"widows correctly start with value 3\");\r\n// //         assert.strictEqual(p.getStyle(\"orphans\"), 3, \"orphans correctly start with value 3\");\r\n\r\n// //     } else {\r\n\r\n// //         expect(1);\r\n// //         assert.ok(true, \"Does not attempt to test for style props that definitely don't exist in older versions of IE\");\r\n// //     }\r\n\r\n\r\n// //     p.remove();\r\n// // });\r\n\r\n"],"mappings":"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"}