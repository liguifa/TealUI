{"version":3,"file":"ajax-more.js","sourceRoot":"../../..","sources":["components/ux/ajax/ajax-more.ts"],"sourcesContent":["// import { formatQuery } from 'util/query';\r\n\r\n// /**\r\n//  * 表示一个 AJAX 请求。\r\n//  */\r\n// class Ajax {\r\n\r\n//     /**\r\n//      * 当前请求的类型。如 \"GET\"。\r\n//      */\r\n//     type: string;\r\n\r\n//     /**\r\n//      * 请求的地址。\r\n//      */\r\n//     url: string;\r\n\r\n//     /**\r\n//      * 当前请求的数据。\r\n//      */\r\n//     data: string;\r\n\r\n//     /**\r\n//      * 设置额外的请求头。\r\n//      */\r\n//     headers: { [name: string]: string };\r\n\r\n//     /**\r\n//      * 请求是否是异步的。\r\n//      */\r\n//     async: boolean;\r\n\r\n//     /**\r\n//      * 请求的超时毫秒数。如果值为 -1 则不设置超时。\r\n//      */\r\n//     timeout: number;\r\n\r\n//     /**\r\n//      * 标记当前请求是否是跨域请求。默认为自动判断。\r\n//      */\r\n//     crossDomain: boolean;\r\n\r\n//     /**\r\n//      * 是否允许从缓存请求。\r\n//      */\r\n//     cache: boolean;\r\n\r\n//     /**\r\n//      * 实际发送请求的对象。\r\n//      */\r\n//     xhr: any;\r\n\r\n//     /**\r\n//      * 请求开始的回调函数。函数可以返回 false 以终止请求。\r\n//      */\r\n//     start: () => boolean | void;\r\n\r\n//     /**\r\n//      * 请求成功的回调函数。\r\n//      * @param data 响应的数据。\r\n//      */\r\n//     success: (data: string) => void;\r\n\r\n//     /**\r\n//      * 请求失败的回调函数。\r\n//      * @param error 错误的原因。\r\n//      */\r\n//     error: (error: string) => void;\r\n\r\n//     /**\r\n//      * 请求完成的回调函数。无论请求是否成功都会执行此回调。\r\n//      * @param error 如果请求错误，则值为错误的原因。\r\n//      * @param data 如果请求成功，则返回响应的数据。\r\n//      */\r\n//     complete: (error: string, data: string) => void;\r\n\r\n//     /**\r\n//      * 请求的用户名。\r\n//      */\r\n//     username: string;\r\n\r\n//     /**\r\n//      * 请求的密码。\r\n//      */\r\n//     password: string;\r\n\r\n//     /**\r\n//      * 获取服务器返回的状态码。\r\n//      */\r\n//     status: number;\r\n\r\n//     /**\r\n//      * 获取服务器返回的状态文本。\r\n//      */\r\n//     statusText: string;\r\n\r\n//     /**\r\n//      * 获取服务器返回的数据。\r\n//      */\r\n//     responseText: string;\r\n\r\n//     //* * @param {Function} [error] 请求失败时的回调。回调参数为发生的错误。\r\n//     //* * @param {String} [jsonp] 如果使用 jsonp 请求，则指示 jsonp 参数名。如果设为 @false，则不添加 jsonp 参数。\r\n//     //* * @param {Boolean} [jsonpCallback] jsonp 请求回调函数名。如未指定则根据当前时间戳自动生成。\r\n//     //* * @param {String} [password] 请求的密码。\r\n//     //* * @param {Function} [start] 请求开始时的回调。\r\n//     //* * @param {Function} [success] 请求成功时的回调。参数为请求的数据。\r\n//     //* * @param {Number} [timeout=-1] 请求超时毫秒数。-1 表示不设超时。\r\n//     //* * @param {mixed} [type=\"GET\"] 请求类型。\r\n//     //* * @param {String} [url] 请求的地址。请求的多个地址时可使用error: error数组，这时所有请求完成后才触发回调。如未指定则使用当前页面。\r\n//     //* \r\n//     //* 响应时， options 将被追加以下参数：\r\n//     //* \r\n//     //* * @param {Number} errorCode 返回的错误码。0： 无错误；-1：状态码错误；2：数据解析错误。-1：操作被取消；-2：请求超时；-3...-6：其它内部错误。\r\n//     //* * @param {Number} status 服务器返回的状态码。\r\n//     //* * @param {Number} statusText 服务器返回的状态文本。\r\n//     //* * @param {Object} response 如果有错误则返回错误信息，否则返回请求的数据。\r\n//     //*\r\n\r\n//     /**\r\n//      * 发送当前的请求。\r\n//      */\r\n//     send() {\r\n\r\n//         this.url = (this.url || Ajax.getCurrentUrl()).replace(/#.*$/, \"\") : ;\r\n\r\n//         if (this.data && typeof this.data === \"object\") {\r\n//             this.data = stringifyQuery(this.data);\r\n//         }\r\n\r\n//         this.async = this.async !== false;\r\n\r\n//         if (this.crossDomain == null) {\r\n//             this.crossDomain = Ajax.isCrossDomain(this.url);\r\n//         }\r\n\r\n//         if ((Ajax.start && Ajax.start(this) === false) || (this.start && this.start() === false)) return;\r\n\r\n//         (me.timeout > 0 && me.done && setTimeout(function () {\r\n//             me.done('Timeout', -2);\r\n//         }, me.timeout));\r\n\r\n//         // #region 生成请求头\r\n\r\n//         // headers['Accept']\r\n//         var headers = {\r\n//             Accept: \"*\\u005c*\"\r\n//         };\r\n\r\n//         if (!headers['Accept']) headers['Accept'] = \"*\\u005c*\";\r\n//         if (this.data && !headers['Content-Type']) headers['Content-Type'] = \"application/x-www-form-urlencoded; charset=UTF-8\";\r\n//         if (!this.crossDomain) headers['x-Requested-With'] = 'XMLHttpRequest';\r\n\r\n//         // 如果参数有 headers, 复制到当前 headers 。\r\n//         for (var key in this.headers) {\r\n//             headers[key] = this.headers[key];\r\n//         }\r\n\r\n//         // #endregion\r\n\r\n//         // #region 发送请求\r\n\r\n//         // 生成请求地址。\r\n//         var url = ajax.url;\r\n//         if (ajax.cache !== true) {\r\n//             url = Ajax.appendCacheQuery(url);\r\n//         }\r\n\r\n//         /*@cc_on if(!+\"\\v1\") {\r\n//         XMLHttpRequest = function() { return new ActiveXObject(\"Microsoft.XMLHTTP\"); };\r\n//         } @*/\r\n\r\n//         // 请求对象。\r\n//         var xhr = ajax.xhr = new XMLHttpRequest();\r\n\r\n//         // 统一执行回调。\r\n//         var done = ajax.done = function (response, errorCode) {\r\n\r\n//             try {\r\n\r\n//                 // 如果目前是成功状态且正在等待，则退出等待下次回调。\r\n//                 if (!xhr || (!errorCode && xhr.readyState !== 4)) return;\r\n\r\n//                 // 删除 readystatechange  。\r\n//                 xhr.onreadystatechange = null;\r\n\r\n//                 // 如果存在错误。\r\n//                 if (errorCode) {\r\n//                     // 如果是因为超时引发的，手动中止请求。\r\n//                     if (xhr.readyState !== 4) {\r\n//                         xhr.abort();\r\n//                     }\r\n//                 } else {\r\n\r\n//                     // 正确的状态码。\r\n//                     ajax.status = xhr.status;\r\n\r\n//                     // 如果跨域，火狐报错。\r\n//                     try {\r\n//                         ajax.statusText = xhr.statusText;\r\n//                     } catch (firefoxCrossDomainError) {\r\n//                         // 模拟 Webkit: 设为空字符串。\r\n//                         ajax.statusText = \"\";\r\n//                     }\r\n\r\n//                     // 检验状态码是否正确。\r\n//                     if (Ajax.checkStatus(ajax.status)) {\r\n\r\n//                         // 根据响应类型自动决定数据类型。\r\n//                         if (!ajax.dataType) {\r\n//                             response = (xhr.getResponseHeader(\"Content-Type\") || \"\").toLowerCase();\r\n//                             for (key in Ajax.accepts) {\r\n//                                 if (response.indexOf(key) >= 0) {\r\n//                                     ajax.dataType = key;\r\n//                                     break;\r\n//                                 }\r\n//                             }\r\n//                         }\r\n\r\n//                         errorCode = 0;\r\n//                         try {\r\n//                             response = (Ajax.parsers[ajax.dataType] || Ajax.parsers.text)(ajax);\r\n//                         } catch (parseDataError) {\r\n//                             errorCode = 2;\r\n//                             response = parseDataError;\r\n//                         }\r\n\r\n//                     } else {\r\n//                         errorCode = 1;\r\n//                         response = ajax.status + \": \" + ajax.statusText;\r\n//                     }\r\n\r\n//                 }\r\n\r\n//                 // 清空变量的引用。\r\n//                 xhr = null;\r\n\r\n//             } catch (firefoxAccessError) {\r\n//                 return ajax.done(firefoxAccessError, -5);\r\n//             }\r\n\r\n//             // 设置错误码。\r\n//             ajax.errorCode = errorCode;\r\n//             ajax.response = response;\r\n\r\n//             // 统一处理回调。\r\n//             callback(ajax);\r\n//         }\r\n\r\n//         try {\r\n//             ajax.username ? xhr.open(ajax.type, url, ajax.async, ajax.username, ajax.password) : xhr.open(ajax.type, url, ajax.async);\r\n//         } catch (ieOpenError) {\r\n//             // IE: 地址错误时产生异常。\r\n//             done(ieOpenError, -3);\r\n//             return false;\r\n//         }\r\n\r\n//         // 设置文件头。\r\n//         for (var key in headers) {\r\n//             try {\r\n//                 xhr.setRequestHeader(key, headers[key]);\r\n//             } catch (firefoxSetHeaderError) {\r\n//                 // FF: 跨域时设置头产生异常。\r\n//             }\r\n//         }\r\n\r\n//         // 开始发送。\r\n//         try {\r\n//             xhr.send(ajax.data);\r\n//         } catch (sendError) {\r\n//             // 地址错误时产生异常 。\r\n//             done(sendError, -4);\r\n//             return false;\r\n//         }\r\n\r\n//         // 同步时，火狐不会自动调用 onreadystatechange\r\n//         if (!ajax.async) {\r\n//             done();\r\n//             return false;\r\n//         }\r\n\r\n//         // IE6/7：如果存在缓存，需要手动执行回调函数。\r\n//         if (xhr.readyState === 4) {\r\n//             setTimeout(done, 0);\r\n//             return false;\r\n//         }\r\n\r\n//         // 绑定 onreadystatechange， 让 xhr 根据请求情况调用 done。\r\n//         xhr.onreadystatechange = done;\r\n\r\n//         // #endregion\r\n\r\n//     }\r\n\r\n//     /**\r\n//      * 当被子类重写时，负责终止当前请求。\r\n//      */\r\n//     abort() {\r\n//         this.done && this.done('Aborted', -1);\r\n//     }\r\n\r\n//     /**\r\n//      * 获取当前网页的地址。\r\n//      * @return 返回当前地址。\r\n//      */\r\n//     static getCurrentUrl() {\r\n//         // 如果设置了 document.domain, IE 会抛出异常。\r\n//         try {\r\n//             return location.href;\r\n//         } catch (e) {\r\n//             // 使用 a 的默认属性获取当前地址。\r\n//             var ajaxLoc = document.createElement(\"a\");\r\n//             ajaxLoc.href = \"\";\r\n//             return ajaxLoc.href;\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 判断指定的地址是否跨域。\r\n//      * @param url 要判断的地址。\r\n//      * @return 返回处理后的地址。\r\n//      */\r\n//     static isCrossDomain(url: string) {\r\n//         const rUrl = /^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/;\r\n//         const locParts = rUrl.exec(Ajax.getCurrentUrl().toLowerCase()) || 0;\r\n//         const match = rUrl.exec(url.toLowerCase());\r\n//         return !!match && (match[1] != locParts[1] || match[2] != locParts[2] || (match[3] || (match[1] === \"http:\" ? 80 : 443)) != (locParts[3] || (locParts[1] === \"http:\" ? 80 : 443)));\r\n//     }\r\n\r\n//     /**\r\n//      * 发送所有请求时执行的回调。\r\n//      * @param ajax 当前要发送的 Ajax 请求。\r\n//      * @return 如果阻止请求则返回 false。\r\n//      */\r\n//     static start: (ajax: Ajax) => boolean | void;\r\n\r\n//     /**\r\n//      * 在指定地址添加参数以避免服务器端缓存。\r\n//      * @param {String} url 要处理的地址。\r\n//      * @param {String} param 要添加的参数。\r\n//      * @return {String} 返回处理后的地址。\r\n//      * @inner\r\n//      */\r\n//     static appendQuery(url: string, param: string) {\r\n//         typeof console === \"object\" && console.assert(typeof url === \"string\", \"Ajax.appendQuery(url: 必须是字符串, [param])\");\r\n//         return param ? url + (url.indexOf('?') >= 0 ? '&' : '?') + param : url;\r\n//     };\r\n\r\n//     /**\r\n//      * 在指定地址添加参数以避免服务器端缓存。\r\n//      * @param {String} url 要处理的地址。\r\n//      * @return {String} 返回处理后的地址。\r\n//      * @inner\r\n//      */\r\n//     static appendCacheQuery(url: string) {\r\n//         // 不需要完美添加或删除功能。\r\n//         // return (/[?&]_=/.test(url) ? url : Ajax.appendQuery(url, \"_=\")).replace(/([?&]_=)([^&]*)/, \"$1\" + +new Date);\r\n//         return Ajax.appendQuery(url, \"_=\" + +new Date);\r\n//     };\r\n\r\n// }\r\n\r\n// export = Ajax;\r\n\r\n// /**\r\n//  * 表示 Ajax 发送请求的选项。\r\n//  */\r\n// interface AjaxOptions extends Ajax {\r\n\r\n// }\r\n\r\n// /**\r\n//  * 所有支持的 MimeType。\r\n//  * @inner\r\n//  */\r\n// Ajax.accepts = {\r\n//     script: 'text/javascript, application/javascript, application/x-javascript',\r\n\r\n//     // #region @json\r\n\r\n//     json: 'application/json',\r\n\r\n//     // #endregion\r\n\r\n//     // #region @xml\r\n\r\n//     xml: 'application/xml, text/xml',\r\n\r\n//     // #endregion\r\n\r\n//     html: 'text/html',\r\n//     text: 'text/plain'\r\n// };\r\n\r\n// /**\r\n//  * 支持的数据解析器。\r\n//  * @inner\r\n//  */\r\n// Ajax.parsers = {\r\n\r\n//     /**\r\n//      * 获取文本格式数据。\r\n//      * @type {Object} options 要处理的原始 options。\r\n//      */\r\n//     text: function (options) {\r\n//         var responseText;\r\n//         try {\r\n//             responseText = options.xhr.responseText;\r\n//         } catch (ieResponseTextError) {\r\n//             // IE6-9：请求二进制格式的文件报错。\r\n//             responseText = '';\r\n//         }\r\n//         return options.responseText = responseText;\r\n//     },\r\n\r\n//     // #region @script\r\n\r\n//     /**\r\n//      * 执行 JavaScript 代码。\r\n//      * @type {Object} options 要处理的原始 options。\r\n//      */\r\n//     script: function (options) {\r\n//         var sourceCode = Ajax.parsers.text(options);\r\n//         window.execScript ? window.execScript(sourceCode) : window.eval(sourceCode);\r\n//     },\r\n\r\n//     // #endregion\r\n\r\n//     // #region @json\r\n\r\n//     /**\r\n//      * 获取 JSON 格式数据。\r\n//      * @type {Object} options 要处理的原始 options。\r\n//      */\r\n//     json: function (options) {\r\n//         return JSON.parse(Ajax.parsers.text(options));\r\n//     },\r\n\r\n//     // #endregion\r\n\r\n//     // #region @xml\r\n\r\n//     /**\r\n//      * 获取 XML 格式数据。\r\n//      * @type {Object} options 要处理的原始 options。\r\n//      */\r\n//     xml: function (options) {\r\n//         var xml = options.xhr.responseXML;\r\n//         return xml && xml.documentElement ? xml : null;\r\n//     }\r\n\r\n//     // #endregion\r\n\r\n// };\r\n\r\n// /**\r\n//  * 所有支持的传输协议集合。\r\n//  * @inner\r\n//  */\r\n// Ajax.transports = {\r\n\r\n//     // #region @text\r\n\r\n//     /**\r\n//      * 文本格式传输协议。\r\n//      */\r\n//     text: function (ajax, callback) {\r\n\r\n//     },\r\n\r\n//     // #endregion\r\n\r\n//     // #region @script\r\n\r\n//     /**\r\n//      * 脚本格式传输协议。\r\n//      */\r\n//     script: function (ajax, callback) {\r\n\r\n//         // 如果未跨域则使用 AJAX 加速请求。\r\n//         if (!ajax.crossDomain && Ajax.transports.text) {\r\n//             ajax.dataType = 'script';\r\n//             return Ajax.transports.text(ajax, callback);\r\n//         }\r\n\r\n//         // 生成请求地址。\r\n//         var url = ajax.url;\r\n//         if (ajax.cache !== true) {\r\n//             url = Ajax.appendCacheQuery(url);\r\n//         }\r\n\r\n//         var script = ajax.xhr = document.createElement('SCRIPT');\r\n\r\n//         ajax.done = function (response, errorCode) {\r\n//             if (script && (errorCode || !script.readyState || !/in/.test(script.readyState))) {\r\n\r\n//                 // 删除全部绑定的函数。\r\n//                 script.onerror = script.onload = script.onreadystatechange = null;\r\n\r\n//                 // 删除当前脚本。\r\n//                 script.parentNode.removeChild(script);\r\n\r\n//                 // 设置错误码。\r\n//                 ajax.errorCode = errorCode;\r\n//                 ajax.response = response;\r\n\r\n//                 callback(ajax);\r\n\r\n//                 // 清空对 script 的引用。\r\n//                 script = null;\r\n\r\n//             }\r\n//         };\r\n\r\n//         script.src = url;\r\n//         script.type = \"text/javascript\";\r\n//         if (ajax.async) {\r\n//             script.async = \"async\";\r\n//         }\r\n//         if (ajax.charset) {\r\n//             script.charset = ajax.charset;\r\n//         }\r\n//         script.onload = script.onreadystatechange = Ajax.done;\r\n//         script.onerror = function (e) { Ajax.done(e, 2); };\r\n\r\n//         var t = document.getElementsByTagName(\"SCRIPT\")[0];\r\n//         t.parentNode.insertBefore(script, t);\r\n\r\n//     },\r\n\r\n//     // #region @jsonp\r\n\r\n//     /**\r\n//      * 脚本远程执行格式传输协议。\r\n//      */\r\n//     jsonp: function (ajax, callback) {\r\n\r\n//         var jsonpCallback = \"jsonp\" + +new Date() + (Ajax._jsonpCounter = Ajax._jsonpCounter + 1 || 0),\r\n//             jsonpCallbackOverwritten = window[jsonpCallback],\r\n//             responseData;\r\n\r\n//         // jsonp\r\n//         if (ajax.jsonp == null) {\r\n//             ajax.jsonp = \"callback\";\r\n//         }\r\n\r\n//         // callback=jsonp123\r\n//         if (ajax.jsonp) {\r\n//             ajax.url = Ajax.appendQuery(ajax.url, ajax.jsonp + \"=\" + jsonpCallback);\r\n//             // 由于已经加入了用于避免缓存的后缀，强制禁止缓存。\r\n//             ajax.cache = false;\r\n//         }\r\n\r\n//         // 插入 JSONP 回调。\r\n//         window[jsonpCallback] = function () {\r\n//             responseData = arguments;\r\n//         };\r\n\r\n//         // 最后使用 Script 协议发送。\r\n//         return Ajax.transports.script(ajax, function () {\r\n\r\n//             // 未执行数据函数。\r\n//             if (!responseData) {\r\n//                 ajax.errorCode = 2;\r\n//                 ajax.response = new Error(jsonpCallback + ' was not called');\r\n//             }\r\n\r\n//             // 执行全部回调。\r\n//             callback(ajax);\r\n\r\n//             // 回复初始的 jsonpCallback 函数。\r\n//             if (jsonpCallbackOverwritten !== undefined) window[jsonpCallback] = jsonpCallbackOverwritten;\r\n//         });\r\n\r\n//     },\r\n\r\n//     // #endregion\r\n\r\n//     // #endregion\r\n\r\n//     /**\r\n//      * 判断一个 HTTP 状态码是否表示正常响应。\r\n//      * @param {Number} status 要判断的状态码。\r\n//      * @return {Boolean} 如果正常则返回true, 否则返回 false 。\r\n//      * @remark 一般地， 200、304、1223 被认为是正常的状态吗。\r\n//      * @inner\r\n//      */\r\n//     static checkStatus(statusCode) {\r\n\r\n//         // 获取状态。\r\n//         if (!statusCode) {\r\n\r\n//             // 获取协议。\r\n//             var protocol = window.location.protocol;\r\n\r\n//             // 对谷歌浏览器, 在有些协议， status 不存在。\r\n//             return (protocol == \"file: \" || protocol == \"chrome: \" || protocol == \"app: \");\r\n//         }\r\n\r\n//         // 检查， 各浏览器支持不同。\r\n//         return (statusCode >= 200 && statusCode < 300) || statusCode == 304 || statusCode == 1223;\r\n//     }\r\n\r\n//     /**\r\n//      * 多个外部 AJAX 请求组成。\r\n//      */\r\n//     subAjax: function (ajax) {\r\n//         ajax.url = ajax.url.slice(0);\r\n//         ajax.counter = ajax.url.length;\r\n//         ajax.done = function () {\r\n//             if (--ajax.counter < 1) {\r\n//                 var responses = ajax.responses = [], funcName = 'success';\r\n//                 for (var i = 0; i < ajax.url.length; i++) {\r\n//                     responses[i] = ajax.url[i].response;\r\n//                     if (ajax.url[i].errorCode) {\r\n//                         funcName = 'error';\r\n//                     }\r\n//                 }\r\n//                 ajax[funcName] && ajax[funcName].apply(ajax, responses);\r\n//                 ajax.complete && ajax.complete.apply(ajax, responses);\r\n//             }\r\n//         };\r\n\r\n//         // 为每个请求创建独立的 AJAX 对象。\r\n//         for (var i = 0; i < ajax.url.length; i++) {\r\n\r\n//             // 创建子 AJAX 对象。\r\n//             var subAjax = ajax.url[i] = new Ajax(ajax.url[i]);\r\n//             subAjax.parent = ajax;\r\n\r\n//             // 拷贝主对象配置到子对象。\r\n//             for (var key in ajax) {\r\n//                 if (!(key in subAjax) && !(key in { url: 1, dataType: 1, start: 1, success: 1, error: 1, complete: 1 })) {\r\n//                     subAjax[key] = ajax[key];\r\n//                 }\r\n//             }\r\n\r\n//             subAjax.send();\r\n//         }\r\n\r\n//         return false;\r\n\r\n//     }\r\n\r\n// };\r\n\r\n// /**\r\n//  * 发送一个 AJAX 请求。\r\n//  * @param {Object} options 发送的配置。支持的值有：\r\n//  * \r\n//  * @return {Ajax} 返回新创建的 Ajax 对象。\r\n//  * @example \r\n//  * Ajax.send({\r\n//  *       url: \"../../../assets/resources/ajax/test.txt\", \r\n//  *       success:function(data){\r\n//  *           alert(data)\r\n//  *       }\r\n//  * });\r\n//  * \r\n//  * ##### 同时发送多个请求统一回调\r\n//  * Ajax.send({\r\n//  *      url: [{\r\n//  *          url: \"../../../assets/resources/ajax/test.txt\"\r\n//  *      }, {\r\n//  *          url: \"../../../assets/resources/ajax/test.txt\"\r\n//  *      }], \r\n//  *      success:function(data1, data2){\r\n//  *          alert(data1 + data2)\r\n//  *      }\r\n//  * });\r\n//  */\r\n// Ajax.send = function (options, url, data, onsuccess, onerror, dataType) {\r\n//     typeof console === \"object\" && console.assert(options != null, \"Ajax.send(options: 不能为空, [url], [data], [onsuccess], [onerror], [dataType])\");\r\n//     // 支持直接传递相关参数以发起请求。\r\n//     if (options.constructor === String) {\r\n\r\n//         // 填充 data 参数。\r\n//         if (data instanceof Function) {\r\n//             dataType = dataType || onerror;\r\n//             onerror = onsuccess;\r\n//             onsuccess = data;\r\n//             data = null;\r\n//         }\r\n\r\n//         options = {\r\n//             type: options,\r\n//             url: url,\r\n//             data: data,\r\n//             dataType: dataType,\r\n//             success: onsuccess,\r\n//             error: onerror\r\n//         };\r\n//     }\r\n\r\n//     return new Ajax(options).send();\r\n\r\n// };\r\n\r\n// /**\r\n//  * 全局 Ajax 请求之前的回调，可用于初始化指定配置项，如重写请求 URL。\r\n//  * @memberOf Ajax\r\n//  * @field init\r\n//  * @type Function\r\n//  * @example Ajax.init = function(options){ options.url = options.url.replace(\"~/\", \"http://api.domain.com\");  }\r\n//  */\r\n\r\n// /**\r\n//  * 当 AJAX 完成后统一回调此接口。\r\n//  * @param {Object} options 发送的配置。\r\n//  * @inner\r\n//  */\r\n// Ajax.done = function (ajax) {\r\n//     var funcName = ajax.errorCode ? 'error' : 'success';\r\n//     ajax[funcName] && ajax[funcName](ajax.response);\r\n//     ajax.complete && ajax.complete(ajax.response);\r\n//     ajax.parent && ajax.parent.done();\r\n//     ajax.xhr = ajax.done = null;\r\n// };\r\n\r\n// // #region @text\r\n\r\n// /**\r\n//  * 发送一个 GET 异步请求。\r\n//  * @param {String} [url] 请求的地址。\r\n//  * @param {Object} [data] 请求的数据。\r\n//  * @param {String} [onsuccess] 请求成功时的回调。\r\n//  * @param {String} [onerror] 请求失败时的回调。\r\n//  * @param {String} [dataType='text'] 请求数据的类型。\r\n//  * @return {Object} 返回请求对象。\r\n//  * @example Ajax.get(\"../../../assets/resources/ajax/test.txt\", function(data){alert(data)})\r\n//  */\r\n// Ajax.get = function (url, data, onsuccess, onerror, dataType) {\r\n//     return Ajax.send('GET', url, data, onsuccess, onerror, dataType);\r\n// };\r\n\r\n// /**\r\n//  * 发送一个 POST 异步请求。\r\n//  * @param {String} [url] 请求的地址。\r\n//  * @param {Object} [data] 请求的数据。\r\n//  * @param {String} [onsuccess] 请求成功时的回调。\r\n//  * @param {String} [onerror] 请求失败时的回调。\r\n//  * @param {String} [dataType='text'] 请求数据的类型。\r\n//  * @return {Object} 返回请求对象。\r\n//  * @example Ajax.post(\"../../../assets/resources/ajax/test.txt\", function(data){alert(data)})\r\n//  */\r\n// Ajax.post = function (url, data, onsuccess, onerror, dataType) {\r\n//     return Ajax.send('POST', url, data, onsuccess, onerror, dataType);\r\n// };\r\n\r\n// // #endregion\r\n\r\n// // #region @jsonp\r\n\r\n// /**\r\n//  * 快速发送一个 POST 异步请求。\r\n//  * @param {String} [url] 请求的地址。\r\n//  * @param {Object} [data] 请求的数据。\r\n//  * @param {String} [onsuccess] 请求成功时的回调。\r\n//  * @param {String} [onerror] 请求失败时的回调。\r\n//  * @return {Object} 返回请求对象。\r\n//  * @example Ajax.jsonp(\"../../../assets/resources/ajax/jsonp.js\", function(data){alert(data)})\r\n//  */\r\n// Ajax.jsonp = function (url, data, onsuccess, onerror) {\r\n//     return Ajax.send('', url, data, onsuccess, onerror, 'jsonp');\r\n// };\r\n\r\n// // #endregion\r\n\r\n// // /**\r\n// //  * 所有支持的传输协议集合。\r\n// //  * @inner\r\n// //  */\r\n// // Ajax.transports = {\r\n\r\n// //     // #region @text\r\n\r\n// //     /**\r\n// //      * 文本格式传输协议。\r\n// //      */\r\n// //     text: function (ajax, callback) {\r\n\r\n// //     },\r\n\r\n// //     // #endregion\r\n\r\n// //     // #region @script\r\n\r\n// //     /**\r\n// //      * 脚本格式传输协议。\r\n// //      */\r\n// //     script: function (ajax, callback) {\r\n\r\n// //         // 如果未跨域则使用 AJAX 加速请求。\r\n// //         if (!ajax.crossDomain && Ajax.transports.text) {\r\n// //             ajax.dataType = \"script\";\r\n// //             return Ajax.transports.text(ajax, callback);\r\n// //         }\r\n\r\n// //         // 生成请求地址。\r\n// //         var url = ajax.url;\r\n// //         if (ajax.cache !== true) {\r\n// //             url = Ajax.appendCacheQuery(url);\r\n// //         }\r\n\r\n// //         var script = ajax.xhr = document.createElement(\"SCRIPT\");\r\n\r\n// //         ajax.done = function (response, errorCode) {\r\n// //             if (script && (errorCode || !script.readyState || !/in/.test(script.readyState))) {\r\n\r\n// //                 // 删除全部绑定的函数。\r\n// //                 script.onerror = script.onload = script.onreadystatechange = null;\r\n\r\n// //                 // 删除当前脚本。\r\n// //                 script.parentNode.removeChild(script);\r\n\r\n// //                 // 设置错误码。\r\n// //                 ajax.errorCode = errorCode;\r\n// //                 ajax.response = response;\r\n\r\n// //                 callback(ajax);\r\n\r\n// //                 // 清空对 script 的引用。\r\n// //                 script = null;\r\n\r\n// //             }\r\n// //         };\r\n\r\n// //         script.src = url;\r\n// //         script.type = \"text/javascript\";\r\n// //         if (ajax.async) {\r\n// //             script.async = \"async\";\r\n// //         }\r\n// //         if (ajax.charset) {\r\n// //             script.charset = ajax.charset;\r\n// //         }\r\n// //         script.onload = script.onreadystatechange = Ajax.done;\r\n// //         script.onerror = function (e) { Ajax.done(e, 2); };\r\n\r\n// //         var t = document.getElementsByTagName(\"SCRIPT\")[0];\r\n// //         t.parentNode.insertBefore(script, t);\r\n\r\n// //     },\r\n\r\n// //     // #region @jsonp\r\n\r\n// //     /**\r\n// //      * 脚本远程执行格式传输协议。\r\n// //      */\r\n// //     jsonp: function (ajax, callback) {\r\n\r\n// //         var jsonpCallback = \"jsonp\" + +new Date() + (Ajax._jsonpCounter = Ajax._jsonpCounter + 1 || 0),\r\n// //             jsonpCallbackOverwritten = window[jsonpCallback],\r\n// //             responseData;\r\n\r\n// //         // jsonp\r\n// //         if (ajax.jsonp == null) {\r\n// //             ajax.jsonp = \"callback\";\r\n// //         }\r\n\r\n// //         // callback=jsonp123\r\n// //         if (ajax.jsonp) {\r\n// //             ajax.url = Ajax.appendQuery(ajax.url, ajax.jsonp + \"=\" + jsonpCallback);\r\n// //             // 由于已经加入了用于避免缓存的后缀，强制禁止缓存。\r\n// //             ajax.cache = false;\r\n// //         }\r\n\r\n// //         // 插入 JSONP 回调。\r\n// //         window[jsonpCallback] = function () {\r\n// //             responseData = arguments;\r\n// //         };\r\n\r\n// //         // 最后使用 Script 协议发送。\r\n// //         return Ajax.transports.script(ajax, function () {\r\n\r\n// //             // 未执行数据函数。\r\n// //             if (!responseData) {\r\n// //                 ajax.errorCode = 2;\r\n// //                 ajax.response = new Error(jsonpCallback + \" was not called\");\r\n// //             }\r\n\r\n// //             // 执行全部回调。\r\n// //             callback(ajax);\r\n\r\n// //             // 回复初始的 jsonpCallback 函数。\r\n// //             if (jsonpCallbackOverwritten !== undefined) window[jsonpCallback] = jsonpCallbackOverwritten;\r\n// //         });\r\n\r\n// //     },\r\n\r\n// //     // #endregion\r\n\r\n// //     // #endregion\r\n\r\n// //     /**\r\n// //      * 多个外部 AJAX 请求组成。\r\n// //      */\r\n// //     subAjax: function (ajax) {\r\n// //         ajax.url = ajax.url.slice(0);\r\n// //         ajax.counter = ajax.url.length;\r\n// //         ajax.done = function () {\r\n// //             if (--ajax.counter < 1) {\r\n// //                 var responses = ajax.responses = [], funcName = \"success\";\r\n// //                 for (var i = 0; i < ajax.url.length; i++) {\r\n// //                     responses[i] = ajax.url[i].response;\r\n// //                     if (ajax.url[i].errorCode) {\r\n// //                         funcName = \"error\";\r\n// //                     }\r\n// //                 }\r\n// //                 ajax[funcName] && ajax[funcName].apply(ajax, responses);\r\n// //                 ajax.complete && ajax.complete.apply(ajax, responses);\r\n// //             }\r\n// //         };\r\n\r\n// //         // 为每个请求创建独立的 AJAX 对象。\r\n// //         for (var i = 0; i < ajax.url.length; i++) {\r\n\r\n// //             // 创建子 AJAX 对象。\r\n// //             var subAjax = ajax.url[i] = new Ajax(ajax.url[i]);\r\n// //             subAjax.parent = ajax;\r\n\r\n// //             // 拷贝主对象配置到子对象。\r\n// //             for (var key in ajax) {\r\n// //                 if (!(key in subAjax) && !(key in { url: 1, dataType: 1, start: 1, success: 1, error: 1, complete: 1 })) {\r\n// //                     subAjax[key] = ajax[key];\r\n// //                 }\r\n// //             }\r\n\r\n// //             subAjax.send();\r\n// //         }\r\n\r\n// //         return false;\r\n\r\n// //     }\r\n\r\n// // };\r\n\r\n// // /**\r\n// //  * 发送一个 AJAX 请求。\r\n// //  * @param {Object} options 发送的配置。支持的值有：\r\n// //  *\r\n// //  * @return {Ajax} 返回新创建的 Ajax 对象。\r\n// //  * @example\r\n// //  * Ajax.send({\r\n// //  *       url: \"../../../assets/resources/ajax/test.txt\",\r\n// //  *       success:function(data){\r\n// //  *           alert(data)\r\n// //  *       }\r\n// //  * });\r\n// //  *\r\n// //  * ##### 同时发送多个请求统一回调\r\n// //  * Ajax.send({\r\n// //  *      url: [{\r\n// //  *          url: \"../../../assets/resources/ajax/test.txt\"\r\n// //  *      }, {\r\n// //  *          url: \"../../../assets/resources/ajax/test.txt\"\r\n// //  *      }],\r\n// //  *      success:function(data1, data2){\r\n// //  *          alert(data1 + data2)\r\n// //  *      }\r\n// //  * });\r\n// //  */\r\n// // Ajax.send = function (options, url, data, onsuccess, onerror, dataType) {\r\n// //     typeof console === \"object\" && console.assert(options != null, \"Ajax.send(options: 不能为空, [url], [data], [onsuccess], [onerror], [dataType])\");\r\n// //     // 支持直接传递相关参数以发起请求。\r\n// //     if (options.constructor === String) {\r\n\r\n// //         // 填充 data 参数。\r\n// //         if (data instanceof Function) {\r\n// //             dataType = dataType || onerror;\r\n// //             onerror = onsuccess;\r\n// //             onsuccess = data;\r\n// //             data = null;\r\n// //         }\r\n\r\n// //         options = {\r\n// //             type: options,\r\n// //             url: url,\r\n// //             data: data,\r\n// //             dataType: dataType,\r\n// //             success: onsuccess,\r\n// //             error: onerror\r\n// //         };\r\n// //     }\r\n\r\n// //     return new Ajax(options).send();\r\n\r\n// // };\r\n\r\n// // /**\r\n// //  * 全局 Ajax 请求之前的回调，可用于初始化指定配置项，如重写请求 URL。\r\n// //  * @memberOf Ajax\r\n// //  * @field init\r\n// //  * @type Function\r\n// //  * @example Ajax.init = function(options){ options.url = options.url.replace(\"~/\", \"http://api.domain.com\");  }\r\n// //  */\r\n\r\n// // /**\r\n// //  * 当 AJAX 完成后统一回调此接口。\r\n// //  * @param {Object} options 发送的配置。\r\n// //  * @inner\r\n// //  */\r\n// // Ajax.done = function (ajax) {\r\n// //     var funcName = ajax.errorCode ? \"error\" : \"success\";\r\n// //     ajax[funcName] && ajax[funcName](ajax.response);\r\n// //     ajax.complete && ajax.complete(ajax.response);\r\n// //     ajax.parent && ajax.parent.done();\r\n// //     ajax.xhr = ajax.done = null;\r\n// // };\r\n\r\n// // // #region @text\r\n\r\n// // /**\r\n// //  * 发送一个 GET 异步请求。\r\n// //  * @param {String} [url] 请求的地址。\r\n// //  * @param {Object} [data] 请求的数据。\r\n// //  * @param {String} [onsuccess] 请求成功时的回调。\r\n// //  * @param {String} [onerror] 请求失败时的回调。\r\n// //  * @param {String} [dataType='text'] 请求数据的类型。\r\n// //  * @return {Object} 返回请求对象。\r\n// //  * @example Ajax.get(\"../../../assets/resources/ajax/test.txt\", function(data){alert(data)})\r\n// //  */\r\n// // Ajax.get = function (url, data, onsuccess, onerror, dataType) {\r\n// //     return Ajax.send(\"GET\", url, data, onsuccess, onerror, dataType);\r\n// // };\r\n\r\n// // /**\r\n// //  * 发送一个 POST 异步请求。\r\n// //  * @param {String} [url] 请求的地址。\r\n// //  * @param {Object} [data] 请求的数据。\r\n// //  * @param {String} [onsuccess] 请求成功时的回调。\r\n// //  * @param {String} [onerror] 请求失败时的回调。\r\n// //  * @param {String} [dataType='text'] 请求数据的类型。\r\n// //  * @return {Object} 返回请求对象。\r\n// //  * @example Ajax.post(\"../../../assets/resources/ajax/test.txt\", function(data){alert(data)})\r\n// //  */\r\n// // Ajax.post = function (url, data, onsuccess, onerror, dataType) {\r\n// //     return Ajax.send(\"POST\", url, data, onsuccess, onerror, dataType);\r\n// // };\r\n\r\n// // // #endregion\r\n\r\n// // // #region @jsonp\r\n\r\n// // /**\r\n// //  * 快速发送一个 POST 异步请求。\r\n// //  * @param {String} [url] 请求的地址。\r\n// //  * @param {Object} [data] 请求的数据。\r\n// //  * @param {String} [onsuccess] 请求成功时的回调。\r\n// //  * @param {String} [onerror] 请求失败时的回调。\r\n// //  * @return {Object} 返回请求对象。\r\n// //  * @example Ajax.jsonp(\"../../../assets/resources/ajax/jsonp.js\", function(data){alert(data)})\r\n// //  */\r\n// // Ajax.jsonp = function (url, data, onsuccess, onerror) {\r\n// //     return Ajax.send(\"\", url, data, onsuccess, onerror, \"jsonp\");\r\n// // };\r\n\r\n// // // #endregion\r\n\r\n// /**\r\n//  * 判断指定的地址是否跨域。\r\n//  * @param url 要判断的地址。\r\n//  * @return 如果跨域则返回 true，否则返回 false。\r\n//  */\r\n// export function isCrossDomain(url: string) {\r\n//     const rUrl = /^([\\w\\+\\.\\-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/;\r\n//     const locParts = (rUrl.exec(location.href.toLowerCase()) || 0) as RegExpExecArray;\r\n//     const match = rUrl.exec(url.toLowerCase());\r\n//     return !!match && (match[1] != locParts[1] || match[2] != locParts[2] || (match[3] || (match[1] === \"http:\" ? 80 : 443)) != (locParts[3] || (locParts[1] === \"http:\" ? 80 : 443)));\r\n// }\r\n"],"mappings":"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"}