/**
 * @fileOverview 项目打包工具。用于发布整个项目。
 * 发布项目时，只需指定一个文件夹，即可将文件夹内的代码进行压缩、代码合并。
 * @author xuld
 */

var Path = require('path');
var IO = require('utilskit/io');
var Utility = require('./utility');
var ModuleBuilder = require('./modulebuilder');

var ProjectBuilder = exports;

ProjectBuilder.defaultOptions = {

    log: function (message) {
        console.log(message);
    },

    error: function (message) {
        console.error(message);
    },

    // 发布的源文件夹。
    from: './',

    // 发布的目标文件夹。
    to: '../build/',

    // 源码统一编码。
    inputEncoding: 'utf-8',

    // 源码统一编码。
    outputEncoding: 'utf-8',

    // 自定义发布重定向规则。
    redirects: [],

    // 是否在生成前清空项目文件夹。
    clearDir: true,

    // 指示各个文件类型的发布方案。
    fileTypes: {
        '.js': {

            // 是否压缩文件。
            minify: true,

            // 默认发布处理逻辑。
            process: function (options, fromPath, toPath, fromName, toName) {
                if (this.minify) {
                    var content = IO.readFile(fromPath, options.inputEncoding);
                    try {
                        content = Utility.compressJs(content);
                    } catch (e) {
                        ProjectBuilder.error('压缩失败：' + e.message);
                        options.errorCount++;
                    }
                    IO.writeFile(toPath, content, options.outputEncoding);
                    return;
                }

                options.fileTypes['*'].process(options, fromPath, toPath, fromName, toName);
            }
        },

        '.css': {
            minify: true,
            process: function (options, fromPath, toPath, fromName, toName) {
                if (this.minify) {
                    var content = IO.readFile(fromPath, options.inputEncoding);
                    try {
                        content = Utility.compressCss(content);
                    } catch (e) {
                        ProjectBuilder.error('压缩失败：' + e.message);
                        options.errorCount++;
                    }
                    IO.writeFile(toPath, content, options.outputEncoding);
                    return;
                }
                
                options.fileTypes['*'].process(options, fromPath, toPath, fromName, toName);
            }
        },

        '.html': {
            resolveBootJs: true,
            versionPostfix: '_={time}',
            process: function (options, fromPath, toPath, fromName, toName) {

                // 读取 HTML 源码。
                var content = IO.readFile(fromPath, options.inputEncoding);

                // 更新 boot.js 依赖。
                if (this.resolveBootJs) {

                    try {
                        content = content.replace(/<script([^>]*)><\/script>/gi, function (all, attrString) {

                            // 计算所有属性。
                            var attrs = {};
                            attrString.replace(/(\w+)=(['""]?)([^'""]*)\2/g, function (all, attrName, q, attrValue) {
                                attrs[attrName] = attrValue;
                            });

                            if (attrs.src && /boot\.js(\?|#|$)/.test(attrs.src)) {
                                var src = attrs.src;
                                var params = /\?([^#]*)/.exec(src);
                                if (params) {

                                    var basePath = /#([^\?]*)/.exec(src);
                                    basePath = Utility.resolveRelativePath(fromPath, basePath ? basePath[1] : src.replace(/[\?#].*$/, ""));

                                    var buildPath = attrs['data-build'];
                                    if (!buildPath) {
                                        buildPath = 'assets/' + params[1].replace(/\.\w+/g, '').replace(/&/g, '_').replace(/\W/g, '');
                                    }
                                    buildPath = buildPath.replace(/\.\w+$/, '');

                                    var result = ModuleBuilder.build({

                                        basePath: basePath,

                                        inputEncoding: options.encoding || ModuleBuilder.defaultOptions.inputEncoding,

                                        outputEncoding: options.encoding || ModuleBuilder.defaultOptions.outputEncoding,

                                        inputs: params[1].split(/[&,]/),

                                        outputJs: Utility.resolveRelativePath(toPath, buildPath + '.js'),
                                        outputCss: Utility.resolveRelativePath(toPath, buildPath + '.css'),

                                        minify: false,

                                        error: function (message) {
                                            throw message;
                                        },

                                        start: function () {

                                        },

                                        complete: function () {

                                        }

                                    });

                                    all = '';

                                    if (result.outputCssCode != null) {
                                        all += '<link rel="stylesheet" type="text/css" href="' + buildPath + '.css">';
                                    }

                                    if (result.outputJsCode != null) {
                                        if (all) {
                                            all += result.lineBreak;
                                        }
                                        all += '<script type="text/javascript" src="' + buildPath + '.js"></script>';
                                    }

                                }
                            }

                            return all;
                        });
                    } catch (e) {
                        ProjectBuilder.error('打包 boot.js 失败：' + e.message);
                        options.errorCount++;
                    }
                }

                var versionPostfix = this.versionPostfix && (this.versionPostfix.replace('{time}', Utility.getNow().replace(/\D/g, "")));

                // 更新 href|src 指向。
                content = content.replace(/(href|src)(\s*=\s*(['""]?))([^'""]*)(\3)/gi, function (all, href, q1, q, url, q2) {

                    var path = url.replace(/[#\?].*$/, '');
                    var query = url.substr(path.length);

                    // 不处理绝对路径。
                    if (path.indexOf(':/') < 0) {
                        var newPath = Utility.resolveRelativePath(fromName, path);
                        newPath = ProjectBuilder.redirect(options, newPath);
                        if (newPath) {
                            url = newPath + query;
                        }
                    }

                    if (versionPostfix) {
                        url += (query ? '&' : '?') + versionPostfix;
                    }

                    return href + q1 + url + q2;
                });

                // 压缩代码。
                if (this.minify) {
                    content = Utility.compressHtml(content);
                }

                // 生成 HTML 源码。
                IO.writeFile(toPath, content, options.outputEncoding);

            }
        },

        '.tmp': {

            // 是否忽略本类型的文件。
            ignore: true
        },

        '.ai': {
            ignore: true
        },

        '.psd': {
            ignore: true
        },

        '*': {
            process: function (options, fromPath, toPath, fromName, toName) {
                if (options.inputEncoding === options.outputEncoding) {
                    IO.copyFile(fromPath, toPath);
                    return;
                }
                var content = IO.readFile(fromPath, options.inputEncoding);
                IO.writeFile(toPath, content, options.outputEncoding);
            }
        }
    }
};

/**
 * 执行项目生成操作。
 * @param {Object} options 生成的配置项。
 */
ProjectBuilder.build = function (options) {

    // 1. 设置默认配置。
    options = Utility.extendIf(options || {}, ProjectBuilder.defaultOptions);
    for (var fileType in ProjectBuilder.defaultOptions.fileTypes) {
        options.fileTypes[fileType] = Utility.extendIf(options.fileTypes[fileType] || {}, ProjectBuilder.defaultOptions.fileTypes[fileType]);
    }

    // 2. 修复配置值。
    options.from = Path.resolve(options.from);
    options.to = Path.resolve(options.to);
    options.errorCount = 0;

    // 3. 开始生成。
    options.log('开始生成项目...\n\n从：' + options.from + '\n到：' + options.to + '\n\n');

    if (options.clearDir) {
        try {
            IO.clearDir(to);
        } catch (e) {
        }
    }

    var files = IO.getFiles(options.from);
    for (var i = 0; i < files.length; i++) {
        ProjectBuilder.buildFile(options, files[i]);
    }

    // 3. 生成完成。
    if (options.errorCount) {
        options.log('\n\n从：' + options.from + '\n到：' + options.to + '\n\n项目生成失败：' + options.errorCount + ' 个错误\n');
    } else {
        options.log('\n\n从：' + options.from + '\n到：' + options.to + '\n\n项目生成成功!\n');
    }

};

/**
 * 发布单个文件。
 * @param {Object} options 生成的配置项。
 * @param {String} from 发布路径。
 */
ProjectBuilder.buildFile = function (options, from) {
    var to = ProjectBuilder.redirect(options, from);
    if (to === null) {
        options.log('~ ' + from);
        return null;
    }

    var fileType = options.fileTypes[Path.extname(from)] || options.fileTypes['*'];
    if (fileType.ignore) {
        options.log('- ' + from);
        return null;
    }

    options.log('> ' + to);

    if (!fileType.process) {
        fileType = options.fileTypes['*'];
    }

    fileType.process(options, Path.resolve(options.from, from), Path.resolve(options.to, from), from, to);
    return to;
}

/**
 * 确定一个路径发布后的路径。
 */
ProjectBuilder.redirect = function (options, from) {
    for (var i = 0; i < options.redirects.length; i++) {
        var redirectRule = options.redirects[i];

        if (from.match(redirectRule.from)) {
            from = from.replace(redirectRule.from, redirectRule.to);

            if (!redirectRule.continueRedirect) {
                break;
            }

        }

    }

    return from;
};
