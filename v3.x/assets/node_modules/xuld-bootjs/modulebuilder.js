/**
 * @fileOverview 模块打包工具。此文件可同时在浏览器或 nodejs 执行。
 * @author xuld
 */

var Utility = Utility || require('./utility');

/**
 * 提供模块打包工具。
 */
var ModuleBuilder = typeof exports === 'object' ? exports : {};

/**
 * 对象默认配置对象。
 */
ModuleBuilder.defaultOptions = {

    /**
     * 打印日志。
     */
    log: Utility.log,

    /**
     * 打印错误。
     */
    error: Utility.error,

    /**
     * 生成开始的回调。
     */
    start: function() {
        this.log("开始打包...\n");
    },

    /**.
     * 生成完成的回调。
     */
    complete: function () {
        this.log("\n打包成功!");
    },

    // 在每个文件之前插入的注释。
    prependFileComments: '/*********************************************************\n' +
                       ' * This file is created by boot.js at {time}. \n' +
                       ' * DO NOT EDIT IT!!!\n' +
                       ' ********************************************************/',

    // 在每个模块之前插入的注释。
    prependModuleComments: '/*********************************************************\n' +
                             ' * #required {path}\n' +
                             ' ********************************************************/',

    // 生成文件使用的换行符。
    lineBreak: '\r\n',

    // 源文件编码。
    inputEncoding: 'utf-8',

    // 生成文件编码。
    outputEncoding: 'utf-8',
    
    // 基础路径。此路径将用于解析 #require 的相对路径。
    basePath: null,

    // 指示是否生成压缩文件。
    minify: false,

    // 存储要打包的源文件。
    inputs: [],

    // 生成的 JS 路径。
    outputJs: null,

    // 生成的压缩 JS 路径。
    outputMinJs: '',

    // 生成的 CSS 路径。
    outputCss: null,
    
    // 生成的压缩 Css 路径。
    outputMinCss: ''

};

/**
 * 执行打包操作。
 */
ModuleBuilder.build = function (options) {

    // 复制默认配置。
    options = Utility.extendIf(options || {}, ModuleBuilder.defaultOptions);

    // 生成结果对象。
    options = Utility.extendIf(options, {

        // 存储最后打包生成的全部 css 文件。
        outputCssList: {},

        // 存储最后打包生成的全部 js 文件。
        outputJsList: {},

        // 存储最后打包生成的全部资源文件。
        outputAssetList: {},

        // 解析过的模块列表。
        parsedModules: {},

        // 被排查的模块路径。
        ignores: [],

        // 解析时预定义的宏。
        defines: {},

    });

    // 如果未指定生成的 js 和 css 路径，则自动生成随机文件名。
    if (options.outputJs == null && options.outputCss == null) {
        var fileName = Utility.getNow().replace(/\D/g, "");
        options.outputJs = fileName + '.js';
        options.outputCss = fileName + '.css';
    }

    // 更新为绝对路径。
    for (var i = 0; i < options.ignores.length; i++) {
        options.ignores[i] = Utility.resolveRelativePath(options.basePath, options.ignores[i]);
    }

    // 开始生成操作。
    options.start();
    
    ModuleBuilder.parseRefs(options, options.inputs, options.basePath, function (options) {

        // 排除无效文件。
        for (var i = 0; i < options.ignores.length; i++) {
            var p = options.ignores[i];
            delete options.outputJsList[p];
            delete options.outputCssList[p];
            delete options.outputAssetList[p];
        }

        function generateJsOrCss(options, jsOrCss) {

            var outputJsOrCss = 'output' + jsOrCss;
            var outputJsOrCssCode = outputJsOrCss + 'Code';

            options.log('+ ' + (options[outputJsOrCss] || jsOrCss.toLowerCase()));

            options[outputJsOrCssCode] = ModuleBuilder.generateCode(options, options[outputJsOrCss + 'List'], options[outputJsOrCss]);
            if (options[outputJsOrCssCode] === null) {
                return;
            }

            if (options[outputJsOrCss]) {
                Utility.writeFile(options[outputJsOrCss], options[outputJsOrCssCode], options.outputEncoding);
            }
            if (options.minify) {
                var outputJsOrCssMin = options['outputMin' + jsOrCss];
                if (options[outputJsOrCss] && !outputJsOrCssMin) {
                    options['outputMin' + jsOrCss] = outputJsOrCssMin = options[outputJsOrCss].replace(/(\.\w+)$/, '.min$1');
                }

                if (outputJsOrCssMin) {
                    options.log('+ ' + outputJsOrCssMin);
                } else {
                    options.log('+ ' + (options[outputJsOrCss] || jsOrCss.toLowerCase()));
                }
                
                try {
                    options[outputJsOrCssCode] = Utility['compress' + jsOrCss](options[outputJsOrCssCode]);
                } catch (e) {
                    options.error('压缩错误：' + e.message);
                }
                if (outputJsOrCssMin) {
                    Utility.writeFile(outputJsOrCssMin, options[outputJsOrCssCode], options.outputEncoding);
                }
            }

        }

        options.log('\n正在生成文件...\n');

        // 生成 js 和 css 文件。
        generateJsOrCss(options, 'Js');
        generateJsOrCss(options, 'Css');

        // 复制 assets 路径。
        if (options.outputCss) {
            for (var fullPath in options.outputAssetList) {
                for (var i = 0; i < options.outputAssetList[fullPath].length; i++) {
                    Utility.copyFile(fullPath, Utility.resolveRelativePath(options.outputCss, options.outputAssetList[fullPath][i]));
                }
            }
        }
        
        options.complete();
    });

    return options;

};

/**
 * 解析指定模块列表展开依赖后的全部输出结果。
 * @param {Object} options 相关的配置。
 * @param {Array} modules 所有直接依赖的模块列表。
 * @param {String} basePath 模块依赖项的基础路径。
 * @param {Function} callback 所有模块解析完成后的回调函数。
 */
ModuleBuilder.parseRefs = function (options, modules, basePath, callback) {
    var pendingFileCount = modules.length;
    if (pendingFileCount == 0) {
        callback(options);
        return;
    }
    for (var i = 0; i < modules.length; i++) {
        ModuleBuilder.parseRef(options, modules[i], basePath, function (options) {
            if (--pendingFileCount == 0) {
                callback(options);
            }
        });
    }
};

/**
 * 解析一个模块展开依赖后的全部输出结果。
 * @param {Object} options 相关的required配置。
 * @param {Array} modulePath 要解析的模块路径。
 * @param {String} basePath 模块依赖项的基础路径。
 * @param {Function} callback 所有模块解析完成后的回调函数。
 */
ModuleBuilder.parseRef = function (options, modulePath, basePath, callback) {

    var moduleFullPath = Utility.resolveRelativePath(basePath, modulePath);
    
    // 不重复解析同一个模块。
    if (moduleFullPath in options.parsedModules) {
        callback(options);
        return;
    }
    
    // 标记模块已解析。
    options.parsedModules[moduleFullPath] = basePath;
    
    options.log("> " + moduleFullPath);

    // 开始处理指定文件。
    options.startParseModule && options.startParseModule(moduleFullPath);

    var fileType = Utility.getExtension(modulePath);

    // 分别解析不同类型的模块。
    switch (fileType) {
        case '.js':
        case '.css':
            Utility.readFile(moduleFullPath, function (content) {

                if (content === null) {
                    return;
                }

                // 解析 #if 等。
                content = Utility.resolveMacro(content, options.defines);

                var refs = [];

                // 解析 #require。
                content = content.replace(/^(\s*\/[\/\*]\s*#)(\w+)\s+([^\r\n\*]+)/gm, function (all, prefix, macro, requireUrl) {
                    switch (macro) {
                        case 'require':
                            refs.push(requireUrl);
                            break;
                        case 'required':
                            requireUrl = Utility.resolveRelativePath(basePath, requireUrl);
                            if (options.ignores.indexOf(requireUrl) < 0) {
                                options.ignores.push(requireUrl);
                            }
                            break;
                    }
                    return all;
                });

                // 解析 @import。
                if (fileType === '.css') {
                    content = content.replace(/(@import\s+)?(url\s*\(\s*(['"]?))(.+)(\3\s*\))/ig, function(all, isImport, q1, _, assetUrl, q2) {

                        // 不处理绝对路径。
                        if (imgUrl.indexOf(':') >= 0) {
                            return all;
                        }

                        // 导入外部 CSS。
                        if (isImport) {
                            refs.push(assetUrl);
                            return '/*' + all + '*/';
                        }

                        refs.push(assetUrl);

                        return all;
                    });
                }

                ModuleBuilder.parseRefs(options, refs, modulePath, function (options) {
                    options[fileType === '.js' ? 'outputJsList' : 'outputCssList'][moduleFullPath] = content;
                    callback(options);
                });

            }, options.inputEncoding);
            break;
        case '':
            ModuleBuilder.parseRefs(options, [modulePath + '.css', modulePath + '.js'], basePath, callback);
            break;
        default:
            var paths = options.outputAssetList[moduleFullPath] || (options.outputAssetList[moduleFullPath] = []);
            if (paths.indexOf(modulePath) < 0) {
                paths.push(modulePath);
            }
            break;
    }

};

/**
 * 根据返回的依赖列表生成最终源码。
 * @param {Object} options 相关的配置。
 * @param {Array} outputList 生成的依赖列表。
 */
ModuleBuilder.generateCode = function (options, outputList, savePath) {
    
    var content = '', hasItems;

    // 添加注释。
    if (options.prependFileComments) {
        content += options.prependFileComments
            .replace('{time}', Utility.getNow())
            .replace(/\r?\n/g, options.lineBreak) + options.lineBreak;
    }

    for (var p in outputList) {

        hasItems = true;

        // 添加注释。
        if (options.prependModuleComments) {
            content += options.lineBreak + options.lineBreak + options.prependModuleComments
                .replace('{time}', Utility.getNow())
                .replace('{path}', savePath ? Utility.getRelativePath(savePath, p) : p)
                .replace(/\r?\n/g, options.lineBreak);
        }
        
        content += options.lineBreak;

        content += outputList[p];
    }

    return hasItems ? content : null;
};
